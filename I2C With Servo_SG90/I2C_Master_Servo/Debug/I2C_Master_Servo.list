
I2C_Master_Servo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005554  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08005724  08005724  00006724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800589c  0800589c  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800589c  0800589c  0000689c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058a4  080058a4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a4  080058a4  000068a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058a8  080058a8  000068a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080058ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000060  0800590c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002d8  0800590c  000072d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd17  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c49  00000000  00000000  00012da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a38  00000000  00000000  000149f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000802  00000000  00000000  00015428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021823  00000000  00000000  00015c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ded3  00000000  00000000  0003744d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb283  00000000  00000000  00045320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001105a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003000  00000000  00000000  001105e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001135e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800570c 	.word	0x0800570c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	0800570c 	.word	0x0800570c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fba4 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f864 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f948 	bl	800088c <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 f926 	bl	800084c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000600:	f000 f8fa 	bl	80007f8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000604:	f000 f8ca 	bl	800079c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t *)"Enter angle:\r\n", 14, 100);
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	220e      	movs	r2, #14
 800060c:	4924      	ldr	r1, [pc, #144]	@ (80006a0 <main+0xb4>)
 800060e:	4825      	ldr	r0, [pc, #148]	@ (80006a4 <main+0xb8>)
 8000610:	f003 ff02 	bl	8004418 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_UART_Receive(&huart2, (uint8_t *)&rx, 1, HAL_MAX_DELAY) == HAL_OK)
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	2201      	movs	r2, #1
 800061a:	4923      	ldr	r1, [pc, #140]	@ (80006a8 <main+0xbc>)
 800061c:	4821      	ldr	r0, [pc, #132]	@ (80006a4 <main+0xb8>)
 800061e:	f003 ff86 	bl	800452e <HAL_UART_Receive>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d1f5      	bne.n	8000614 <main+0x28>
	      {
	        if (rx == '\r' || rx == '\n')
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <main+0xbc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b0d      	cmp	r3, #13
 800062e:	d003      	beq.n	8000638 <main+0x4c>
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <main+0xbc>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b0a      	cmp	r3, #10
 8000636:	d122      	bne.n	800067e <main+0x92>
	        {
	          uart_buffer[i] = '\0';
 8000638:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <main+0xc0>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <main+0xc4>)
 8000640:	2100      	movs	r1, #0
 8000642:	5499      	strb	r1, [r3, r2]
	          tx_angle = atoi(uart_buffer);
 8000644:	481a      	ldr	r0, [pc, #104]	@ (80006b0 <main+0xc4>)
 8000646:	f004 fb39 	bl	8004cbc <atoi>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <main+0xc8>)
 8000650:	801a      	strh	r2, [r3, #0]
	          i = 0;
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <main+0xc0>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
	          memset(uart_buffer, 0, sizeof(uart_buffer));
 8000658:	220a      	movs	r2, #10
 800065a:	2100      	movs	r1, #0
 800065c:	4814      	ldr	r0, [pc, #80]	@ (80006b0 <main+0xc4>)
 800065e:	f004 fbd7 	bl	8004e10 <memset>

	          if (ready_to_send)
 8000662:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <main+0xcc>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d018      	beq.n	800069c <main+0xb0>
	          {
	            ready_to_send = 0;
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <main+0xcc>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	            HAL_I2C_Master_Transmit_IT(&hi2c1, 0x08 << 1, (uint8_t*)&tx_angle, 2);
 8000670:	2302      	movs	r3, #2
 8000672:	4a10      	ldr	r2, [pc, #64]	@ (80006b4 <main+0xc8>)
 8000674:	2110      	movs	r1, #16
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <main+0xd0>)
 8000678:	f001 fb06 	bl	8001c88 <HAL_I2C_Master_Transmit_IT>
	          if (ready_to_send)
 800067c:	e00e      	b.n	800069c <main+0xb0>
	          }
	        }
	        else if (i < sizeof(uart_buffer) - 1)
 800067e:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <main+0xc0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b08      	cmp	r3, #8
 8000684:	d8c6      	bhi.n	8000614 <main+0x28>
	        {
	          uart_buffer[i++] = rx;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <main+0xc0>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	1c5a      	adds	r2, r3, #1
 800068c:	b2d1      	uxtb	r1, r2
 800068e:	4a07      	ldr	r2, [pc, #28]	@ (80006ac <main+0xc0>)
 8000690:	7011      	strb	r1, [r2, #0]
 8000692:	461a      	mov	r2, r3
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <main+0xbc>)
 8000696:	7819      	ldrb	r1, [r3, #0]
 8000698:	4b05      	ldr	r3, [pc, #20]	@ (80006b0 <main+0xc4>)
 800069a:	5499      	strb	r1, [r3, r2]
	  if (HAL_UART_Receive(&huart2, (uint8_t *)&rx, 1, HAL_MAX_DELAY) == HAL_OK)
 800069c:	e7ba      	b.n	8000614 <main+0x28>
 800069e:	bf00      	nop
 80006a0:	08005724 	.word	0x08005724
 80006a4:	20000130 	.word	0x20000130
 80006a8:	20000185 	.word	0x20000185
 80006ac:	20000184 	.word	0x20000184
 80006b0:	20000178 	.word	0x20000178
 80006b4:	20000182 	.word	0x20000182
 80006b8:	20000000 	.word	0x20000000
 80006bc:	2000007c 	.word	0x2000007c

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	@ 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fb9e 	bl	8004e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <SystemClock_Config+0xd4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xd8>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800073c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4618      	mov	r0, r3
 8000750:	f003 fb74 	bl	8003e3c <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075a:	f000 f92f 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f003 f814 	bl	80037a8 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000786:	f000 f919 	bl	80009bc <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a2:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <MX_I2C1_Init+0x54>)
 80007a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007a8:	4a12      	ldr	r2, [pc, #72]	@ (80007f4 <MX_I2C1_Init+0x58>)
 80007aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007cc:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007d8:	4804      	ldr	r0, [pc, #16]	@ (80007ec <MX_I2C1_Init+0x50>)
 80007da:	f001 f8fb 	bl	80019d4 <HAL_I2C_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007e4:	f000 f8ea 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	40005400 	.word	0x40005400
 80007f4:	000186a0 	.word	0x000186a0

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f003 fda2 	bl	8004378 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f8bf 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000130 	.word	0x20000130
 8000848:	40004400 	.word	0x40004400

0800084c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_DMA_Init+0x3c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a0b      	ldr	r2, [pc, #44]	@ (8000888 <MX_DMA_Init+0x3c>)
 800085c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_DMA_Init+0x3c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2011      	movs	r0, #17
 8000874:	f000 fbaf 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f000 fbc8 	bl	800100e <HAL_NVIC_EnableIRQ>

}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	613b      	str	r3, [r7, #16]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008ac:	f043 0304 	orr.w	r3, r3, #4
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	613b      	str	r3, [r7, #16]
 80008bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	4a25      	ldr	r2, [pc, #148]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ce:	4b23      	ldr	r3, [pc, #140]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a1e      	ldr	r2, [pc, #120]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b18      	ldr	r3, [pc, #96]	@ (800095c <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a17      	ldr	r2, [pc, #92]	@ (800095c <MX_GPIO_Init+0xd0>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b15      	ldr	r3, [pc, #84]	@ (800095c <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	2120      	movs	r1, #32
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <MX_GPIO_Init+0xd4>)
 8000918:	f001 f842 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800091c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000922:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	@ (8000964 <MX_GPIO_Init+0xd8>)
 8000934:	f000 fea0 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000938:	2320      	movs	r3, #32
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	4619      	mov	r1, r3
 800094e:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0xd4>)
 8000950:	f000 fe92 	bl	8001678 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000954:	bf00      	nop
 8000956:	3728      	adds	r7, #40	@ 0x28
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	40020000 	.word	0x40020000
 8000964:	40020800 	.word	0x40020800

08000968 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	@ 0x28
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    ready_to_send = 1;
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_I2C_MasterTxCpltCallback+0x44>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
    char msg[30];
    sprintf(msg, "Sent angle: %d\r\n", tx_angle);
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <HAL_I2C_MasterTxCpltCallback+0x48>)
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	490c      	ldr	r1, [pc, #48]	@ (80009b4 <HAL_I2C_MasterTxCpltCallback+0x4c>)
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fa22 	bl	8004dcc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 100);
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fc3f 	bl	8000210 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f107 0108 	add.w	r1, r7, #8
 800099a:	2364      	movs	r3, #100	@ 0x64
 800099c:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <HAL_I2C_MasterTxCpltCallback+0x50>)
 800099e:	f003 fd3b 	bl	8004418 <HAL_UART_Transmit>
}
 80009a2:	bf00      	nop
 80009a4:	3728      	adds	r7, #40	@ 0x28
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000182 	.word	0x20000182
 80009b4:	08005734 	.word	0x08005734
 80009b8:	20000130 	.word	0x20000130

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b09      	ldr	r3, [pc, #36]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a08      	ldr	r2, [pc, #32]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_MspInit+0x4c>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a06:	2007      	movs	r0, #7
 8000a08:	f000 fada 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40023800 	.word	0x40023800

08000a18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a38      	ldr	r2, [pc, #224]	@ (8000b18 <HAL_I2C_MspInit+0x100>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d16a      	bne.n	8000b10 <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	4a36      	ldr	r2, [pc, #216]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a44:	f043 0302 	orr.w	r3, r3, #2
 8000a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4a:	4b34      	ldr	r3, [pc, #208]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	f003 0302 	and.w	r3, r3, #2
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a56:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5c:	2312      	movs	r3, #18
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	482b      	ldr	r0, [pc, #172]	@ (8000b20 <HAL_I2C_MspInit+0x108>)
 8000a74:	f000 fe00 	bl	8001678 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <HAL_I2C_MspInit+0x104>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000a94:	4b23      	ldr	r3, [pc, #140]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000a96:	4a24      	ldr	r2, [pc, #144]	@ (8000b28 <HAL_I2C_MspInit+0x110>)
 8000a98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000a9a:	4b22      	ldr	r3, [pc, #136]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000a9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000aa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000aa2:	4b20      	ldr	r3, [pc, #128]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000aa4:	2240      	movs	r2, #64	@ 0x40
 8000aa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ab4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ac2:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000ad4:	4813      	ldr	r0, [pc, #76]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ad6:	f000 fab5 	bl	8001044 <HAL_DMA_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000ae0:	f7ff ff6c 	bl	80009bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <HAL_I2C_MspInit+0x10c>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	201f      	movs	r0, #31
 8000af6:	f000 fa6e 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000afa:	201f      	movs	r0, #31
 8000afc:	f000 fa87 	bl	800100e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2100      	movs	r1, #0
 8000b04:	2020      	movs	r0, #32
 8000b06:	f000 fa66 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b0a:	2020      	movs	r0, #32
 8000b0c:	f000 fa7f 	bl	800100e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b10:	bf00      	nop
 8000b12:	3728      	adds	r7, #40	@ 0x28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40005400 	.word	0x40005400
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020400 	.word	0x40020400
 8000b24:	200000d0 	.word	0x200000d0
 8000b28:	400260a0 	.word	0x400260a0

08000b2c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	@ 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <HAL_UART_MspInit+0x84>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12b      	bne.n	8000ba6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b18      	ldr	r3, [pc, #96]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	4a17      	ldr	r2, [pc, #92]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_UART_MspInit+0x88>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b86:	230c      	movs	r3, #12
 8000b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b96:	2307      	movs	r3, #7
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000ba2:	f000 fd69 	bl	8001678 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3728      	adds	r7, #40	@ 0x28
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40004400 	.word	0x40004400
 8000bb4:	40023800 	.word	0x40023800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc0:	bf00      	nop
 8000bc2:	e7fd      	b.n	8000bc0 <NMI_Handler+0x4>

08000bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c12:	f000 f8e5 	bl	8000de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
	...

08000c1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <DMA1_Stream6_IRQHandler+0x10>)
 8000c22:	f000 fadf 	bl	80011e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000d0 	.word	0x200000d0

08000c30 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <I2C1_EV_IRQHandler+0x10>)
 8000c36:	f001 f8c9 	bl	8001dcc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000007c 	.word	0x2000007c

08000c44 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <I2C1_ER_IRQHandler+0x10>)
 8000c4a:	f001 fa30 	bl	80020ae <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000007c 	.word	0x2000007c

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f004 f8ca 	bl	8004e20 <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000188 	.word	0x20000188
 8000cc0:	200002d8 	.word	0x200002d8

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cec:	f7ff ffea 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cf0:	480c      	ldr	r0, [pc, #48]	@ (8000d24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cf2:	490d      	ldr	r1, [pc, #52]	@ (8000d28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf8:	e002      	b.n	8000d00 <LoopCopyDataInit>

08000cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfe:	3304      	adds	r3, #4

08000d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d04:	d3f9      	bcc.n	8000cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d06:	4a0a      	ldr	r2, [pc, #40]	@ (8000d30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d08:	4c0a      	ldr	r4, [pc, #40]	@ (8000d34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d0c:	e001      	b.n	8000d12 <LoopFillZerobss>

08000d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d10:	3204      	adds	r2, #4

08000d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d14:	d3fb      	bcc.n	8000d0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f004 f889 	bl	8004e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fc67 	bl	80005ec <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d2c:	080058ac 	.word	0x080058ac
  ldr r2, =_sbss
 8000d30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d34:	200002d8 	.word	0x200002d8

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>
	...

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d40:	4b0e      	ldr	r3, [pc, #56]	@ (8000d7c <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0d      	ldr	r2, [pc, #52]	@ (8000d7c <HAL_Init+0x40>)
 8000d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d7c <HAL_Init+0x40>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <HAL_Init+0x40>)
 8000d52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d58:	4b08      	ldr	r3, [pc, #32]	@ (8000d7c <HAL_Init+0x40>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a07      	ldr	r2, [pc, #28]	@ (8000d7c <HAL_Init+0x40>)
 8000d5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f000 f92b 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f000 f808 	bl	8000d80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d70:	f7ff fe2a 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40023c00 	.word	0x40023c00

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d88:	4b12      	ldr	r3, [pc, #72]	@ (8000dd4 <HAL_InitTick+0x54>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <HAL_InitTick+0x58>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	4619      	mov	r1, r3
 8000d92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f943 	bl	800102a <HAL_SYSTICK_Config>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00e      	b.n	8000dcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b0f      	cmp	r3, #15
 8000db2:	d80a      	bhi.n	8000dca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db4:	2200      	movs	r2, #0
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f000 f90b 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc0:	4a06      	ldr	r2, [pc, #24]	@ (8000ddc <HAL_InitTick+0x5c>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000004 	.word	0x20000004
 8000dd8:	2000000c 	.word	0x2000000c
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <HAL_IncTick+0x20>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x24>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4413      	add	r3, r2
 8000df0:	4a04      	ldr	r2, [pc, #16]	@ (8000e04 <HAL_IncTick+0x24>)
 8000df2:	6013      	str	r3, [r2, #0]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000000c 	.word	0x2000000c
 8000e04:	2000018c 	.word	0x2000018c

08000e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	@ (8000e1c <HAL_GetTick+0x14>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2000018c 	.word	0x2000018c

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff feda 	bl	8000e08 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e099      	b.n	8001194 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2202      	movs	r2, #2
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 0201 	bic.w	r2, r2, #1
 800107e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001080:	e00f      	b.n	80010a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001082:	f7ff fec1 	bl	8000e08 <HAL_GetTick>
 8001086:	4602      	mov	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b05      	cmp	r3, #5
 800108e:	d908      	bls.n	80010a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2220      	movs	r2, #32
 8001094:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e078      	b.n	8001194 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1e8      	bne.n	8001082 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	@ (800119c <HAL_DMA_Init+0x158>)
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f8:	2b04      	cmp	r3, #4
 80010fa:	d107      	bne.n	800110c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001104:	4313      	orrs	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	4313      	orrs	r3, r2
 800110a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	4313      	orrs	r3, r2
 800112c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001132:	2b04      	cmp	r3, #4
 8001134:	d117      	bne.n	8001166 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	4313      	orrs	r3, r2
 800113e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00e      	beq.n	8001166 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fa19 	bl	8001580 <DMA_CheckFifoParam>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	@ 0x40
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2201      	movs	r2, #1
 800115e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001162:	2301      	movs	r3, #1
 8001164:	e016      	b.n	8001194 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f9d0 	bl	8001514 <DMA_CalcBaseAndBitshift>
 8001174:	4603      	mov	r3, r0
 8001176:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117c:	223f      	movs	r2, #63	@ 0x3f
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	f010803f 	.word	0xf010803f

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d004      	beq.n	80011be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00c      	b.n	80011d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011f0:	4b8e      	ldr	r3, [pc, #568]	@ (800142c <HAL_DMA_IRQHandler+0x248>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001430 <HAL_DMA_IRQHandler+0x24c>)
 80011f6:	fba2 2303 	umull	r2, r3, r2, r3
 80011fa:	0a9b      	lsrs	r3, r3, #10
 80011fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800120e:	2208      	movs	r2, #8
 8001210:	409a      	lsls	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4013      	ands	r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d01a      	beq.n	8001250 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d013      	beq.n	8001250 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0204 	bic.w	r2, r2, #4
 8001236:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800123c:	2208      	movs	r2, #8
 800123e:	409a      	lsls	r2, r3
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001254:	2201      	movs	r2, #1
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4013      	ands	r3, r2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d012      	beq.n	8001286 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	695b      	ldr	r3, [r3, #20]
 8001266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00b      	beq.n	8001286 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001272:	2201      	movs	r2, #1
 8001274:	409a      	lsls	r2, r3
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800127e:	f043 0202 	orr.w	r2, r3, #2
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128a:	2204      	movs	r2, #4
 800128c:	409a      	lsls	r2, r3
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d012      	beq.n	80012bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00b      	beq.n	80012bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012a8:	2204      	movs	r2, #4
 80012aa:	409a      	lsls	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012b4:	f043 0204 	orr.w	r2, r3, #4
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c0:	2210      	movs	r2, #16
 80012c2:	409a      	lsls	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d043      	beq.n	8001354 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d03c      	beq.n	8001354 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012de:	2210      	movs	r2, #16
 80012e0:	409a      	lsls	r2, r3
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d018      	beq.n	8001326 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d108      	bne.n	8001314 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	2b00      	cmp	r3, #0
 8001308:	d024      	beq.n	8001354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	4798      	blx	r3
 8001312:	e01f      	b.n	8001354 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01b      	beq.n	8001354 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	4798      	blx	r3
 8001324:	e016      	b.n	8001354 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001330:	2b00      	cmp	r3, #0
 8001332:	d107      	bne.n	8001344 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0208 	bic.w	r2, r2, #8
 8001342:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001358:	2220      	movs	r2, #32
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 808f 	beq.w	8001484 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	2b00      	cmp	r3, #0
 8001372:	f000 8087 	beq.w	8001484 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137a:	2220      	movs	r2, #32
 800137c:	409a      	lsls	r2, r3
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001388:	b2db      	uxtb	r3, r3
 800138a:	2b05      	cmp	r3, #5
 800138c:	d136      	bne.n	80013fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0216 	bic.w	r2, r2, #22
 800139c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d103      	bne.n	80013be <HAL_DMA_IRQHandler+0x1da>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d007      	beq.n	80013ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0208 	bic.w	r2, r2, #8
 80013cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013d2:	223f      	movs	r2, #63	@ 0x3f
 80013d4:	409a      	lsls	r2, r3
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d07e      	beq.n	80014f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	4798      	blx	r3
        }
        return;
 80013fa:	e079      	b.n	80014f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d01d      	beq.n	8001446 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800141c:	2b00      	cmp	r3, #0
 800141e:	d031      	beq.n	8001484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	4798      	blx	r3
 8001428:	e02c      	b.n	8001484 <HAL_DMA_IRQHandler+0x2a0>
 800142a:	bf00      	nop
 800142c:	20000004 	.word	0x20000004
 8001430:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001438:	2b00      	cmp	r3, #0
 800143a:	d023      	beq.n	8001484 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	4798      	blx	r3
 8001444:	e01e      	b.n	8001484 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f022 0210 	bic.w	r2, r2, #16
 8001462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001478:	2b00      	cmp	r3, #0
 800147a:	d003      	beq.n	8001484 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	2b00      	cmp	r3, #0
 800148a:	d032      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d022      	beq.n	80014de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2205      	movs	r2, #5
 800149c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0201 	bic.w	r2, r2, #1
 80014ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	3301      	adds	r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d307      	bcc.n	80014cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f2      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x2cc>
 80014ca:	e000      	b.n	80014ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d005      	beq.n	80014f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
 80014ee:	e000      	b.n	80014f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80014f0:	bf00      	nop
    }
  }
}
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001506:	b2db      	uxtb	r3, r3
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3b10      	subs	r3, #16
 8001524:	4a14      	ldr	r2, [pc, #80]	@ (8001578 <DMA_CalcBaseAndBitshift+0x64>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <DMA_CalcBaseAndBitshift+0x68>)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4413      	add	r3, r2
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	461a      	mov	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b03      	cmp	r3, #3
 8001540:	d909      	bls.n	8001556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800154a:	f023 0303 	bic.w	r3, r3, #3
 800154e:	1d1a      	adds	r2, r3, #4
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	659a      	str	r2, [r3, #88]	@ 0x58
 8001554:	e007      	b.n	8001566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800155e:	f023 0303 	bic.w	r3, r3, #3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	aaaaaaab 	.word	0xaaaaaaab
 800157c:	08005760 	.word	0x08005760

08001580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d11f      	bne.n	80015da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2b03      	cmp	r3, #3
 800159e:	d856      	bhi.n	800164e <DMA_CheckFifoParam+0xce>
 80015a0:	a201      	add	r2, pc, #4	@ (adr r2, 80015a8 <DMA_CheckFifoParam+0x28>)
 80015a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a6:	bf00      	nop
 80015a8:	080015b9 	.word	0x080015b9
 80015ac:	080015cb 	.word	0x080015cb
 80015b0:	080015b9 	.word	0x080015b9
 80015b4:	0800164f 	.word	0x0800164f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d046      	beq.n	8001652 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015c8:	e043      	b.n	8001652 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80015d2:	d140      	bne.n	8001656 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d8:	e03d      	b.n	8001656 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015e2:	d121      	bne.n	8001628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	2b03      	cmp	r3, #3
 80015e8:	d837      	bhi.n	800165a <DMA_CheckFifoParam+0xda>
 80015ea:	a201      	add	r2, pc, #4	@ (adr r2, 80015f0 <DMA_CheckFifoParam+0x70>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001601 	.word	0x08001601
 80015f4:	08001607 	.word	0x08001607
 80015f8:	08001601 	.word	0x08001601
 80015fc:	08001619 	.word	0x08001619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	73fb      	strb	r3, [r7, #15]
      break;
 8001604:	e030      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800160a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d025      	beq.n	800165e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001616:	e022      	b.n	800165e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001620:	d11f      	bne.n	8001662 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001626:	e01c      	b.n	8001662 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d903      	bls.n	8001636 <DMA_CheckFifoParam+0xb6>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2b03      	cmp	r3, #3
 8001632:	d003      	beq.n	800163c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001634:	e018      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	73fb      	strb	r3, [r7, #15]
      break;
 800163a:	e015      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00e      	beq.n	8001666 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	73fb      	strb	r3, [r7, #15]
      break;
 800164c:	e00b      	b.n	8001666 <DMA_CheckFifoParam+0xe6>
      break;
 800164e:	bf00      	nop
 8001650:	e00a      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001652:	bf00      	nop
 8001654:	e008      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001656:	bf00      	nop
 8001658:	e006      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165a:	bf00      	nop
 800165c:	e004      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 800165e:	bf00      	nop
 8001660:	e002      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;   
 8001662:	bf00      	nop
 8001664:	e000      	b.n	8001668 <DMA_CheckFifoParam+0xe8>
      break;
 8001666:	bf00      	nop
    }
  } 
  
  return status; 
 8001668:	7bfb      	ldrb	r3, [r7, #15]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	@ 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
 8001692:	e165      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001694:	2201      	movs	r2, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	697a      	ldr	r2, [r7, #20]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	f040 8154 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d005      	beq.n	80016ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d130      	bne.n	800172c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	68da      	ldr	r2, [r3, #12]
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001700:	2201      	movs	r2, #1
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	f003 0201 	and.w	r2, r3, #1
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b03      	cmp	r3, #3
 8001736:	d017      	beq.n	8001768 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	2203      	movs	r2, #3
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d123      	bne.n	80017bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	08da      	lsrs	r2, r3, #3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3208      	adds	r2, #8
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	220f      	movs	r2, #15
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	691a      	ldr	r2, [r3, #16]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	08da      	lsrs	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3208      	adds	r2, #8
 80017b6:	69b9      	ldr	r1, [r7, #24]
 80017b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4013      	ands	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0203 	and.w	r2, r3, #3
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80ae 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	4b5d      	ldr	r3, [pc, #372]	@ (8001978 <HAL_GPIO_Init+0x300>)
 8001804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001806:	4a5c      	ldr	r2, [pc, #368]	@ (8001978 <HAL_GPIO_Init+0x300>)
 8001808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800180c:	6453      	str	r3, [r2, #68]	@ 0x44
 800180e:	4b5a      	ldr	r3, [pc, #360]	@ (8001978 <HAL_GPIO_Init+0x300>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181a:	4a58      	ldr	r2, [pc, #352]	@ (800197c <HAL_GPIO_Init+0x304>)
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	089b      	lsrs	r3, r3, #2
 8001820:	3302      	adds	r3, #2
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	009b      	lsls	r3, r3, #2
 8001830:	220f      	movs	r2, #15
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	43db      	mvns	r3, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4013      	ands	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4f      	ldr	r2, [pc, #316]	@ (8001980 <HAL_GPIO_Init+0x308>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d025      	beq.n	8001892 <HAL_GPIO_Init+0x21a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4e      	ldr	r2, [pc, #312]	@ (8001984 <HAL_GPIO_Init+0x30c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01f      	beq.n	800188e <HAL_GPIO_Init+0x216>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4d      	ldr	r2, [pc, #308]	@ (8001988 <HAL_GPIO_Init+0x310>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0x212>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4c      	ldr	r2, [pc, #304]	@ (800198c <HAL_GPIO_Init+0x314>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d013      	beq.n	8001886 <HAL_GPIO_Init+0x20e>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a4b      	ldr	r2, [pc, #300]	@ (8001990 <HAL_GPIO_Init+0x318>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_GPIO_Init+0x20a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4a      	ldr	r2, [pc, #296]	@ (8001994 <HAL_GPIO_Init+0x31c>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d007      	beq.n	800187e <HAL_GPIO_Init+0x206>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a49      	ldr	r2, [pc, #292]	@ (8001998 <HAL_GPIO_Init+0x320>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d101      	bne.n	800187a <HAL_GPIO_Init+0x202>
 8001876:	2306      	movs	r3, #6
 8001878:	e00c      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800187a:	2307      	movs	r3, #7
 800187c:	e00a      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800187e:	2305      	movs	r3, #5
 8001880:	e008      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001882:	2304      	movs	r3, #4
 8001884:	e006      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001886:	2303      	movs	r3, #3
 8001888:	e004      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800188a:	2302      	movs	r3, #2
 800188c:	e002      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 800188e:	2301      	movs	r3, #1
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x21c>
 8001892:	2300      	movs	r3, #0
 8001894:	69fa      	ldr	r2, [r7, #28]
 8001896:	f002 0203 	and.w	r2, r2, #3
 800189a:	0092      	lsls	r2, r2, #2
 800189c:	4093      	lsls	r3, r2
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018a4:	4935      	ldr	r1, [pc, #212]	@ (800197c <HAL_GPIO_Init+0x304>)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018b2:	4b3a      	ldr	r3, [pc, #232]	@ (800199c <HAL_GPIO_Init+0x324>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018d6:	4a31      	ldr	r2, [pc, #196]	@ (800199c <HAL_GPIO_Init+0x324>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <HAL_GPIO_Init+0x324>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001900:	4a26      	ldr	r2, [pc, #152]	@ (800199c <HAL_GPIO_Init+0x324>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001906:	4b25      	ldr	r3, [pc, #148]	@ (800199c <HAL_GPIO_Init+0x324>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d003      	beq.n	800192a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800192a:	4a1c      	ldr	r2, [pc, #112]	@ (800199c <HAL_GPIO_Init+0x324>)
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001930:	4b1a      	ldr	r3, [pc, #104]	@ (800199c <HAL_GPIO_Init+0x324>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d003      	beq.n	8001954 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001954:	4a11      	ldr	r2, [pc, #68]	@ (800199c <HAL_GPIO_Init+0x324>)
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	2b0f      	cmp	r3, #15
 8001964:	f67f ae96 	bls.w	8001694 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800
 800197c:	40013800 	.word	0x40013800
 8001980:	40020000 	.word	0x40020000
 8001984:	40020400 	.word	0x40020400
 8001988:	40020800 	.word	0x40020800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40021000 	.word	0x40021000
 8001994:	40021400 	.word	0x40021400
 8001998:	40021800 	.word	0x40021800
 800199c:	40013c00 	.word	0x40013c00

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e12b      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d106      	bne.n	8001a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff f80c 	bl	8000a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	@ 0x24
 8001a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a38:	f001 ffa8 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8001a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a81      	ldr	r2, [pc, #516]	@ (8001c48 <HAL_I2C_Init+0x274>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d807      	bhi.n	8001a58 <HAL_I2C_Init+0x84>
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4a80      	ldr	r2, [pc, #512]	@ (8001c4c <HAL_I2C_Init+0x278>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	bf94      	ite	ls
 8001a50:	2301      	movls	r3, #1
 8001a52:	2300      	movhi	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	e006      	b.n	8001a66 <HAL_I2C_Init+0x92>
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4a7d      	ldr	r2, [pc, #500]	@ (8001c50 <HAL_I2C_Init+0x27c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	bf94      	ite	ls
 8001a60:	2301      	movls	r3, #1
 8001a62:	2300      	movhi	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e0e7      	b.n	8001c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	4a78      	ldr	r2, [pc, #480]	@ (8001c54 <HAL_I2C_Init+0x280>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0c9b      	lsrs	r3, r3, #18
 8001a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68ba      	ldr	r2, [r7, #8]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001c48 <HAL_I2C_Init+0x274>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d802      	bhi.n	8001aa8 <HAL_I2C_Init+0xd4>
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	e009      	b.n	8001abc <HAL_I2C_Init+0xe8>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	4a69      	ldr	r2, [pc, #420]	@ (8001c58 <HAL_I2C_Init+0x284>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	099b      	lsrs	r3, r3, #6
 8001aba:	3301      	adds	r3, #1
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6812      	ldr	r2, [r2, #0]
 8001ac0:	430b      	orrs	r3, r1
 8001ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001ace:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	495c      	ldr	r1, [pc, #368]	@ (8001c48 <HAL_I2C_Init+0x274>)
 8001ad8:	428b      	cmp	r3, r1
 8001ada:	d819      	bhi.n	8001b10 <HAL_I2C_Init+0x13c>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	1e59      	subs	r1, r3, #1
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aea:	1c59      	adds	r1, r3, #1
 8001aec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001af0:	400b      	ands	r3, r1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00a      	beq.n	8001b0c <HAL_I2C_Init+0x138>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e59      	subs	r1, r3, #1
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b0a:	e051      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b0c:	2304      	movs	r3, #4
 8001b0e:	e04f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d111      	bne.n	8001b3c <HAL_I2C_Init+0x168>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e58      	subs	r0, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6859      	ldr	r1, [r3, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	440b      	add	r3, r1
 8001b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	e012      	b.n	8001b62 <HAL_I2C_Init+0x18e>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	0099      	lsls	r1, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b52:	3301      	adds	r3, #1
 8001b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	bf0c      	ite	eq
 8001b5c:	2301      	moveq	r3, #1
 8001b5e:	2300      	movne	r3, #0
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <HAL_I2C_Init+0x196>
 8001b66:	2301      	movs	r3, #1
 8001b68:	e022      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <HAL_I2C_Init+0x1bc>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e58      	subs	r0, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6859      	ldr	r1, [r3, #4]
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	440b      	add	r3, r1
 8001b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b84:	3301      	adds	r3, #1
 8001b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b8e:	e00f      	b.n	8001bb0 <HAL_I2C_Init+0x1dc>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6859      	ldr	r1, [r3, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	440b      	add	r3, r1
 8001b9e:	0099      	lsls	r1, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bb0:	6879      	ldr	r1, [r7, #4]
 8001bb2:	6809      	ldr	r1, [r1, #0]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6911      	ldr	r1, [r2, #16]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68d2      	ldr	r2, [r2, #12]
 8001bea:	4311      	orrs	r1, r2
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695a      	ldr	r2, [r3, #20]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	000186a0 	.word	0x000186a0
 8001c4c:	001e847f 	.word	0x001e847f
 8001c50:	003d08ff 	.word	0x003d08ff
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c6e:	2b80      	cmp	r3, #128	@ 0x80
 8001c70:	d103      	bne.n	8001c7a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  }
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b087      	sub	sp, #28
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	461a      	mov	r2, r3
 8001c94:	460b      	mov	r3, r1
 8001c96:	817b      	strh	r3, [r7, #10]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	f040 8081 	bne.w	8001db0 <HAL_I2C_Master_Transmit_IT+0x128>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001cae:	4b44      	ldr	r3, [pc, #272]	@ (8001dc0 <HAL_I2C_Master_Transmit_IT+0x138>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	08db      	lsrs	r3, r3, #3
 8001cb4:	4a43      	ldr	r2, [pc, #268]	@ (8001dc4 <HAL_I2C_Master_Transmit_IT+0x13c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a1a      	lsrs	r2, r3, #8
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009a      	lsls	r2, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d112      	bne.n	8001cfa <HAL_I2C_Master_Transmit_IT+0x72>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2220      	movs	r2, #32
 8001cde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cee:	f043 0220 	orr.w	r2, r3, #32
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e05b      	b.n	8001db2 <HAL_I2C_Master_Transmit_IT+0x12a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d0df      	beq.n	8001cc8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_I2C_Master_Transmit_IT+0x8e>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e04d      	b.n	8001db2 <HAL_I2C_Master_Transmit_IT+0x12a>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d007      	beq.n	8001d3c <HAL_I2C_Master_Transmit_IT+0xb4>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2221      	movs	r2, #33	@ 0x21
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2210      	movs	r2, #16
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	893a      	ldrh	r2, [r7, #8]
 8001d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d72:	b29a      	uxth	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a13      	ldr	r2, [pc, #76]	@ (8001dc8 <HAL_I2C_Master_Transmit_IT+0x140>)
 8001d7c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8001d7e:	897a      	ldrh	r2, [r7, #10]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001d9a:	605a      	str	r2, [r3, #4]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001daa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	e000      	b.n	8001db2 <HAL_I2C_Master_Transmit_IT+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001db0:	2302      	movs	r3, #2
  }
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	371c      	adds	r7, #28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	14f8b589 	.word	0x14f8b589
 8001dc8:	ffff0000 	.word	0xffff0000

08001dcc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b088      	sub	sp, #32
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001dec:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d003      	beq.n	8001e04 <HAL_I2C_EV_IRQHandler+0x38>
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b40      	cmp	r3, #64	@ 0x40
 8001e00:	f040 80c1 	bne.w	8001f86 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10d      	bne.n	8001e3a <HAL_I2C_EV_IRQHandler+0x6e>
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001e24:	d003      	beq.n	8001e2e <HAL_I2C_EV_IRQHandler+0x62>
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001e2c:	d101      	bne.n	8001e32 <HAL_I2C_EV_IRQHandler+0x66>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_I2C_EV_IRQHandler+0x68>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f000 8132 	beq.w	800209e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00c      	beq.n	8001e5e <HAL_I2C_EV_IRQHandler+0x92>
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	0a5b      	lsrs	r3, r3, #9
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f001 fc8d 	bl	8003770 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 fd91 	bl	800297e <I2C_Master_SB>
 8001e5c:	e092      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0xb2>
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	0a5b      	lsrs	r3, r3, #9
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fe07 	bl	8002a8a <I2C_Master_ADD10>
 8001e7c:	e082      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	085b      	lsrs	r3, r3, #1
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0xd2>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	0a5b      	lsrs	r3, r3, #9
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fe21 	bl	8002ade <I2C_Master_ADDR>
 8001e9c:	e072      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	089b      	lsrs	r3, r3, #2
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03b      	beq.n	8001f22 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001eb8:	f000 80f3 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	09db      	lsrs	r3, r3, #7
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00f      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d009      	beq.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x11c>
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	089b      	lsrs	r3, r3, #2
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d103      	bne.n	8001ee8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f9e9 	bl	80022b8 <I2C_MasterTransmit_TXE>
 8001ee6:	e04d      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80d6 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	0a5b      	lsrs	r3, r3, #9
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80cf 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	2b21      	cmp	r3, #33	@ 0x21
 8001f08:	d103      	bne.n	8001f12 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa70 	bl	80023f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f10:	e0c7      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
 8001f14:	2b40      	cmp	r3, #64	@ 0x40
 8001f16:	f040 80c4 	bne.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fade 	bl	80024dc <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f20:	e0bf      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f30:	f000 80b7 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00f      	beq.n	8001f60 <HAL_I2C_EV_IRQHandler+0x194>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	0a9b      	lsrs	r3, r3, #10
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d009      	beq.n	8001f60 <HAL_I2C_EV_IRQHandler+0x194>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d103      	bne.n	8001f60 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fb57 	bl	800260c <I2C_MasterReceive_RXNE>
 8001f5e:	e011      	b.n	8001f84 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	089b      	lsrs	r3, r3, #2
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 809a 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	0a5b      	lsrs	r3, r3, #9
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 8093 	beq.w	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fc0d 	bl	800279c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f82:	e08e      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f84:	e08d      	b.n	80020a2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e007      	b.n	8001fa8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d012      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x20e>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	0a5b      	lsrs	r3, r3, #9
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001fd0:	69b9      	ldr	r1, [r7, #24]
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 ffd2 	bl	8002f7c <I2C_Slave_ADDR>
 8001fd8:	e066      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d009      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0x22e>
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	0a5b      	lsrs	r3, r3, #9
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f001 f80c 	bl	8003010 <I2C_Slave_STOPF>
 8001ff8:	e056      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001ffa:	7bbb      	ldrb	r3, [r7, #14]
 8001ffc:	2b21      	cmp	r3, #33	@ 0x21
 8001ffe:	d002      	beq.n	8002006 <HAL_I2C_EV_IRQHandler+0x23a>
 8002000:	7bbb      	ldrb	r3, [r7, #14]
 8002002:	2b29      	cmp	r3, #41	@ 0x29
 8002004:	d125      	bne.n	8002052 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	09db      	lsrs	r3, r3, #7
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00f      	beq.n	8002032 <HAL_I2C_EV_IRQHandler+0x266>
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	0a9b      	lsrs	r3, r3, #10
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_I2C_EV_IRQHandler+0x266>
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	089b      	lsrs	r3, r3, #2
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 fee8 	bl	8002e00 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002030:	e039      	b.n	80020a6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	089b      	lsrs	r3, r3, #2
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d033      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x2da>
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0a5b      	lsrs	r3, r3, #9
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d02d      	beq.n	80020a6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 ff15 	bl	8002e7a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002050:	e029      	b.n	80020a6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	099b      	lsrs	r3, r3, #6
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00f      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2b2>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	0a9b      	lsrs	r3, r3, #10
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_I2C_EV_IRQHandler+0x2b2>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	089b      	lsrs	r3, r3, #2
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 ff20 	bl	8002ebc <I2C_SlaveReceive_RXNE>
 800207c:	e014      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00e      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	0a5b      	lsrs	r3, r3, #9
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d008      	beq.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 ff4e 	bl	8002f38 <I2C_SlaveReceive_BTF>
 800209c:	e004      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800209e:	bf00      	nop
 80020a0:	e002      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a2:	bf00      	nop
 80020a4:	e000      	b.n	80020a8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020a6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020a8:	3720      	adds	r7, #32
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b08a      	sub	sp, #40	@ 0x28
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80020d0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	0a1b      	lsrs	r3, r3, #8
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <HAL_I2C_ER_IRQHandler+0x4e>
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	0a1b      	lsrs	r3, r3, #8
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d008      	beq.n	80020fc <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80020fa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	0a5b      	lsrs	r3, r3, #9
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00e      	beq.n	8002126 <HAL_I2C_ER_IRQHandler+0x78>
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	0a1b      	lsrs	r3, r3, #8
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8002124:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	0a9b      	lsrs	r3, r3, #10
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d03f      	beq.n	80021b2 <HAL_I2C_ER_IRQHandler+0x104>
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d039      	beq.n	80021b2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800213e:	7efb      	ldrb	r3, [r7, #27]
 8002140:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002146:	b29b      	uxth	r3, r3
 8002148:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002150:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002156:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8002158:	7ebb      	ldrb	r3, [r7, #26]
 800215a:	2b20      	cmp	r3, #32
 800215c:	d112      	bne.n	8002184 <HAL_I2C_ER_IRQHandler+0xd6>
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10f      	bne.n	8002184 <HAL_I2C_ER_IRQHandler+0xd6>
 8002164:	7cfb      	ldrb	r3, [r7, #19]
 8002166:	2b21      	cmp	r3, #33	@ 0x21
 8002168:	d008      	beq.n	800217c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b29      	cmp	r3, #41	@ 0x29
 800216e:	d005      	beq.n	800217c <HAL_I2C_ER_IRQHandler+0xce>
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b28      	cmp	r3, #40	@ 0x28
 8002174:	d106      	bne.n	8002184 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2b21      	cmp	r3, #33	@ 0x21
 800217a:	d103      	bne.n	8002184 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f001 f877 	bl	8003270 <I2C_Slave_AF>
 8002182:	e016      	b.n	80021b2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800218c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002196:	7efb      	ldrb	r3, [r7, #27]
 8002198:	2b10      	cmp	r3, #16
 800219a:	d002      	beq.n	80021a2 <HAL_I2C_ER_IRQHandler+0xf4>
 800219c:	7efb      	ldrb	r3, [r7, #27]
 800219e:	2b40      	cmp	r3, #64	@ 0x40
 80021a0:	d107      	bne.n	80021b2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021b2:	6a3b      	ldr	r3, [r7, #32]
 80021b4:	0adb      	lsrs	r3, r3, #11
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00e      	beq.n	80021dc <HAL_I2C_ER_IRQHandler+0x12e>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d008      	beq.n	80021dc <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	f043 0308 	orr.w	r3, r3, #8
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80021da:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80021dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	431a      	orrs	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f001 f8b2 	bl	8003358 <I2C_ITError>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	@ 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	70fb      	strb	r3, [r7, #3]
 8002244:	4613      	mov	r3, r2
 8002246:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d150      	bne.n	8002380 <I2C_MasterTransmit_TXE+0xc8>
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b21      	cmp	r3, #33	@ 0x21
 80022e2:	d14d      	bne.n	8002380 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d01d      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d01a      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80022f6:	d016      	beq.n	8002326 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002306:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2211      	movs	r2, #17
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fb22 	bl	8000968 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002324:	e060      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002334:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002344:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800235a:	b2db      	uxtb	r3, r3
 800235c:	2b40      	cmp	r3, #64	@ 0x40
 800235e:	d107      	bne.n	8002370 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff7d 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800236e:	e03b      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7fe faf5 	bl	8000968 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800237e:	e033      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002380:	7bfb      	ldrb	r3, [r7, #15]
 8002382:	2b21      	cmp	r3, #33	@ 0x21
 8002384:	d005      	beq.n	8002392 <I2C_MasterTransmit_TXE+0xda>
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d12d      	bne.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800238c:	7bfb      	ldrb	r3, [r7, #15]
 800238e:	2b22      	cmp	r3, #34	@ 0x22
 8002390:	d12a      	bne.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023ac:	e01c      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d103      	bne.n	80023c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f88e 	bl	80024dc <I2C_MemoryTransmit_TXE_BTF>
}
 80023c0:	e012      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023e6:	e7ff      	b.n	80023e8 <I2C_MasterTransmit_TXE+0x130>
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b21      	cmp	r3, #33	@ 0x21
 8002408:	d164      	bne.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240e:	b29b      	uxth	r3, r3
 8002410:	2b00      	cmp	r3, #0
 8002412:	d012      	beq.n	800243a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002438:	e04c      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2b08      	cmp	r3, #8
 800243e:	d01d      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b20      	cmp	r3, #32
 8002444:	d01a      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800244c:	d016      	beq.n	800247c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800245c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2211      	movs	r2, #17
 8002462:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7fe fa77 	bl	8000968 <HAL_I2C_MasterTxCpltCallback>
}
 800247a:	e02b      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800248a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800249a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b40      	cmp	r3, #64	@ 0x40
 80024b4:	d107      	bne.n	80024c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff fed2 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
}
 80024c4:	e006      	b.n	80024d4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7fe fa4a 	bl	8000968 <HAL_I2C_MasterTxCpltCallback>
}
 80024d4:	bf00      	nop
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d11d      	bne.n	8002530 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10b      	bne.n	8002514 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002500:	b2da      	uxtb	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800250c:	1c9a      	adds	r2, r3, #2
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002512:	e077      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002518:	b29b      	uxth	r3, r3
 800251a:	121b      	asrs	r3, r3, #8
 800251c:	b2da      	uxtb	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800252e:	e069      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002534:	2b01      	cmp	r3, #1
 8002536:	d10b      	bne.n	8002550 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253c:	b2da      	uxtb	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800254e:	e059      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002554:	2b02      	cmp	r3, #2
 8002556:	d152      	bne.n	80025fe <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b22      	cmp	r3, #34	@ 0x22
 800255c:	d10d      	bne.n	800257a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800256c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002572:	1c5a      	adds	r2, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002578:	e044      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002584:	7bfb      	ldrb	r3, [r7, #15]
 8002586:	2b21      	cmp	r3, #33	@ 0x21
 8002588:	d112      	bne.n	80025b0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258e:	781a      	ldrb	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	3b01      	subs	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80025ae:	e029      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d124      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	2b21      	cmp	r3, #33	@ 0x21
 80025be:	d121      	bne.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80025ce:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fe36 	bl	8002268 <HAL_I2C_MemTxCpltCallback>
}
 80025fc:	e002      	b.n	8002604 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7ff fb2c 	bl	8001c5c <I2C_Flush_DR>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b22      	cmp	r3, #34	@ 0x22
 800261e:	f040 80b9 	bne.w	8002794 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002626:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d921      	bls.n	800267a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b03      	cmp	r3, #3
 8002664:	f040 8096 	bne.w	8002794 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002676:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002678:	e08c      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267e:	2b02      	cmp	r3, #2
 8002680:	d07f      	beq.n	8002782 <I2C_MasterReceive_RXNE+0x176>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d002      	beq.n	800268e <I2C_MasterReceive_RXNE+0x82>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d179      	bne.n	8002782 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f001 f83c 	bl	800370c <I2C_WaitOnSTOPRequestThroughIT>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d14c      	bne.n	8002734 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026a8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80026b8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c4:	b2d2      	uxtb	r2, r2
 80026c6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b40      	cmp	r3, #64	@ 0x40
 80026f2:	d10a      	bne.n	800270a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fdba 	bl	800227c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002708:	e044      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2b08      	cmp	r3, #8
 8002716:	d002      	beq.n	800271e <I2C_MasterReceive_RXNE+0x112>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b20      	cmp	r3, #32
 800271c:	d103      	bne.n	8002726 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	@ 0x30
 8002724:	e002      	b.n	800272c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2212      	movs	r2, #18
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fd65 	bl	80021fc <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002732:	e02f      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002742:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	1c5a      	adds	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002760:	b29b      	uxth	r3, r3
 8002762:	3b01      	subs	r3, #1
 8002764:	b29a      	uxth	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fd88 	bl	8002290 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002780:	e008      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002790:	605a      	str	r2, [r3, #4]
}
 8002792:	e7ff      	b.n	8002794 <I2C_MasterReceive_RXNE+0x188>
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027a8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d11b      	bne.n	80027ec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	685a      	ldr	r2, [r3, #4]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	3b01      	subs	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027ea:	e0c4      	b.n	8002976 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d129      	bne.n	800284a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002804:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b04      	cmp	r3, #4
 800280a:	d00a      	beq.n	8002822 <I2C_MasterReceive_BTF+0x86>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d007      	beq.n	8002822 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002820:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002848:	e095      	b.n	8002976 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d17d      	bne.n	8002950 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d002      	beq.n	8002860 <I2C_MasterReceive_BTF+0xc4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d108      	bne.n	8002872 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e016      	b.n	80028a0 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b04      	cmp	r3, #4
 8002876:	d002      	beq.n	800287e <I2C_MasterReceive_BTF+0xe2>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d108      	bne.n	8002890 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	e007      	b.n	80028a0 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691a      	ldr	r2, [r3, #16]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b2:	1c5a      	adds	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028bc:	b29b      	uxth	r3, r3
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	691a      	ldr	r2, [r3, #16]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d8:	1c5a      	adds	r2, r3, #1
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80028fa:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800290a:	b2db      	uxtb	r3, r3
 800290c:	2b40      	cmp	r3, #64	@ 0x40
 800290e:	d10a      	bne.n	8002926 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff fcac 	bl	800227c <HAL_I2C_MemRxCpltCallback>
}
 8002924:	e027      	b.n	8002976 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2b08      	cmp	r3, #8
 8002932:	d002      	beq.n	800293a <I2C_MasterReceive_BTF+0x19e>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b20      	cmp	r3, #32
 8002938:	d103      	bne.n	8002942 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002940:	e002      	b.n	8002948 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2212      	movs	r2, #18
 8002946:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fc57 	bl	80021fc <HAL_I2C_MasterRxCpltCallback>
}
 800294e:	e012      	b.n	8002976 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b40      	cmp	r3, #64	@ 0x40
 8002990:	d117      	bne.n	80029c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	461a      	mov	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80029ac:	e067      	b.n	8002a7e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	611a      	str	r2, [r3, #16]
}
 80029c0:	e05d      	b.n	8002a7e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029ca:	d133      	bne.n	8002a34 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b21      	cmp	r3, #33	@ 0x21
 80029d6:	d109      	bne.n	80029ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	461a      	mov	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80029e8:	611a      	str	r2, [r3, #16]
 80029ea:	e008      	b.n	80029fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	f043 0301 	orr.w	r3, r3, #1
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d004      	beq.n	8002a10 <I2C_Master_SB+0x92>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d108      	bne.n	8002a22 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d032      	beq.n	8002a7e <I2C_Master_SB+0x100>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d02d      	beq.n	8002a7e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a30:	605a      	str	r2, [r3, #4]
}
 8002a32:	e024      	b.n	8002a7e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10e      	bne.n	8002a5a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	11db      	asrs	r3, r3, #7
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0306 	and.w	r3, r3, #6
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f063 030f 	orn	r3, r3, #15
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	611a      	str	r2, [r3, #16]
}
 8002a58:	e011      	b.n	8002a7e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d10d      	bne.n	8002a7e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	11db      	asrs	r3, r3, #7
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0306 	and.w	r3, r3, #6
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f063 030e 	orn	r3, r3, #14
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d004      	beq.n	8002ab0 <I2C_Master_ADD10+0x26>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00c      	beq.n	8002ad2 <I2C_Master_ADD10+0x48>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d007      	beq.n	8002ad2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ad0:	605a      	str	r2, [r3, #4]
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b091      	sub	sp, #68	@ 0x44
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b22      	cmp	r3, #34	@ 0x22
 8002b06:	f040 8169 	bne.w	8002ddc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10f      	bne.n	8002b32 <I2C_Master_ADDR+0x54>
 8002b12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002b16:	2b40      	cmp	r3, #64	@ 0x40
 8002b18:	d10b      	bne.n	8002b32 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	e160      	b.n	8002df4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11d      	bne.n	8002b76 <I2C_Master_ADDR+0x98>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002b42:	d118      	bne.n	8002b76 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b44:	2300      	movs	r3, #0
 8002b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b68:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b6e:	1c5a      	adds	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	651a      	str	r2, [r3, #80]	@ 0x50
 8002b74:	e13e      	b.n	8002df4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d113      	bne.n	8002ba8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	695b      	ldr	r3, [r3, #20]
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e115      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	f040 808a 	bne.w	8002cc8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002bba:	d137      	bne.n	8002c2c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bda:	d113      	bne.n	8002c04 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	e0e7      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c04:	2300      	movs	r3, #0
 8002c06:	623b      	str	r3, [r7, #32]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	623b      	str	r3, [r7, #32]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	623b      	str	r3, [r7, #32]
 8002c18:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	e0d3      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c2e:	2b08      	cmp	r3, #8
 8002c30:	d02e      	beq.n	8002c90 <I2C_Master_ADDR+0x1b2>
 8002c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d02b      	beq.n	8002c90 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3a:	2b12      	cmp	r3, #18
 8002c3c:	d102      	bne.n	8002c44 <I2C_Master_ADDR+0x166>
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d125      	bne.n	8002c90 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d00e      	beq.n	8002c68 <I2C_Master_ADDR+0x18a>
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d00b      	beq.n	8002c68 <I2C_Master_ADDR+0x18a>
 8002c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d008      	beq.n	8002c68 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	e007      	b.n	8002c78 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c76:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	e0a1      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e085      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d14d      	bne.n	8002d6e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d016      	beq.n	8002d06 <I2C_Master_ADDR+0x228>
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d013      	beq.n	8002d06 <I2C_Master_ADDR+0x228>
 8002cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d010      	beq.n	8002d06 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e007      	b.n	8002d16 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d14:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d24:	d117      	bne.n	8002d56 <I2C_Master_ADDR+0x278>
 8002d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d2c:	d00b      	beq.n	8002d46 <I2C_Master_ADDR+0x268>
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d008      	beq.n	8002d46 <I2C_Master_ADDR+0x268>
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d005      	beq.n	8002d46 <I2C_Master_ADDR+0x268>
 8002d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d3c:	2b10      	cmp	r3, #16
 8002d3e:	d002      	beq.n	8002d46 <I2C_Master_ADDR+0x268>
 8002d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d42:	2b20      	cmp	r3, #32
 8002d44:	d107      	bne.n	8002d56 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002d54:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e032      	b.n	8002dd4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d7c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d8c:	d117      	bne.n	8002dbe <I2C_Master_ADDR+0x2e0>
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d94:	d00b      	beq.n	8002dae <I2C_Master_ADDR+0x2d0>
 8002d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d008      	beq.n	8002dae <I2C_Master_ADDR+0x2d0>
 8002d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d005      	beq.n	8002dae <I2C_Master_ADDR+0x2d0>
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d002      	beq.n	8002dae <I2C_Master_ADDR+0x2d0>
 8002da8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002daa:	2b20      	cmp	r3, #32
 8002dac:	d107      	bne.n	8002dbe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002dbc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	613b      	str	r3, [r7, #16]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	613b      	str	r3, [r7, #16]
 8002dd2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002dda:	e00b      	b.n	8002df4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	e7ff      	b.n	8002df4 <I2C_Master_ADDR+0x316>
 8002df4:	bf00      	nop
 8002df6:	3744      	adds	r7, #68	@ 0x44
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e0e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d02b      	beq.n	8002e72 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2a:	1c5a      	adds	r2, r3, #1
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d114      	bne.n	8002e72 <I2C_SlaveTransmit_TXE+0x72>
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b29      	cmp	r3, #41	@ 0x29
 8002e4c:	d111      	bne.n	8002e72 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e5c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2221      	movs	r2, #33	@ 0x21
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2228      	movs	r2, #40	@ 0x28
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff f9cf 	bl	8002210 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d011      	beq.n	8002eb0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	781a      	ldrb	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02c      	beq.n	8002f30 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee0:	b2d2      	uxtb	r2, r2
 8002ee2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee8:	1c5a      	adds	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b29a      	uxth	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d114      	bne.n	8002f30 <I2C_SlaveReceive_RXNE+0x74>
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f0a:	d111      	bne.n	8002f30 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2222      	movs	r2, #34	@ 0x22
 8002f20:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2228      	movs	r2, #40	@ 0x28
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff f97a 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d012      	beq.n	8002f70 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f86:	2300      	movs	r3, #0
 8002f88:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002f96:	2b28      	cmp	r3, #40	@ 0x28
 8002f98:	d127      	bne.n	8002fea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	09db      	lsrs	r3, r3, #7
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d103      	bne.n	8002fce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	81bb      	strh	r3, [r7, #12]
 8002fcc:	e002      	b.n	8002fd4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fdc:	89ba      	ldrh	r2, [r7, #12]
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7ff f928 	bl	8002238 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fe8:	e00e      	b.n	8003008 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fea:	2300      	movs	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800301e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800302e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003030:	2300      	movs	r3, #0
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800305c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003068:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800306c:	d172      	bne.n	8003154 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b22      	cmp	r3, #34	@ 0x22
 8003072:	d002      	beq.n	800307a <I2C_Slave_STOPF+0x6a>
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b2a      	cmp	r3, #42	@ 0x2a
 8003078:	d135      	bne.n	80030e6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d005      	beq.n	800309e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003096:	f043 0204 	orr.w	r2, r3, #4
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fa20 	bl	80014f8 <HAL_DMA_GetState>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d049      	beq.n	8003152 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030c2:	4a69      	ldr	r2, [pc, #420]	@ (8003268 <I2C_Slave_STOPF+0x258>)
 80030c4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f868 	bl	80011a0 <HAL_DMA_Abort_IT>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d03d      	beq.n	8003152 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80030e0:	4610      	mov	r0, r2
 80030e2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030e4:	e035      	b.n	8003152 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d005      	beq.n	800310a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003102:	f043 0204 	orr.w	r2, r3, #4
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003118:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe f9ea 	bl	80014f8 <HAL_DMA_GetState>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d014      	beq.n	8003154 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800312e:	4a4e      	ldr	r2, [pc, #312]	@ (8003268 <I2C_Slave_STOPF+0x258>)
 8003130:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe f832 	bl	80011a0 <HAL_DMA_Abort_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d008      	beq.n	8003154 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800314c:	4610      	mov	r0, r2
 800314e:	4798      	blx	r3
 8003150:	e000      	b.n	8003154 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003152:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d03e      	beq.n	80031dc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0304 	and.w	r3, r3, #4
 8003168:	2b04      	cmp	r3, #4
 800316a:	d112      	bne.n	8003192 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691a      	ldr	r2, [r3, #16]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319c:	2b40      	cmp	r3, #64	@ 0x40
 800319e:	d112      	bne.n	80031c6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691a      	ldr	r2, [r3, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b2:	1c5a      	adds	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f8b7 	bl	8003358 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031ea:	e039      	b.n	8003260 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031ec:	7bfb      	ldrb	r3, [r7, #15]
 80031ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80031f0:	d109      	bne.n	8003206 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2228      	movs	r2, #40	@ 0x28
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f7ff f80f 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b28      	cmp	r3, #40	@ 0x28
 8003210:	d111      	bne.n	8003236 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a15      	ldr	r2, [pc, #84]	@ (800326c <I2C_Slave_STOPF+0x25c>)
 8003216:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7ff f810 	bl	8002254 <HAL_I2C_ListenCpltCallback>
}
 8003234:	e014      	b.n	8003260 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323a:	2b22      	cmp	r3, #34	@ 0x22
 800323c:	d002      	beq.n	8003244 <I2C_Slave_STOPF+0x234>
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	2b22      	cmp	r3, #34	@ 0x22
 8003242:	d10d      	bne.n	8003260 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2220      	movs	r2, #32
 800324e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7fe ffe2 	bl	8002224 <HAL_I2C_SlaveRxCpltCallback>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	080035bd 	.word	0x080035bd
 800326c:	ffff0000 	.word	0xffff0000

08003270 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800327e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d002      	beq.n	8003292 <I2C_Slave_AF+0x22>
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	2b20      	cmp	r3, #32
 8003290:	d129      	bne.n	80032e6 <I2C_Slave_AF+0x76>
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	2b28      	cmp	r3, #40	@ 0x28
 8003296:	d126      	bne.n	80032e6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a2e      	ldr	r2, [pc, #184]	@ (8003354 <I2C_Slave_AF+0xe4>)
 800329c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032ac:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe ffb8 	bl	8002254 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80032e4:	e031      	b.n	800334a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	2b21      	cmp	r3, #33	@ 0x21
 80032ea:	d129      	bne.n	8003340 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <I2C_Slave_AF+0xe4>)
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2221      	movs	r2, #33	@ 0x21
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2220      	movs	r2, #32
 80032fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003316:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003320:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003330:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7fe fc92 	bl	8001c5c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7fe ff69 	bl	8002210 <HAL_I2C_SlaveTxCpltCallback>
}
 800333e:	e004      	b.n	800334a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003348:	615a      	str	r2, [r3, #20]
}
 800334a:	bf00      	nop
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	ffff0000 	.word	0xffff0000

08003358 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003366:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800336e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003370:	7bbb      	ldrb	r3, [r7, #14]
 8003372:	2b10      	cmp	r3, #16
 8003374:	d002      	beq.n	800337c <I2C_ITError+0x24>
 8003376:	7bbb      	ldrb	r3, [r7, #14]
 8003378:	2b40      	cmp	r3, #64	@ 0x40
 800337a:	d10a      	bne.n	8003392 <I2C_ITError+0x3a>
 800337c:	7bfb      	ldrb	r3, [r7, #15]
 800337e:	2b22      	cmp	r3, #34	@ 0x22
 8003380:	d107      	bne.n	8003392 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003390:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003392:	7bfb      	ldrb	r3, [r7, #15]
 8003394:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003398:	2b28      	cmp	r3, #40	@ 0x28
 800339a:	d107      	bne.n	80033ac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2228      	movs	r2, #40	@ 0x28
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80033aa:	e015      	b.n	80033d8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033ba:	d00a      	beq.n	80033d2 <I2C_ITError+0x7a>
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b60      	cmp	r3, #96	@ 0x60
 80033c0:	d007      	beq.n	80033d2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033e6:	d162      	bne.n	80034ae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033f6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d020      	beq.n	8003448 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	4a6a      	ldr	r2, [pc, #424]	@ (80035b4 <I2C_ITError+0x25c>)
 800340c:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd fec4 	bl	80011a0 <HAL_DMA_Abort_IT>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 8089 	beq.w	8003532 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800343c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003442:	4610      	mov	r0, r2
 8003444:	4798      	blx	r3
 8003446:	e074      	b.n	8003532 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	4a59      	ldr	r2, [pc, #356]	@ (80035b4 <I2C_ITError+0x25c>)
 800344e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd fea3 	bl	80011a0 <HAL_DMA_Abort_IT>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d068      	beq.n	8003532 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800346a:	2b40      	cmp	r3, #64	@ 0x40
 800346c:	d10b      	bne.n	8003486 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80034a8:	4610      	mov	r0, r2
 80034aa:	4798      	blx	r3
 80034ac:	e041      	b.n	8003532 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b60      	cmp	r3, #96	@ 0x60
 80034b8:	d125      	bne.n	8003506 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d2:	2b40      	cmp	r3, #64	@ 0x40
 80034d4:	d10b      	bne.n	80034ee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691a      	ldr	r2, [r3, #16]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fe fed0 	bl	80022a4 <HAL_I2C_AbortCpltCallback>
 8003504:	e015      	b.n	8003532 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d10b      	bne.n	800352c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	b2d2      	uxtb	r2, r2
 8003520:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003526:	1c5a      	adds	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7fe feaf 	bl	8002290 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003536:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10e      	bne.n	8003560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003552:	2b00      	cmp	r3, #0
 8003554:	d104      	bne.n	8003560 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800355c:	2b00      	cmp	r3, #0
 800355e:	d007      	beq.n	8003570 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800356e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003576:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b04      	cmp	r3, #4
 8003582:	d113      	bne.n	80035ac <I2C_ITError+0x254>
 8003584:	7bfb      	ldrb	r3, [r7, #15]
 8003586:	2b28      	cmp	r3, #40	@ 0x28
 8003588:	d110      	bne.n	80035ac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a0a      	ldr	r2, [pc, #40]	@ (80035b8 <I2C_ITError+0x260>)
 800358e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2200      	movs	r2, #0
 8003594:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fe54 	bl	8002254 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	080035bd 	.word	0x080035bd
 80035b8:	ffff0000 	.word	0xffff0000

080035bc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035cc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035d4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <I2C_DMAAbort+0x148>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	08db      	lsrs	r3, r3, #3
 80035dc:	4a4a      	ldr	r2, [pc, #296]	@ (8003708 <I2C_DMAAbort+0x14c>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	0a1a      	lsrs	r2, r3, #8
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00da      	lsls	r2, r3, #3
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8003602:	e00a      	b.n	800361a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	3b01      	subs	r3, #1
 8003608:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003618:	d0ea      	beq.n	80035f0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003626:	2200      	movs	r2, #0
 8003628:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003636:	2200      	movs	r2, #0
 8003638:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003648:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2200      	movs	r2, #0
 800364e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800365c:	2200      	movs	r2, #0
 800365e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d003      	beq.n	8003670 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800366c:	2200      	movs	r2, #0
 800366e:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b60      	cmp	r3, #96	@ 0x60
 800368a:	d10e      	bne.n	80036aa <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036a2:	6978      	ldr	r0, [r7, #20]
 80036a4:	f7fe fdfe 	bl	80022a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036a8:	e027      	b.n	80036fa <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80036b0:	2b28      	cmp	r3, #40	@ 0x28
 80036b2:	d117      	bne.n	80036e4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	2228      	movs	r2, #40	@ 0x28
 80036de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80036e2:	e007      	b.n	80036f4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f7fe fdcb 	bl	8002290 <HAL_I2C_ErrorCallback>
}
 80036fa:	bf00      	nop
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000004 	.word	0x20000004
 8003708:	14f8b589 	.word	0x14f8b589

0800370c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003718:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	08db      	lsrs	r3, r3, #3
 800371e:	4a13      	ldr	r2, [pc, #76]	@ (800376c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003720:	fba2 2303 	umull	r2, r3, r2, r3
 8003724:	0a1a      	lsrs	r2, r3, #8
 8003726:	4613      	mov	r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	3b01      	subs	r3, #1
 8003732:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d107      	bne.n	800374a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	f043 0220 	orr.w	r2, r3, #32
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e008      	b.n	800375c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003758:	d0e9      	beq.n	800372e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	20000004 	.word	0x20000004
 800376c:	14f8b589 	.word	0x14f8b589

08003770 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003780:	d103      	bne.n	800378a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003788:	e007      	b.n	800379a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003792:	d102      	bne.n	800379a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2208      	movs	r2, #8
 8003798:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0cc      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b68      	ldr	r3, [pc, #416]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d90c      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b65      	ldr	r3, [pc, #404]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a58      	ldr	r2, [pc, #352]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003806:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a52      	ldr	r2, [pc, #328]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800381e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d044      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d119      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b3f      	ldr	r3, [pc, #252]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e067      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b37      	ldr	r3, [pc, #220]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4934      	ldr	r1, [pc, #208]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fd fab6 	bl	8000e08 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fd fab2 	bl	8000e08 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b25      	ldr	r3, [pc, #148]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d20c      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b22      	ldr	r3, [pc, #136]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	@ (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391a:	4b12      	ldr	r3, [pc, #72]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f855 	bl	80039dc <HAL_RCC_GetSysClockFreq>
 8003932:	4602      	mov	r2, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	@ (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	490a      	ldr	r1, [pc, #40]	@ (8003968 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	5ccb      	ldrb	r3, [r1, r3]
 8003942:	fa22 f303 	lsr.w	r3, r2, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	@ (800396c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fa16 	bl	8000d80 <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023c00 	.word	0x40023c00
 8003964:	40023800 	.word	0x40023800
 8003968:	08005748 	.word	0x08005748
 800396c:	20000004 	.word	0x20000004
 8003970:	20000008 	.word	0x20000008

08003974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <HAL_RCC_GetHCLKFreq+0x14>)
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	20000004 	.word	0x20000004

0800398c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003990:	f7ff fff0 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 8003994:	4602      	mov	r2, r0
 8003996:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	0a9b      	lsrs	r3, r3, #10
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	4903      	ldr	r1, [pc, #12]	@ (80039b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039a2:	5ccb      	ldrb	r3, [r1, r3]
 80039a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	08005758 	.word	0x08005758

080039b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b8:	f7ff ffdc 	bl	8003974 <HAL_RCC_GetHCLKFreq>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b05      	ldr	r3, [pc, #20]	@ (80039d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	0b5b      	lsrs	r3, r3, #13
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	4903      	ldr	r1, [pc, #12]	@ (80039d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ca:	5ccb      	ldrb	r3, [r1, r3]
 80039cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40023800 	.word	0x40023800
 80039d8:	08005758 	.word	0x08005758

080039dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e0:	b0ae      	sub	sp, #184	@ 0xb8
 80039e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80039fc:	2300      	movs	r3, #0
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a02:	4bcb      	ldr	r3, [pc, #812]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b0c      	cmp	r3, #12
 8003a0c:	f200 8206 	bhi.w	8003e1c <HAL_RCC_GetSysClockFreq+0x440>
 8003a10:	a201      	add	r2, pc, #4	@ (adr r2, 8003a18 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a16:	bf00      	nop
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003e1d 	.word	0x08003e1d
 8003a20:	08003e1d 	.word	0x08003e1d
 8003a24:	08003e1d 	.word	0x08003e1d
 8003a28:	08003a55 	.word	0x08003a55
 8003a2c:	08003e1d 	.word	0x08003e1d
 8003a30:	08003e1d 	.word	0x08003e1d
 8003a34:	08003e1d 	.word	0x08003e1d
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003e1d 	.word	0x08003e1d
 8003a40:	08003e1d 	.word	0x08003e1d
 8003a44:	08003e1d 	.word	0x08003e1d
 8003a48:	08003c4d 	.word	0x08003c4d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a4c:	4bb9      	ldr	r3, [pc, #740]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a4e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a52:	e1e7      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a54:	4bb8      	ldr	r3, [pc, #736]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a56:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a5a:	e1e3      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a5c:	4bb4      	ldr	r3, [pc, #720]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a68:	4bb1      	ldr	r3, [pc, #708]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d071      	beq.n	8003b58 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4bae      	ldr	r3, [pc, #696]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a80:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a90:	2300      	movs	r3, #0
 8003a92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f04f 0100 	mov.w	r1, #0
 8003aa6:	0159      	lsls	r1, r3, #5
 8003aa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aac:	0150      	lsls	r0, r2, #5
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	1a51      	subs	r1, r2, r1
 8003ab6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003ab8:	4629      	mov	r1, r5
 8003aba:	eb63 0301 	sbc.w	r3, r3, r1
 8003abe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003acc:	4649      	mov	r1, r9
 8003ace:	018b      	lsls	r3, r1, #6
 8003ad0:	4641      	mov	r1, r8
 8003ad2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ad6:	4641      	mov	r1, r8
 8003ad8:	018a      	lsls	r2, r1, #6
 8003ada:	4641      	mov	r1, r8
 8003adc:	1a51      	subs	r1, r2, r1
 8003ade:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ae0:	4649      	mov	r1, r9
 8003ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003af4:	4649      	mov	r1, r9
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4641      	mov	r1, r8
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4641      	mov	r1, r8
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4622      	mov	r2, r4
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b0e:	462b      	mov	r3, r5
 8003b10:	460a      	mov	r2, r1
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b24:	4629      	mov	r1, r5
 8003b26:	024b      	lsls	r3, r1, #9
 8003b28:	4621      	mov	r1, r4
 8003b2a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b2e:	4621      	mov	r1, r4
 8003b30:	024a      	lsls	r2, r1, #9
 8003b32:	4610      	mov	r0, r2
 8003b34:	4619      	mov	r1, r3
 8003b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b44:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003b48:	f7fc fbba 	bl	80002c0 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b56:	e067      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b64:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b72:	2300      	movs	r3, #0
 8003b74:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b76:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	f04f 0000 	mov.w	r0, #0
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	0159      	lsls	r1, r3, #5
 8003b88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8c:	0150      	lsls	r0, r2, #5
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4621      	mov	r1, r4
 8003b94:	1a51      	subs	r1, r2, r1
 8003b96:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b98:	4629      	mov	r1, r5
 8003b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	f04f 0300 	mov.w	r3, #0
 8003ba8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003bac:	4649      	mov	r1, r9
 8003bae:	018b      	lsls	r3, r1, #6
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	018a      	lsls	r2, r1, #6
 8003bba:	4641      	mov	r1, r8
 8003bbc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bda:	4692      	mov	sl, r2
 8003bdc:	469b      	mov	fp, r3
 8003bde:	4623      	mov	r3, r4
 8003be0:	eb1a 0303 	adds.w	r3, sl, r3
 8003be4:	623b      	str	r3, [r7, #32]
 8003be6:	462b      	mov	r3, r5
 8003be8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	f04f 0300 	mov.w	r3, #0
 8003bf6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	028b      	lsls	r3, r1, #10
 8003bfe:	4621      	mov	r1, r4
 8003c00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c04:	4621      	mov	r1, r4
 8003c06:	028a      	lsls	r2, r1, #10
 8003c08:	4610      	mov	r0, r2
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c10:	2200      	movs	r2, #0
 8003c12:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c14:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c16:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003c1a:	f7fc fb51 	bl	80002c0 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4613      	mov	r3, r2
 8003c24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c28:	4b41      	ldr	r3, [pc, #260]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	0c1b      	lsrs	r3, r3, #16
 8003c2e:	f003 0303 	and.w	r3, r3, #3
 8003c32:	3301      	adds	r3, #1
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003c3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c4a:	e0eb      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c4c:	4b38      	ldr	r3, [pc, #224]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c58:	4b35      	ldr	r3, [pc, #212]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d06b      	beq.n	8003d3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c64:	4b32      	ldr	r3, [pc, #200]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	099b      	lsrs	r3, r3, #6
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c78:	2300      	movs	r3, #0
 8003c7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c7c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003c80:	4622      	mov	r2, r4
 8003c82:	462b      	mov	r3, r5
 8003c84:	f04f 0000 	mov.w	r0, #0
 8003c88:	f04f 0100 	mov.w	r1, #0
 8003c8c:	0159      	lsls	r1, r3, #5
 8003c8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c92:	0150      	lsls	r0, r2, #5
 8003c94:	4602      	mov	r2, r0
 8003c96:	460b      	mov	r3, r1
 8003c98:	4621      	mov	r1, r4
 8003c9a:	1a51      	subs	r1, r2, r1
 8003c9c:	61b9      	str	r1, [r7, #24]
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	eb63 0301 	sbc.w	r3, r3, r1
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003cb2:	4659      	mov	r1, fp
 8003cb4:	018b      	lsls	r3, r1, #6
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cbc:	4651      	mov	r1, sl
 8003cbe:	018a      	lsls	r2, r1, #6
 8003cc0:	4651      	mov	r1, sl
 8003cc2:	ebb2 0801 	subs.w	r8, r2, r1
 8003cc6:	4659      	mov	r1, fp
 8003cc8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cd8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cdc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ce0:	4690      	mov	r8, r2
 8003ce2:	4699      	mov	r9, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	eb18 0303 	adds.w	r3, r8, r3
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	462b      	mov	r3, r5
 8003cee:	eb49 0303 	adc.w	r3, r9, r3
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003d00:	4629      	mov	r1, r5
 8003d02:	024b      	lsls	r3, r1, #9
 8003d04:	4621      	mov	r1, r4
 8003d06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	024a      	lsls	r2, r1, #9
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003d16:	2200      	movs	r2, #0
 8003d18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d20:	f7fc face 	bl	80002c0 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d2e:	e065      	b.n	8003dfc <HAL_RCC_GetSysClockFreq+0x420>
 8003d30:	40023800 	.word	0x40023800
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	2200      	movs	r2, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	4611      	mov	r1, r2
 8003d48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d4e:	2300      	movs	r3, #0
 8003d50:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003d56:	4642      	mov	r2, r8
 8003d58:	464b      	mov	r3, r9
 8003d5a:	f04f 0000 	mov.w	r0, #0
 8003d5e:	f04f 0100 	mov.w	r1, #0
 8003d62:	0159      	lsls	r1, r3, #5
 8003d64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d68:	0150      	lsls	r0, r2, #5
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4641      	mov	r1, r8
 8003d70:	1a51      	subs	r1, r2, r1
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	4649      	mov	r1, r9
 8003d76:	eb63 0301 	sbc.w	r3, r3, r1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d88:	4659      	mov	r1, fp
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d92:	4651      	mov	r1, sl
 8003d94:	018a      	lsls	r2, r1, #6
 8003d96:	4651      	mov	r1, sl
 8003d98:	1a54      	subs	r4, r2, r1
 8003d9a:	4659      	mov	r1, fp
 8003d9c:	eb63 0501 	sbc.w	r5, r3, r1
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	f04f 0300 	mov.w	r3, #0
 8003da8:	00eb      	lsls	r3, r5, #3
 8003daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dae:	00e2      	lsls	r2, r4, #3
 8003db0:	4614      	mov	r4, r2
 8003db2:	461d      	mov	r5, r3
 8003db4:	4643      	mov	r3, r8
 8003db6:	18e3      	adds	r3, r4, r3
 8003db8:	603b      	str	r3, [r7, #0]
 8003dba:	464b      	mov	r3, r9
 8003dbc:	eb45 0303 	adc.w	r3, r5, r3
 8003dc0:	607b      	str	r3, [r7, #4]
 8003dc2:	f04f 0200 	mov.w	r2, #0
 8003dc6:	f04f 0300 	mov.w	r3, #0
 8003dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dce:	4629      	mov	r1, r5
 8003dd0:	028b      	lsls	r3, r1, #10
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd8:	4621      	mov	r1, r4
 8003dda:	028a      	lsls	r2, r1, #10
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003de4:	2200      	movs	r2, #0
 8003de6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003dea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dee:	f7fc fa67 	bl	80002c0 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4613      	mov	r3, r2
 8003df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8003e34 <HAL_RCC_GetSysClockFreq+0x458>)
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	0f1b      	lsrs	r3, r3, #28
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003e0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e1a:	e003      	b.n	8003e24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e1c:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003e22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	37b8      	adds	r7, #184	@ 0xb8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400

08003e3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e28d      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8083 	beq.w	8003f62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e5c:	4b94      	ldr	r3, [pc, #592]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 030c 	and.w	r3, r3, #12
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d019      	beq.n	8003e9c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e68:	4b91      	ldr	r3, [pc, #580]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d106      	bne.n	8003e82 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e74:	4b8e      	ldr	r3, [pc, #568]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e80:	d00c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e82:	4b8b      	ldr	r3, [pc, #556]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e8a:	2b0c      	cmp	r3, #12
 8003e8c:	d112      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e8e:	4b88      	ldr	r3, [pc, #544]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	4b84      	ldr	r3, [pc, #528]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d05b      	beq.n	8003f60 <HAL_RCC_OscConfig+0x124>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d157      	bne.n	8003f60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e25a      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x90>
 8003ebe:	4b7c      	ldr	r3, [pc, #496]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a7b      	ldr	r2, [pc, #492]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e01d      	b.n	8003f08 <HAL_RCC_OscConfig+0xcc>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ed4:	d10c      	bne.n	8003ef0 <HAL_RCC_OscConfig+0xb4>
 8003ed6:	4b76      	ldr	r3, [pc, #472]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a75      	ldr	r2, [pc, #468]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b73      	ldr	r3, [pc, #460]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a72      	ldr	r2, [pc, #456]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e00b      	b.n	8003f08 <HAL_RCC_OscConfig+0xcc>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a6e      	ldr	r2, [pc, #440]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003ef6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	4b6c      	ldr	r3, [pc, #432]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a6b      	ldr	r2, [pc, #428]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d013      	beq.n	8003f38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fc ff7a 	bl	8000e08 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fc ff76 	bl	8000e08 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e21f      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b61      	ldr	r3, [pc, #388]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0xdc>
 8003f36:	e014      	b.n	8003f62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fc ff66 	bl	8000e08 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fc ff62 	bl	8000e08 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e20b      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f52:	4b57      	ldr	r3, [pc, #348]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x104>
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d06f      	beq.n	800404e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f6e:	4b50      	ldr	r3, [pc, #320]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 030c 	and.w	r3, r3, #12
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d017      	beq.n	8003faa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f7a:	4b4d      	ldr	r3, [pc, #308]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d105      	bne.n	8003f92 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f86:	4b4a      	ldr	r3, [pc, #296]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f92:	4b47      	ldr	r3, [pc, #284]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f9a:	2b0c      	cmp	r3, #12
 8003f9c:	d11c      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f9e:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d116      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003faa:	4b41      	ldr	r3, [pc, #260]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x186>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d001      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1d3      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc2:	4b3b      	ldr	r3, [pc, #236]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4937      	ldr	r1, [pc, #220]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd6:	e03a      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d020      	beq.n	8004022 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fe0:	4b34      	ldr	r3, [pc, #208]	@ (80040b4 <HAL_RCC_OscConfig+0x278>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe6:	f7fc ff0f 	bl	8000e08 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fee:	f7fc ff0b 	bl	8000e08 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e1b4      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004000:	4b2b      	ldr	r3, [pc, #172]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400c:	4b28      	ldr	r3, [pc, #160]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	4925      	ldr	r1, [pc, #148]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 800401c:	4313      	orrs	r3, r2
 800401e:	600b      	str	r3, [r1, #0]
 8004020:	e015      	b.n	800404e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004022:	4b24      	ldr	r3, [pc, #144]	@ (80040b4 <HAL_RCC_OscConfig+0x278>)
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fc feee 	bl	8000e08 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004030:	f7fc feea 	bl	8000e08 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b02      	cmp	r3, #2
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e193      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004042:	4b1b      	ldr	r3, [pc, #108]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d036      	beq.n	80040c8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d016      	beq.n	8004090 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004062:	4b15      	ldr	r3, [pc, #84]	@ (80040b8 <HAL_RCC_OscConfig+0x27c>)
 8004064:	2201      	movs	r2, #1
 8004066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004068:	f7fc fece 	bl	8000e08 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004070:	f7fc feca 	bl	8000e08 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e173      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004082:	4b0b      	ldr	r3, [pc, #44]	@ (80040b0 <HAL_RCC_OscConfig+0x274>)
 8004084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x234>
 800408e:	e01b      	b.n	80040c8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004090:	4b09      	ldr	r3, [pc, #36]	@ (80040b8 <HAL_RCC_OscConfig+0x27c>)
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004096:	f7fc feb7 	bl	8000e08 <HAL_GetTick>
 800409a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	e00e      	b.n	80040bc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800409e:	f7fc feb3 	bl	8000e08 <HAL_GetTick>
 80040a2:	4602      	mov	r2, r0
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d907      	bls.n	80040bc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e15c      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
 80040b0:	40023800 	.word	0x40023800
 80040b4:	42470000 	.word	0x42470000
 80040b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040bc:	4b8a      	ldr	r3, [pc, #552]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1ea      	bne.n	800409e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 8097 	beq.w	8004204 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040da:	4b83      	ldr	r3, [pc, #524]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	4b7f      	ldr	r3, [pc, #508]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	4a7e      	ldr	r2, [pc, #504]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040f6:	4b7c      	ldr	r3, [pc, #496]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004102:	2301      	movs	r3, #1
 8004104:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	4b79      	ldr	r3, [pc, #484]	@ (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410e:	2b00      	cmp	r3, #0
 8004110:	d118      	bne.n	8004144 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004112:	4b76      	ldr	r3, [pc, #472]	@ (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a75      	ldr	r2, [pc, #468]	@ (80042ec <HAL_RCC_OscConfig+0x4b0>)
 8004118:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800411c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800411e:	f7fc fe73 	bl	8000e08 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004126:	f7fc fe6f 	bl	8000e08 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e118      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004138:	4b6c      	ldr	r3, [pc, #432]	@ (80042ec <HAL_RCC_OscConfig+0x4b0>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d106      	bne.n	800415a <HAL_RCC_OscConfig+0x31e>
 800414c:	4b66      	ldr	r3, [pc, #408]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800414e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004150:	4a65      	ldr	r2, [pc, #404]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004152:	f043 0301 	orr.w	r3, r3, #1
 8004156:	6713      	str	r3, [r2, #112]	@ 0x70
 8004158:	e01c      	b.n	8004194 <HAL_RCC_OscConfig+0x358>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2b05      	cmp	r3, #5
 8004160:	d10c      	bne.n	800417c <HAL_RCC_OscConfig+0x340>
 8004162:	4b61      	ldr	r3, [pc, #388]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	4a60      	ldr	r2, [pc, #384]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	6713      	str	r3, [r2, #112]	@ 0x70
 800416e:	4b5e      	ldr	r3, [pc, #376]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004172:	4a5d      	ldr	r2, [pc, #372]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	6713      	str	r3, [r2, #112]	@ 0x70
 800417a:	e00b      	b.n	8004194 <HAL_RCC_OscConfig+0x358>
 800417c:	4b5a      	ldr	r3, [pc, #360]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004180:	4a59      	ldr	r2, [pc, #356]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004182:	f023 0301 	bic.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	@ 0x70
 8004188:	4b57      	ldr	r3, [pc, #348]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800418a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418c:	4a56      	ldr	r2, [pc, #344]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800418e:	f023 0304 	bic.w	r3, r3, #4
 8004192:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d015      	beq.n	80041c8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7fc fe34 	bl	8000e08 <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	e00a      	b.n	80041ba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a4:	f7fc fe30 	bl	8000e08 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0d7      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ba:	4b4b      	ldr	r3, [pc, #300]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ee      	beq.n	80041a4 <HAL_RCC_OscConfig+0x368>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fc fe1e 	bl	8000e08 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ce:	e00a      	b.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d0:	f7fc fe1a 	bl	8000e08 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041de:	4293      	cmp	r3, r2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e0c1      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041e6:	4b40      	ldr	r3, [pc, #256]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ee      	bne.n	80041d0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041f2:	7dfb      	ldrb	r3, [r7, #23]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041f8:	4b3b      	ldr	r3, [pc, #236]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	4a3a      	ldr	r2, [pc, #232]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80041fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004202:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80ad 	beq.w	8004368 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800420e:	4b36      	ldr	r3, [pc, #216]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f003 030c 	and.w	r3, r3, #12
 8004216:	2b08      	cmp	r3, #8
 8004218:	d060      	beq.n	80042dc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d145      	bne.n	80042ae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b33      	ldr	r3, [pc, #204]	@ (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004228:	f7fc fdee 	bl	8000e08 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004230:	f7fc fdea 	bl	8000e08 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e093      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b29      	ldr	r3, [pc, #164]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69da      	ldr	r2, [r3, #28]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	019b      	lsls	r3, r3, #6
 800425e:	431a      	orrs	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	085b      	lsrs	r3, r3, #1
 8004266:	3b01      	subs	r3, #1
 8004268:	041b      	lsls	r3, r3, #16
 800426a:	431a      	orrs	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	061b      	lsls	r3, r3, #24
 8004272:	431a      	orrs	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	491b      	ldr	r1, [pc, #108]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 800427c:	4313      	orrs	r3, r2
 800427e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004280:	4b1b      	ldr	r3, [pc, #108]	@ (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004286:	f7fc fdbf 	bl	8000e08 <HAL_GetTick>
 800428a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428c:	e008      	b.n	80042a0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428e:	f7fc fdbb 	bl	8000e08 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e064      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a0:	4b11      	ldr	r3, [pc, #68]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0f0      	beq.n	800428e <HAL_RCC_OscConfig+0x452>
 80042ac:	e05c      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <HAL_RCC_OscConfig+0x4b4>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7fc fda8 	bl	8000e08 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042bc:	f7fc fda4 	bl	8000e08 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e04d      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ce:	4b06      	ldr	r3, [pc, #24]	@ (80042e8 <HAL_RCC_OscConfig+0x4ac>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1f0      	bne.n	80042bc <HAL_RCC_OscConfig+0x480>
 80042da:	e045      	b.n	8004368 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e040      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
 80042e8:	40023800 	.word	0x40023800
 80042ec:	40007000 	.word	0x40007000
 80042f0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042f4:	4b1f      	ldr	r3, [pc, #124]	@ (8004374 <HAL_RCC_OscConfig+0x538>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d030      	beq.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800430c:	429a      	cmp	r2, r3
 800430e:	d129      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	429a      	cmp	r2, r3
 800431c:	d122      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800432a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800432c:	4293      	cmp	r3, r2
 800432e:	d119      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	085b      	lsrs	r3, r3, #1
 800433c:	3b01      	subs	r3, #1
 800433e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004340:	429a      	cmp	r2, r3
 8004342:	d10f      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004350:	429a      	cmp	r2, r3
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004360:	429a      	cmp	r2, r3
 8004362:	d001      	beq.n	8004368 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e000      	b.n	800436a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	3718      	adds	r7, #24
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40023800 	.word	0x40023800

08004378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e042      	b.n	8004410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fc fbc4 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2224      	movs	r2, #36	@ 0x24
 80043a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68da      	ldr	r2, [r3, #12]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f000 fa09 	bl	80047d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68da      	ldr	r2, [r3, #12]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	@ 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004432:	b2db      	uxtb	r3, r3
 8004434:	2b20      	cmp	r3, #32
 8004436:	d175      	bne.n	8004524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_UART_Transmit+0x2c>
 800443e:	88fb      	ldrh	r3, [r7, #6]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e06e      	b.n	8004526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	@ 0x21
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fc fcd7 	bl	8000e08 <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	88fa      	ldrh	r2, [r7, #6]
 8004466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004470:	d108      	bne.n	8004484 <HAL_UART_Transmit+0x6c>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d104      	bne.n	8004484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e003      	b.n	800448c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800448c:	e02e      	b.n	80044ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2180      	movs	r1, #128	@ 0x80
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f8df 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e03a      	b.n	8004526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10b      	bne.n	80044ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	3302      	adds	r3, #2
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e007      	b.n	80044de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	781a      	ldrb	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	3301      	adds	r3, #1
 80044dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1cb      	bne.n	800448e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2200      	movs	r2, #0
 80044fe:	2140      	movs	r1, #64	@ 0x40
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 f8ab 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d005      	beq.n	8004518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e006      	b.n	8004526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004520:	2300      	movs	r3, #0
 8004522:	e000      	b.n	8004526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004524:	2302      	movs	r3, #2
  }
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b08a      	sub	sp, #40	@ 0x28
 8004532:	af02      	add	r7, sp, #8
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	603b      	str	r3, [r7, #0]
 800453a:	4613      	mov	r3, r2
 800453c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b20      	cmp	r3, #32
 800454c:	f040 8081 	bne.w	8004652 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Receive+0x2e>
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e079      	b.n	8004654 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2222      	movs	r2, #34	@ 0x22
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004574:	f7fc fc48 	bl	8000e08 <HAL_GetTick>
 8004578:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458e:	d108      	bne.n	80045a2 <HAL_UART_Receive+0x74>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004598:	2300      	movs	r3, #0
 800459a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	e003      	b.n	80045aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80045aa:	e047      	b.n	800463c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	2200      	movs	r2, #0
 80045b4:	2120      	movs	r1, #32
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f850 	bl	800465c <UART_WaitOnFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e042      	b.n	8004654 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10c      	bne.n	80045ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	3302      	adds	r3, #2
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	e01f      	b.n	800462e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d007      	beq.n	8004608 <HAL_UART_Receive+0xda>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10a      	bne.n	8004616 <HAL_UART_Receive+0xe8>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b2da      	uxtb	r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	701a      	strb	r2, [r3, #0]
 8004614:	e008      	b.n	8004628 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	b2db      	uxtb	r3, r3
 800461e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004622:	b2da      	uxtb	r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	3301      	adds	r3, #1
 800462c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1b2      	bne.n	80045ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	e000      	b.n	8004654 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3720      	adds	r7, #32
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	603b      	str	r3, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800466c:	e03b      	b.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004674:	d037      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004676:	f7fc fbc7 	bl	8000e08 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	6a3a      	ldr	r2, [r7, #32]
 8004682:	429a      	cmp	r2, r3
 8004684:	d302      	bcc.n	800468c <UART_WaitOnFlagUntilTimeout+0x30>
 8004686:	6a3b      	ldr	r3, [r7, #32]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03a      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	f003 0304 	and.w	r3, r3, #4
 800469a:	2b00      	cmp	r3, #0
 800469c:	d023      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b80      	cmp	r3, #128	@ 0x80
 80046a2:	d020      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b40      	cmp	r3, #64	@ 0x40
 80046a8:	d01d      	beq.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d116      	bne.n	80046e6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 f81d 	bl	800470e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2208      	movs	r2, #8
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e00f      	b.n	8004706 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	4013      	ands	r3, r2
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	bf0c      	ite	eq
 80046f6:	2301      	moveq	r3, #1
 80046f8:	2300      	movne	r3, #0
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	429a      	cmp	r2, r3
 8004702:	d0b4      	beq.n	800466e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b095      	sub	sp, #84	@ 0x54
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	330c      	adds	r3, #12
 800471c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800472c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	330c      	adds	r3, #12
 8004734:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004736:	643a      	str	r2, [r7, #64]	@ 0x40
 8004738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800473c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3314      	adds	r3, #20
 8004750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	e853 3f00 	ldrex	r3, [r3]
 8004758:	61fb      	str	r3, [r7, #28]
   return(result);
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f023 0301 	bic.w	r3, r3, #1
 8004760:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3314      	adds	r3, #20
 8004768:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800476a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004770:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1e5      	bne.n	800474a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	2b01      	cmp	r3, #1
 8004784:	d119      	bne.n	80047ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	330c      	adds	r3, #12
 800478c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	e853 3f00 	ldrex	r3, [r3]
 8004794:	60bb      	str	r3, [r7, #8]
   return(result);
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	f023 0310 	bic.w	r3, r3, #16
 800479c:	647b      	str	r3, [r7, #68]	@ 0x44
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	330c      	adds	r3, #12
 80047a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047a6:	61ba      	str	r2, [r7, #24]
 80047a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	e841 2300 	strex	r3, r2, [r1]
 80047b2:	613b      	str	r3, [r7, #16]
   return(result);
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e5      	bne.n	8004786 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80047c8:	bf00      	nop
 80047ca:	3754      	adds	r7, #84	@ 0x54
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b0c0      	sub	sp, #256	@ 0x100
 80047da:	af00      	add	r7, sp, #0
 80047dc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	68d9      	ldr	r1, [r3, #12]
 80047f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	ea40 0301 	orr.w	r3, r0, r1
 80047fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	431a      	orrs	r2, r3
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800482c:	f021 010c 	bic.w	r1, r1, #12
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800483a:	430b      	orrs	r3, r1
 800483c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800484a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484e:	6999      	ldr	r1, [r3, #24]
 8004850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	ea40 0301 	orr.w	r3, r0, r1
 800485a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800485c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa0 <UART_SetConfig+0x2cc>)
 8004864:	429a      	cmp	r2, r3
 8004866:	d005      	beq.n	8004874 <UART_SetConfig+0xa0>
 8004868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa4 <UART_SetConfig+0x2d0>)
 8004870:	429a      	cmp	r2, r3
 8004872:	d104      	bne.n	800487e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004874:	f7ff f89e 	bl	80039b4 <HAL_RCC_GetPCLK2Freq>
 8004878:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800487c:	e003      	b.n	8004886 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487e:	f7ff f885 	bl	800398c <HAL_RCC_GetPCLK1Freq>
 8004882:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488a:	69db      	ldr	r3, [r3, #28]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004890:	f040 810c 	bne.w	8004aac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004898:	2200      	movs	r2, #0
 800489a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	1891      	adds	r1, r2, r2
 80048ac:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048ae:	415b      	adcs	r3, r3
 80048b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048b6:	4621      	mov	r1, r4
 80048b8:	eb12 0801 	adds.w	r8, r2, r1
 80048bc:	4629      	mov	r1, r5
 80048be:	eb43 0901 	adc.w	r9, r3, r1
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	f04f 0300 	mov.w	r3, #0
 80048ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d6:	4690      	mov	r8, r2
 80048d8:	4699      	mov	r9, r3
 80048da:	4623      	mov	r3, r4
 80048dc:	eb18 0303 	adds.w	r3, r8, r3
 80048e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e4:	462b      	mov	r3, r5
 80048e6:	eb49 0303 	adc.w	r3, r9, r3
 80048ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048fa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004902:	460b      	mov	r3, r1
 8004904:	18db      	adds	r3, r3, r3
 8004906:	653b      	str	r3, [r7, #80]	@ 0x50
 8004908:	4613      	mov	r3, r2
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004910:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004914:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004918:	f7fb fcd2 	bl	80002c0 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4b61      	ldr	r3, [pc, #388]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004922:	fba3 2302 	umull	r2, r3, r3, r2
 8004926:	095b      	lsrs	r3, r3, #5
 8004928:	011c      	lsls	r4, r3, #4
 800492a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492e:	2200      	movs	r2, #0
 8004930:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004934:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004938:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800493c:	4642      	mov	r2, r8
 800493e:	464b      	mov	r3, r9
 8004940:	1891      	adds	r1, r2, r2
 8004942:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004944:	415b      	adcs	r3, r3
 8004946:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800494c:	4641      	mov	r1, r8
 800494e:	eb12 0a01 	adds.w	sl, r2, r1
 8004952:	4649      	mov	r1, r9
 8004954:	eb43 0b01 	adc.w	fp, r3, r1
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004964:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004968:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496c:	4692      	mov	sl, r2
 800496e:	469b      	mov	fp, r3
 8004970:	4643      	mov	r3, r8
 8004972:	eb1a 0303 	adds.w	r3, sl, r3
 8004976:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800497a:	464b      	mov	r3, r9
 800497c:	eb4b 0303 	adc.w	r3, fp, r3
 8004980:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004990:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004994:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004998:	460b      	mov	r3, r1
 800499a:	18db      	adds	r3, r3, r3
 800499c:	643b      	str	r3, [r7, #64]	@ 0x40
 800499e:	4613      	mov	r3, r2
 80049a0:	eb42 0303 	adc.w	r3, r2, r3
 80049a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049ae:	f7fb fc87 	bl	80002c0 <__aeabi_uldivmod>
 80049b2:	4602      	mov	r2, r0
 80049b4:	460b      	mov	r3, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049ba:	fba3 2301 	umull	r2, r3, r3, r1
 80049be:	095b      	lsrs	r3, r3, #5
 80049c0:	2264      	movs	r2, #100	@ 0x64
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	1acb      	subs	r3, r1, r3
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ce:	4b36      	ldr	r3, [pc, #216]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 80049d0:	fba3 2302 	umull	r2, r3, r3, r2
 80049d4:	095b      	lsrs	r3, r3, #5
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049dc:	441c      	add	r4, r3
 80049de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f0:	4642      	mov	r2, r8
 80049f2:	464b      	mov	r3, r9
 80049f4:	1891      	adds	r1, r2, r2
 80049f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f8:	415b      	adcs	r3, r3
 80049fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a00:	4641      	mov	r1, r8
 8004a02:	1851      	adds	r1, r2, r1
 8004a04:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a06:	4649      	mov	r1, r9
 8004a08:	414b      	adcs	r3, r1
 8004a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a0c:	f04f 0200 	mov.w	r2, #0
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a18:	4659      	mov	r1, fp
 8004a1a:	00cb      	lsls	r3, r1, #3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a22:	4651      	mov	r1, sl
 8004a24:	00ca      	lsls	r2, r1, #3
 8004a26:	4610      	mov	r0, r2
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a34:	464b      	mov	r3, r9
 8004a36:	460a      	mov	r2, r1
 8004a38:	eb42 0303 	adc.w	r3, r2, r3
 8004a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a4c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a54:	460b      	mov	r3, r1
 8004a56:	18db      	adds	r3, r3, r3
 8004a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a6a:	f7fb fc29 	bl	80002c0 <__aeabi_uldivmod>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a74:	fba3 1302 	umull	r1, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	2164      	movs	r1, #100	@ 0x64
 8004a7c:	fb01 f303 	mul.w	r3, r1, r3
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	3332      	adds	r3, #50	@ 0x32
 8004a86:	4a08      	ldr	r2, [pc, #32]	@ (8004aa8 <UART_SetConfig+0x2d4>)
 8004a88:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	f003 0207 	and.w	r2, r3, #7
 8004a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4422      	add	r2, r4
 8004a9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a9c:	e106      	b.n	8004cac <UART_SetConfig+0x4d8>
 8004a9e:	bf00      	nop
 8004aa0:	40011000 	.word	0x40011000
 8004aa4:	40011400 	.word	0x40011400
 8004aa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ab6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004abe:	4642      	mov	r2, r8
 8004ac0:	464b      	mov	r3, r9
 8004ac2:	1891      	adds	r1, r2, r2
 8004ac4:	6239      	str	r1, [r7, #32]
 8004ac6:	415b      	adcs	r3, r3
 8004ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ace:	4641      	mov	r1, r8
 8004ad0:	1854      	adds	r4, r2, r1
 8004ad2:	4649      	mov	r1, r9
 8004ad4:	eb43 0501 	adc.w	r5, r3, r1
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	00eb      	lsls	r3, r5, #3
 8004ae2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae6:	00e2      	lsls	r2, r4, #3
 8004ae8:	4614      	mov	r4, r2
 8004aea:	461d      	mov	r5, r3
 8004aec:	4643      	mov	r3, r8
 8004aee:	18e3      	adds	r3, r4, r3
 8004af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af4:	464b      	mov	r3, r9
 8004af6:	eb45 0303 	adc.w	r3, r5, r3
 8004afa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	008b      	lsls	r3, r1, #2
 8004b1e:	4621      	mov	r1, r4
 8004b20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b24:	4621      	mov	r1, r4
 8004b26:	008a      	lsls	r2, r1, #2
 8004b28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b2c:	f7fb fbc8 	bl	80002c0 <__aeabi_uldivmod>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	4b60      	ldr	r3, [pc, #384]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004b36:	fba3 2302 	umull	r2, r3, r3, r2
 8004b3a:	095b      	lsrs	r3, r3, #5
 8004b3c:	011c      	lsls	r4, r3, #4
 8004b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b48:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	61b9      	str	r1, [r7, #24]
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b60:	4641      	mov	r1, r8
 8004b62:	1851      	adds	r1, r2, r1
 8004b64:	6139      	str	r1, [r7, #16]
 8004b66:	4649      	mov	r1, r9
 8004b68:	414b      	adcs	r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	00cb      	lsls	r3, r1, #3
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b82:	4651      	mov	r1, sl
 8004b84:	00ca      	lsls	r2, r1, #3
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	4642      	mov	r2, r8
 8004b8e:	189b      	adds	r3, r3, r2
 8004b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b94:	464b      	mov	r3, r9
 8004b96:	460a      	mov	r2, r1
 8004b98:	eb42 0303 	adc.w	r3, r2, r3
 8004b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004baa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb8:	4649      	mov	r1, r9
 8004bba:	008b      	lsls	r3, r1, #2
 8004bbc:	4641      	mov	r1, r8
 8004bbe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bc2:	4641      	mov	r1, r8
 8004bc4:	008a      	lsls	r2, r1, #2
 8004bc6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bca:	f7fb fb79 	bl	80002c0 <__aeabi_uldivmod>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bd6:	fba3 2301 	umull	r2, r3, r3, r1
 8004bda:	095b      	lsrs	r3, r3, #5
 8004bdc:	2264      	movs	r2, #100	@ 0x64
 8004bde:	fb02 f303 	mul.w	r3, r2, r3
 8004be2:	1acb      	subs	r3, r1, r3
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	3332      	adds	r3, #50	@ 0x32
 8004be8:	4a33      	ldr	r2, [pc, #204]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004bea:	fba2 2303 	umull	r2, r3, r2, r3
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf4:	441c      	add	r4, r3
 8004bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
 8004c10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c14:	4641      	mov	r1, r8
 8004c16:	1851      	adds	r1, r2, r1
 8004c18:	6039      	str	r1, [r7, #0]
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	414b      	adcs	r3, r1
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c2c:	4659      	mov	r1, fp
 8004c2e:	00cb      	lsls	r3, r1, #3
 8004c30:	4651      	mov	r1, sl
 8004c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c36:	4651      	mov	r1, sl
 8004c38:	00ca      	lsls	r2, r1, #3
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4642      	mov	r2, r8
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c46:	464b      	mov	r3, r9
 8004c48:	460a      	mov	r2, r1
 8004c4a:	eb42 0303 	adc.w	r3, r2, r3
 8004c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c5a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c5c:	f04f 0200 	mov.w	r2, #0
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c68:	4649      	mov	r1, r9
 8004c6a:	008b      	lsls	r3, r1, #2
 8004c6c:	4641      	mov	r1, r8
 8004c6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c72:	4641      	mov	r1, r8
 8004c74:	008a      	lsls	r2, r1, #2
 8004c76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c7a:	f7fb fb21 	bl	80002c0 <__aeabi_uldivmod>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	460b      	mov	r3, r1
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c84:	fba3 1302 	umull	r1, r3, r3, r2
 8004c88:	095b      	lsrs	r3, r3, #5
 8004c8a:	2164      	movs	r1, #100	@ 0x64
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	3332      	adds	r3, #50	@ 0x32
 8004c96:	4a08      	ldr	r2, [pc, #32]	@ (8004cb8 <UART_SetConfig+0x4e4>)
 8004c98:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	f003 020f 	and.w	r2, r3, #15
 8004ca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4422      	add	r2, r4
 8004caa:	609a      	str	r2, [r3, #8]
}
 8004cac:	bf00      	nop
 8004cae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb8:	51eb851f 	.word	0x51eb851f

08004cbc <atoi>:
 8004cbc:	220a      	movs	r2, #10
 8004cbe:	2100      	movs	r1, #0
 8004cc0:	f000 b87a 	b.w	8004db8 <strtol>

08004cc4 <_strtol_l.isra.0>:
 8004cc4:	2b24      	cmp	r3, #36	@ 0x24
 8004cc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cca:	4686      	mov	lr, r0
 8004ccc:	4690      	mov	r8, r2
 8004cce:	d801      	bhi.n	8004cd4 <_strtol_l.isra.0+0x10>
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d106      	bne.n	8004ce2 <_strtol_l.isra.0+0x1e>
 8004cd4:	f000 f8a4 	bl	8004e20 <__errno>
 8004cd8:	2316      	movs	r3, #22
 8004cda:	6003      	str	r3, [r0, #0]
 8004cdc:	2000      	movs	r0, #0
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	4834      	ldr	r0, [pc, #208]	@ (8004db4 <_strtol_l.isra.0+0xf0>)
 8004ce4:	460d      	mov	r5, r1
 8004ce6:	462a      	mov	r2, r5
 8004ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cec:	5d06      	ldrb	r6, [r0, r4]
 8004cee:	f016 0608 	ands.w	r6, r6, #8
 8004cf2:	d1f8      	bne.n	8004ce6 <_strtol_l.isra.0+0x22>
 8004cf4:	2c2d      	cmp	r4, #45	@ 0x2d
 8004cf6:	d110      	bne.n	8004d1a <_strtol_l.isra.0+0x56>
 8004cf8:	782c      	ldrb	r4, [r5, #0]
 8004cfa:	2601      	movs	r6, #1
 8004cfc:	1c95      	adds	r5, r2, #2
 8004cfe:	f033 0210 	bics.w	r2, r3, #16
 8004d02:	d115      	bne.n	8004d30 <_strtol_l.isra.0+0x6c>
 8004d04:	2c30      	cmp	r4, #48	@ 0x30
 8004d06:	d10d      	bne.n	8004d24 <_strtol_l.isra.0+0x60>
 8004d08:	782a      	ldrb	r2, [r5, #0]
 8004d0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004d0e:	2a58      	cmp	r2, #88	@ 0x58
 8004d10:	d108      	bne.n	8004d24 <_strtol_l.isra.0+0x60>
 8004d12:	786c      	ldrb	r4, [r5, #1]
 8004d14:	3502      	adds	r5, #2
 8004d16:	2310      	movs	r3, #16
 8004d18:	e00a      	b.n	8004d30 <_strtol_l.isra.0+0x6c>
 8004d1a:	2c2b      	cmp	r4, #43	@ 0x2b
 8004d1c:	bf04      	itt	eq
 8004d1e:	782c      	ldrbeq	r4, [r5, #0]
 8004d20:	1c95      	addeq	r5, r2, #2
 8004d22:	e7ec      	b.n	8004cfe <_strtol_l.isra.0+0x3a>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f6      	bne.n	8004d16 <_strtol_l.isra.0+0x52>
 8004d28:	2c30      	cmp	r4, #48	@ 0x30
 8004d2a:	bf14      	ite	ne
 8004d2c:	230a      	movne	r3, #10
 8004d2e:	2308      	moveq	r3, #8
 8004d30:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004d34:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004d38:	2200      	movs	r2, #0
 8004d3a:	fbbc f9f3 	udiv	r9, ip, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	fb03 ca19 	mls	sl, r3, r9, ip
 8004d44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004d48:	2f09      	cmp	r7, #9
 8004d4a:	d80f      	bhi.n	8004d6c <_strtol_l.isra.0+0xa8>
 8004d4c:	463c      	mov	r4, r7
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	dd1b      	ble.n	8004d8a <_strtol_l.isra.0+0xc6>
 8004d52:	1c57      	adds	r7, r2, #1
 8004d54:	d007      	beq.n	8004d66 <_strtol_l.isra.0+0xa2>
 8004d56:	4581      	cmp	r9, r0
 8004d58:	d314      	bcc.n	8004d84 <_strtol_l.isra.0+0xc0>
 8004d5a:	d101      	bne.n	8004d60 <_strtol_l.isra.0+0x9c>
 8004d5c:	45a2      	cmp	sl, r4
 8004d5e:	db11      	blt.n	8004d84 <_strtol_l.isra.0+0xc0>
 8004d60:	fb00 4003 	mla	r0, r0, r3, r4
 8004d64:	2201      	movs	r2, #1
 8004d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d6a:	e7eb      	b.n	8004d44 <_strtol_l.isra.0+0x80>
 8004d6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004d70:	2f19      	cmp	r7, #25
 8004d72:	d801      	bhi.n	8004d78 <_strtol_l.isra.0+0xb4>
 8004d74:	3c37      	subs	r4, #55	@ 0x37
 8004d76:	e7ea      	b.n	8004d4e <_strtol_l.isra.0+0x8a>
 8004d78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004d7c:	2f19      	cmp	r7, #25
 8004d7e:	d804      	bhi.n	8004d8a <_strtol_l.isra.0+0xc6>
 8004d80:	3c57      	subs	r4, #87	@ 0x57
 8004d82:	e7e4      	b.n	8004d4e <_strtol_l.isra.0+0x8a>
 8004d84:	f04f 32ff 	mov.w	r2, #4294967295
 8004d88:	e7ed      	b.n	8004d66 <_strtol_l.isra.0+0xa2>
 8004d8a:	1c53      	adds	r3, r2, #1
 8004d8c:	d108      	bne.n	8004da0 <_strtol_l.isra.0+0xdc>
 8004d8e:	2322      	movs	r3, #34	@ 0x22
 8004d90:	f8ce 3000 	str.w	r3, [lr]
 8004d94:	4660      	mov	r0, ip
 8004d96:	f1b8 0f00 	cmp.w	r8, #0
 8004d9a:	d0a0      	beq.n	8004cde <_strtol_l.isra.0+0x1a>
 8004d9c:	1e69      	subs	r1, r5, #1
 8004d9e:	e006      	b.n	8004dae <_strtol_l.isra.0+0xea>
 8004da0:	b106      	cbz	r6, 8004da4 <_strtol_l.isra.0+0xe0>
 8004da2:	4240      	negs	r0, r0
 8004da4:	f1b8 0f00 	cmp.w	r8, #0
 8004da8:	d099      	beq.n	8004cde <_strtol_l.isra.0+0x1a>
 8004daa:	2a00      	cmp	r2, #0
 8004dac:	d1f6      	bne.n	8004d9c <_strtol_l.isra.0+0xd8>
 8004dae:	f8c8 1000 	str.w	r1, [r8]
 8004db2:	e794      	b.n	8004cde <_strtol_l.isra.0+0x1a>
 8004db4:	08005769 	.word	0x08005769

08004db8 <strtol>:
 8004db8:	4613      	mov	r3, r2
 8004dba:	460a      	mov	r2, r1
 8004dbc:	4601      	mov	r1, r0
 8004dbe:	4802      	ldr	r0, [pc, #8]	@ (8004dc8 <strtol+0x10>)
 8004dc0:	6800      	ldr	r0, [r0, #0]
 8004dc2:	f7ff bf7f 	b.w	8004cc4 <_strtol_l.isra.0>
 8004dc6:	bf00      	nop
 8004dc8:	20000010 	.word	0x20000010

08004dcc <siprintf>:
 8004dcc:	b40e      	push	{r1, r2, r3}
 8004dce:	b510      	push	{r4, lr}
 8004dd0:	b09d      	sub	sp, #116	@ 0x74
 8004dd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004dd4:	9002      	str	r0, [sp, #8]
 8004dd6:	9006      	str	r0, [sp, #24]
 8004dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004ddc:	480a      	ldr	r0, [pc, #40]	@ (8004e08 <siprintf+0x3c>)
 8004dde:	9107      	str	r1, [sp, #28]
 8004de0:	9104      	str	r1, [sp, #16]
 8004de2:	490a      	ldr	r1, [pc, #40]	@ (8004e0c <siprintf+0x40>)
 8004de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004de8:	9105      	str	r1, [sp, #20]
 8004dea:	2400      	movs	r4, #0
 8004dec:	a902      	add	r1, sp, #8
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	9301      	str	r3, [sp, #4]
 8004df2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004df4:	f000 f994 	bl	8005120 <_svfiprintf_r>
 8004df8:	9b02      	ldr	r3, [sp, #8]
 8004dfa:	701c      	strb	r4, [r3, #0]
 8004dfc:	b01d      	add	sp, #116	@ 0x74
 8004dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e02:	b003      	add	sp, #12
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	20000010 	.word	0x20000010
 8004e0c:	ffff0208 	.word	0xffff0208

08004e10 <memset>:
 8004e10:	4402      	add	r2, r0
 8004e12:	4603      	mov	r3, r0
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d100      	bne.n	8004e1a <memset+0xa>
 8004e18:	4770      	bx	lr
 8004e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1e:	e7f9      	b.n	8004e14 <memset+0x4>

08004e20 <__errno>:
 8004e20:	4b01      	ldr	r3, [pc, #4]	@ (8004e28 <__errno+0x8>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	4770      	bx	lr
 8004e26:	bf00      	nop
 8004e28:	20000010 	.word	0x20000010

08004e2c <__libc_init_array>:
 8004e2c:	b570      	push	{r4, r5, r6, lr}
 8004e2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004e64 <__libc_init_array+0x38>)
 8004e30:	4c0d      	ldr	r4, [pc, #52]	@ (8004e68 <__libc_init_array+0x3c>)
 8004e32:	1b64      	subs	r4, r4, r5
 8004e34:	10a4      	asrs	r4, r4, #2
 8004e36:	2600      	movs	r6, #0
 8004e38:	42a6      	cmp	r6, r4
 8004e3a:	d109      	bne.n	8004e50 <__libc_init_array+0x24>
 8004e3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e6c <__libc_init_array+0x40>)
 8004e3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e70 <__libc_init_array+0x44>)
 8004e40:	f000 fc64 	bl	800570c <_init>
 8004e44:	1b64      	subs	r4, r4, r5
 8004e46:	10a4      	asrs	r4, r4, #2
 8004e48:	2600      	movs	r6, #0
 8004e4a:	42a6      	cmp	r6, r4
 8004e4c:	d105      	bne.n	8004e5a <__libc_init_array+0x2e>
 8004e4e:	bd70      	pop	{r4, r5, r6, pc}
 8004e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e54:	4798      	blx	r3
 8004e56:	3601      	adds	r6, #1
 8004e58:	e7ee      	b.n	8004e38 <__libc_init_array+0xc>
 8004e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5e:	4798      	blx	r3
 8004e60:	3601      	adds	r6, #1
 8004e62:	e7f2      	b.n	8004e4a <__libc_init_array+0x1e>
 8004e64:	080058a4 	.word	0x080058a4
 8004e68:	080058a4 	.word	0x080058a4
 8004e6c:	080058a4 	.word	0x080058a4
 8004e70:	080058a8 	.word	0x080058a8

08004e74 <__retarget_lock_acquire_recursive>:
 8004e74:	4770      	bx	lr

08004e76 <__retarget_lock_release_recursive>:
 8004e76:	4770      	bx	lr

08004e78 <_free_r>:
 8004e78:	b538      	push	{r3, r4, r5, lr}
 8004e7a:	4605      	mov	r5, r0
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d041      	beq.n	8004f04 <_free_r+0x8c>
 8004e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	bfb8      	it	lt
 8004e8a:	18e4      	addlt	r4, r4, r3
 8004e8c:	f000 f8e0 	bl	8005050 <__malloc_lock>
 8004e90:	4a1d      	ldr	r2, [pc, #116]	@ (8004f08 <_free_r+0x90>)
 8004e92:	6813      	ldr	r3, [r2, #0]
 8004e94:	b933      	cbnz	r3, 8004ea4 <_free_r+0x2c>
 8004e96:	6063      	str	r3, [r4, #4]
 8004e98:	6014      	str	r4, [r2, #0]
 8004e9a:	4628      	mov	r0, r5
 8004e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ea0:	f000 b8dc 	b.w	800505c <__malloc_unlock>
 8004ea4:	42a3      	cmp	r3, r4
 8004ea6:	d908      	bls.n	8004eba <_free_r+0x42>
 8004ea8:	6820      	ldr	r0, [r4, #0]
 8004eaa:	1821      	adds	r1, r4, r0
 8004eac:	428b      	cmp	r3, r1
 8004eae:	bf01      	itttt	eq
 8004eb0:	6819      	ldreq	r1, [r3, #0]
 8004eb2:	685b      	ldreq	r3, [r3, #4]
 8004eb4:	1809      	addeq	r1, r1, r0
 8004eb6:	6021      	streq	r1, [r4, #0]
 8004eb8:	e7ed      	b.n	8004e96 <_free_r+0x1e>
 8004eba:	461a      	mov	r2, r3
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b10b      	cbz	r3, 8004ec4 <_free_r+0x4c>
 8004ec0:	42a3      	cmp	r3, r4
 8004ec2:	d9fa      	bls.n	8004eba <_free_r+0x42>
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	1850      	adds	r0, r2, r1
 8004ec8:	42a0      	cmp	r0, r4
 8004eca:	d10b      	bne.n	8004ee4 <_free_r+0x6c>
 8004ecc:	6820      	ldr	r0, [r4, #0]
 8004ece:	4401      	add	r1, r0
 8004ed0:	1850      	adds	r0, r2, r1
 8004ed2:	4283      	cmp	r3, r0
 8004ed4:	6011      	str	r1, [r2, #0]
 8004ed6:	d1e0      	bne.n	8004e9a <_free_r+0x22>
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	6053      	str	r3, [r2, #4]
 8004ede:	4408      	add	r0, r1
 8004ee0:	6010      	str	r0, [r2, #0]
 8004ee2:	e7da      	b.n	8004e9a <_free_r+0x22>
 8004ee4:	d902      	bls.n	8004eec <_free_r+0x74>
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	602b      	str	r3, [r5, #0]
 8004eea:	e7d6      	b.n	8004e9a <_free_r+0x22>
 8004eec:	6820      	ldr	r0, [r4, #0]
 8004eee:	1821      	adds	r1, r4, r0
 8004ef0:	428b      	cmp	r3, r1
 8004ef2:	bf04      	itt	eq
 8004ef4:	6819      	ldreq	r1, [r3, #0]
 8004ef6:	685b      	ldreq	r3, [r3, #4]
 8004ef8:	6063      	str	r3, [r4, #4]
 8004efa:	bf04      	itt	eq
 8004efc:	1809      	addeq	r1, r1, r0
 8004efe:	6021      	streq	r1, [r4, #0]
 8004f00:	6054      	str	r4, [r2, #4]
 8004f02:	e7ca      	b.n	8004e9a <_free_r+0x22>
 8004f04:	bd38      	pop	{r3, r4, r5, pc}
 8004f06:	bf00      	nop
 8004f08:	200002d4 	.word	0x200002d4

08004f0c <sbrk_aligned>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004f4c <sbrk_aligned+0x40>)
 8004f10:	460c      	mov	r4, r1
 8004f12:	6831      	ldr	r1, [r6, #0]
 8004f14:	4605      	mov	r5, r0
 8004f16:	b911      	cbnz	r1, 8004f1e <sbrk_aligned+0x12>
 8004f18:	f000 fba4 	bl	8005664 <_sbrk_r>
 8004f1c:	6030      	str	r0, [r6, #0]
 8004f1e:	4621      	mov	r1, r4
 8004f20:	4628      	mov	r0, r5
 8004f22:	f000 fb9f 	bl	8005664 <_sbrk_r>
 8004f26:	1c43      	adds	r3, r0, #1
 8004f28:	d103      	bne.n	8004f32 <sbrk_aligned+0x26>
 8004f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004f2e:	4620      	mov	r0, r4
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
 8004f32:	1cc4      	adds	r4, r0, #3
 8004f34:	f024 0403 	bic.w	r4, r4, #3
 8004f38:	42a0      	cmp	r0, r4
 8004f3a:	d0f8      	beq.n	8004f2e <sbrk_aligned+0x22>
 8004f3c:	1a21      	subs	r1, r4, r0
 8004f3e:	4628      	mov	r0, r5
 8004f40:	f000 fb90 	bl	8005664 <_sbrk_r>
 8004f44:	3001      	adds	r0, #1
 8004f46:	d1f2      	bne.n	8004f2e <sbrk_aligned+0x22>
 8004f48:	e7ef      	b.n	8004f2a <sbrk_aligned+0x1e>
 8004f4a:	bf00      	nop
 8004f4c:	200002d0 	.word	0x200002d0

08004f50 <_malloc_r>:
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f54:	1ccd      	adds	r5, r1, #3
 8004f56:	f025 0503 	bic.w	r5, r5, #3
 8004f5a:	3508      	adds	r5, #8
 8004f5c:	2d0c      	cmp	r5, #12
 8004f5e:	bf38      	it	cc
 8004f60:	250c      	movcc	r5, #12
 8004f62:	2d00      	cmp	r5, #0
 8004f64:	4606      	mov	r6, r0
 8004f66:	db01      	blt.n	8004f6c <_malloc_r+0x1c>
 8004f68:	42a9      	cmp	r1, r5
 8004f6a:	d904      	bls.n	8004f76 <_malloc_r+0x26>
 8004f6c:	230c      	movs	r3, #12
 8004f6e:	6033      	str	r3, [r6, #0]
 8004f70:	2000      	movs	r0, #0
 8004f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800504c <_malloc_r+0xfc>
 8004f7a:	f000 f869 	bl	8005050 <__malloc_lock>
 8004f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f82:	461c      	mov	r4, r3
 8004f84:	bb44      	cbnz	r4, 8004fd8 <_malloc_r+0x88>
 8004f86:	4629      	mov	r1, r5
 8004f88:	4630      	mov	r0, r6
 8004f8a:	f7ff ffbf 	bl	8004f0c <sbrk_aligned>
 8004f8e:	1c43      	adds	r3, r0, #1
 8004f90:	4604      	mov	r4, r0
 8004f92:	d158      	bne.n	8005046 <_malloc_r+0xf6>
 8004f94:	f8d8 4000 	ldr.w	r4, [r8]
 8004f98:	4627      	mov	r7, r4
 8004f9a:	2f00      	cmp	r7, #0
 8004f9c:	d143      	bne.n	8005026 <_malloc_r+0xd6>
 8004f9e:	2c00      	cmp	r4, #0
 8004fa0:	d04b      	beq.n	800503a <_malloc_r+0xea>
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	4639      	mov	r1, r7
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	eb04 0903 	add.w	r9, r4, r3
 8004fac:	f000 fb5a 	bl	8005664 <_sbrk_r>
 8004fb0:	4581      	cmp	r9, r0
 8004fb2:	d142      	bne.n	800503a <_malloc_r+0xea>
 8004fb4:	6821      	ldr	r1, [r4, #0]
 8004fb6:	1a6d      	subs	r5, r5, r1
 8004fb8:	4629      	mov	r1, r5
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7ff ffa6 	bl	8004f0c <sbrk_aligned>
 8004fc0:	3001      	adds	r0, #1
 8004fc2:	d03a      	beq.n	800503a <_malloc_r+0xea>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	442b      	add	r3, r5
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	f8d8 3000 	ldr.w	r3, [r8]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	bb62      	cbnz	r2, 800502c <_malloc_r+0xdc>
 8004fd2:	f8c8 7000 	str.w	r7, [r8]
 8004fd6:	e00f      	b.n	8004ff8 <_malloc_r+0xa8>
 8004fd8:	6822      	ldr	r2, [r4, #0]
 8004fda:	1b52      	subs	r2, r2, r5
 8004fdc:	d420      	bmi.n	8005020 <_malloc_r+0xd0>
 8004fde:	2a0b      	cmp	r2, #11
 8004fe0:	d917      	bls.n	8005012 <_malloc_r+0xc2>
 8004fe2:	1961      	adds	r1, r4, r5
 8004fe4:	42a3      	cmp	r3, r4
 8004fe6:	6025      	str	r5, [r4, #0]
 8004fe8:	bf18      	it	ne
 8004fea:	6059      	strne	r1, [r3, #4]
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	bf08      	it	eq
 8004ff0:	f8c8 1000 	streq.w	r1, [r8]
 8004ff4:	5162      	str	r2, [r4, r5]
 8004ff6:	604b      	str	r3, [r1, #4]
 8004ff8:	4630      	mov	r0, r6
 8004ffa:	f000 f82f 	bl	800505c <__malloc_unlock>
 8004ffe:	f104 000b 	add.w	r0, r4, #11
 8005002:	1d23      	adds	r3, r4, #4
 8005004:	f020 0007 	bic.w	r0, r0, #7
 8005008:	1ac2      	subs	r2, r0, r3
 800500a:	bf1c      	itt	ne
 800500c:	1a1b      	subne	r3, r3, r0
 800500e:	50a3      	strne	r3, [r4, r2]
 8005010:	e7af      	b.n	8004f72 <_malloc_r+0x22>
 8005012:	6862      	ldr	r2, [r4, #4]
 8005014:	42a3      	cmp	r3, r4
 8005016:	bf0c      	ite	eq
 8005018:	f8c8 2000 	streq.w	r2, [r8]
 800501c:	605a      	strne	r2, [r3, #4]
 800501e:	e7eb      	b.n	8004ff8 <_malloc_r+0xa8>
 8005020:	4623      	mov	r3, r4
 8005022:	6864      	ldr	r4, [r4, #4]
 8005024:	e7ae      	b.n	8004f84 <_malloc_r+0x34>
 8005026:	463c      	mov	r4, r7
 8005028:	687f      	ldr	r7, [r7, #4]
 800502a:	e7b6      	b.n	8004f9a <_malloc_r+0x4a>
 800502c:	461a      	mov	r2, r3
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	42a3      	cmp	r3, r4
 8005032:	d1fb      	bne.n	800502c <_malloc_r+0xdc>
 8005034:	2300      	movs	r3, #0
 8005036:	6053      	str	r3, [r2, #4]
 8005038:	e7de      	b.n	8004ff8 <_malloc_r+0xa8>
 800503a:	230c      	movs	r3, #12
 800503c:	6033      	str	r3, [r6, #0]
 800503e:	4630      	mov	r0, r6
 8005040:	f000 f80c 	bl	800505c <__malloc_unlock>
 8005044:	e794      	b.n	8004f70 <_malloc_r+0x20>
 8005046:	6005      	str	r5, [r0, #0]
 8005048:	e7d6      	b.n	8004ff8 <_malloc_r+0xa8>
 800504a:	bf00      	nop
 800504c:	200002d4 	.word	0x200002d4

08005050 <__malloc_lock>:
 8005050:	4801      	ldr	r0, [pc, #4]	@ (8005058 <__malloc_lock+0x8>)
 8005052:	f7ff bf0f 	b.w	8004e74 <__retarget_lock_acquire_recursive>
 8005056:	bf00      	nop
 8005058:	200002cc 	.word	0x200002cc

0800505c <__malloc_unlock>:
 800505c:	4801      	ldr	r0, [pc, #4]	@ (8005064 <__malloc_unlock+0x8>)
 800505e:	f7ff bf0a 	b.w	8004e76 <__retarget_lock_release_recursive>
 8005062:	bf00      	nop
 8005064:	200002cc 	.word	0x200002cc

08005068 <__ssputs_r>:
 8005068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800506c:	688e      	ldr	r6, [r1, #8]
 800506e:	461f      	mov	r7, r3
 8005070:	42be      	cmp	r6, r7
 8005072:	680b      	ldr	r3, [r1, #0]
 8005074:	4682      	mov	sl, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4690      	mov	r8, r2
 800507a:	d82d      	bhi.n	80050d8 <__ssputs_r+0x70>
 800507c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005080:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005084:	d026      	beq.n	80050d4 <__ssputs_r+0x6c>
 8005086:	6965      	ldr	r5, [r4, #20]
 8005088:	6909      	ldr	r1, [r1, #16]
 800508a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800508e:	eba3 0901 	sub.w	r9, r3, r1
 8005092:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005096:	1c7b      	adds	r3, r7, #1
 8005098:	444b      	add	r3, r9
 800509a:	106d      	asrs	r5, r5, #1
 800509c:	429d      	cmp	r5, r3
 800509e:	bf38      	it	cc
 80050a0:	461d      	movcc	r5, r3
 80050a2:	0553      	lsls	r3, r2, #21
 80050a4:	d527      	bpl.n	80050f6 <__ssputs_r+0x8e>
 80050a6:	4629      	mov	r1, r5
 80050a8:	f7ff ff52 	bl	8004f50 <_malloc_r>
 80050ac:	4606      	mov	r6, r0
 80050ae:	b360      	cbz	r0, 800510a <__ssputs_r+0xa2>
 80050b0:	6921      	ldr	r1, [r4, #16]
 80050b2:	464a      	mov	r2, r9
 80050b4:	f000 fae6 	bl	8005684 <memcpy>
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	6126      	str	r6, [r4, #16]
 80050c6:	6165      	str	r5, [r4, #20]
 80050c8:	444e      	add	r6, r9
 80050ca:	eba5 0509 	sub.w	r5, r5, r9
 80050ce:	6026      	str	r6, [r4, #0]
 80050d0:	60a5      	str	r5, [r4, #8]
 80050d2:	463e      	mov	r6, r7
 80050d4:	42be      	cmp	r6, r7
 80050d6:	d900      	bls.n	80050da <__ssputs_r+0x72>
 80050d8:	463e      	mov	r6, r7
 80050da:	6820      	ldr	r0, [r4, #0]
 80050dc:	4632      	mov	r2, r6
 80050de:	4641      	mov	r1, r8
 80050e0:	f000 faa6 	bl	8005630 <memmove>
 80050e4:	68a3      	ldr	r3, [r4, #8]
 80050e6:	1b9b      	subs	r3, r3, r6
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	4433      	add	r3, r6
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	2000      	movs	r0, #0
 80050f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050f6:	462a      	mov	r2, r5
 80050f8:	f000 fad2 	bl	80056a0 <_realloc_r>
 80050fc:	4606      	mov	r6, r0
 80050fe:	2800      	cmp	r0, #0
 8005100:	d1e0      	bne.n	80050c4 <__ssputs_r+0x5c>
 8005102:	6921      	ldr	r1, [r4, #16]
 8005104:	4650      	mov	r0, sl
 8005106:	f7ff feb7 	bl	8004e78 <_free_r>
 800510a:	230c      	movs	r3, #12
 800510c:	f8ca 3000 	str.w	r3, [sl]
 8005110:	89a3      	ldrh	r3, [r4, #12]
 8005112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005116:	81a3      	strh	r3, [r4, #12]
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	e7e9      	b.n	80050f2 <__ssputs_r+0x8a>
	...

08005120 <_svfiprintf_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	4698      	mov	r8, r3
 8005126:	898b      	ldrh	r3, [r1, #12]
 8005128:	061b      	lsls	r3, r3, #24
 800512a:	b09d      	sub	sp, #116	@ 0x74
 800512c:	4607      	mov	r7, r0
 800512e:	460d      	mov	r5, r1
 8005130:	4614      	mov	r4, r2
 8005132:	d510      	bpl.n	8005156 <_svfiprintf_r+0x36>
 8005134:	690b      	ldr	r3, [r1, #16]
 8005136:	b973      	cbnz	r3, 8005156 <_svfiprintf_r+0x36>
 8005138:	2140      	movs	r1, #64	@ 0x40
 800513a:	f7ff ff09 	bl	8004f50 <_malloc_r>
 800513e:	6028      	str	r0, [r5, #0]
 8005140:	6128      	str	r0, [r5, #16]
 8005142:	b930      	cbnz	r0, 8005152 <_svfiprintf_r+0x32>
 8005144:	230c      	movs	r3, #12
 8005146:	603b      	str	r3, [r7, #0]
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b01d      	add	sp, #116	@ 0x74
 800514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005152:	2340      	movs	r3, #64	@ 0x40
 8005154:	616b      	str	r3, [r5, #20]
 8005156:	2300      	movs	r3, #0
 8005158:	9309      	str	r3, [sp, #36]	@ 0x24
 800515a:	2320      	movs	r3, #32
 800515c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005160:	f8cd 800c 	str.w	r8, [sp, #12]
 8005164:	2330      	movs	r3, #48	@ 0x30
 8005166:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005304 <_svfiprintf_r+0x1e4>
 800516a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800516e:	f04f 0901 	mov.w	r9, #1
 8005172:	4623      	mov	r3, r4
 8005174:	469a      	mov	sl, r3
 8005176:	f813 2b01 	ldrb.w	r2, [r3], #1
 800517a:	b10a      	cbz	r2, 8005180 <_svfiprintf_r+0x60>
 800517c:	2a25      	cmp	r2, #37	@ 0x25
 800517e:	d1f9      	bne.n	8005174 <_svfiprintf_r+0x54>
 8005180:	ebba 0b04 	subs.w	fp, sl, r4
 8005184:	d00b      	beq.n	800519e <_svfiprintf_r+0x7e>
 8005186:	465b      	mov	r3, fp
 8005188:	4622      	mov	r2, r4
 800518a:	4629      	mov	r1, r5
 800518c:	4638      	mov	r0, r7
 800518e:	f7ff ff6b 	bl	8005068 <__ssputs_r>
 8005192:	3001      	adds	r0, #1
 8005194:	f000 80a7 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 8005198:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519a:	445a      	add	r2, fp
 800519c:	9209      	str	r2, [sp, #36]	@ 0x24
 800519e:	f89a 3000 	ldrb.w	r3, [sl]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 809f 	beq.w	80052e6 <_svfiprintf_r+0x1c6>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 32ff 	mov.w	r2, #4294967295
 80051ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051b2:	f10a 0a01 	add.w	sl, sl, #1
 80051b6:	9304      	str	r3, [sp, #16]
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051be:	931a      	str	r3, [sp, #104]	@ 0x68
 80051c0:	4654      	mov	r4, sl
 80051c2:	2205      	movs	r2, #5
 80051c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051c8:	484e      	ldr	r0, [pc, #312]	@ (8005304 <_svfiprintf_r+0x1e4>)
 80051ca:	f7fb f829 	bl	8000220 <memchr>
 80051ce:	9a04      	ldr	r2, [sp, #16]
 80051d0:	b9d8      	cbnz	r0, 800520a <_svfiprintf_r+0xea>
 80051d2:	06d0      	lsls	r0, r2, #27
 80051d4:	bf44      	itt	mi
 80051d6:	2320      	movmi	r3, #32
 80051d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051dc:	0711      	lsls	r1, r2, #28
 80051de:	bf44      	itt	mi
 80051e0:	232b      	movmi	r3, #43	@ 0x2b
 80051e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051e6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80051ec:	d015      	beq.n	800521a <_svfiprintf_r+0xfa>
 80051ee:	9a07      	ldr	r2, [sp, #28]
 80051f0:	4654      	mov	r4, sl
 80051f2:	2000      	movs	r0, #0
 80051f4:	f04f 0c0a 	mov.w	ip, #10
 80051f8:	4621      	mov	r1, r4
 80051fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051fe:	3b30      	subs	r3, #48	@ 0x30
 8005200:	2b09      	cmp	r3, #9
 8005202:	d94b      	bls.n	800529c <_svfiprintf_r+0x17c>
 8005204:	b1b0      	cbz	r0, 8005234 <_svfiprintf_r+0x114>
 8005206:	9207      	str	r2, [sp, #28]
 8005208:	e014      	b.n	8005234 <_svfiprintf_r+0x114>
 800520a:	eba0 0308 	sub.w	r3, r0, r8
 800520e:	fa09 f303 	lsl.w	r3, r9, r3
 8005212:	4313      	orrs	r3, r2
 8005214:	9304      	str	r3, [sp, #16]
 8005216:	46a2      	mov	sl, r4
 8005218:	e7d2      	b.n	80051c0 <_svfiprintf_r+0xa0>
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	1d19      	adds	r1, r3, #4
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	9103      	str	r1, [sp, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	bfbb      	ittet	lt
 8005226:	425b      	neglt	r3, r3
 8005228:	f042 0202 	orrlt.w	r2, r2, #2
 800522c:	9307      	strge	r3, [sp, #28]
 800522e:	9307      	strlt	r3, [sp, #28]
 8005230:	bfb8      	it	lt
 8005232:	9204      	strlt	r2, [sp, #16]
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	2b2e      	cmp	r3, #46	@ 0x2e
 8005238:	d10a      	bne.n	8005250 <_svfiprintf_r+0x130>
 800523a:	7863      	ldrb	r3, [r4, #1]
 800523c:	2b2a      	cmp	r3, #42	@ 0x2a
 800523e:	d132      	bne.n	80052a6 <_svfiprintf_r+0x186>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	1d1a      	adds	r2, r3, #4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	9203      	str	r2, [sp, #12]
 8005248:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800524c:	3402      	adds	r4, #2
 800524e:	9305      	str	r3, [sp, #20]
 8005250:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005314 <_svfiprintf_r+0x1f4>
 8005254:	7821      	ldrb	r1, [r4, #0]
 8005256:	2203      	movs	r2, #3
 8005258:	4650      	mov	r0, sl
 800525a:	f7fa ffe1 	bl	8000220 <memchr>
 800525e:	b138      	cbz	r0, 8005270 <_svfiprintf_r+0x150>
 8005260:	9b04      	ldr	r3, [sp, #16]
 8005262:	eba0 000a 	sub.w	r0, r0, sl
 8005266:	2240      	movs	r2, #64	@ 0x40
 8005268:	4082      	lsls	r2, r0
 800526a:	4313      	orrs	r3, r2
 800526c:	3401      	adds	r4, #1
 800526e:	9304      	str	r3, [sp, #16]
 8005270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005274:	4824      	ldr	r0, [pc, #144]	@ (8005308 <_svfiprintf_r+0x1e8>)
 8005276:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800527a:	2206      	movs	r2, #6
 800527c:	f7fa ffd0 	bl	8000220 <memchr>
 8005280:	2800      	cmp	r0, #0
 8005282:	d036      	beq.n	80052f2 <_svfiprintf_r+0x1d2>
 8005284:	4b21      	ldr	r3, [pc, #132]	@ (800530c <_svfiprintf_r+0x1ec>)
 8005286:	bb1b      	cbnz	r3, 80052d0 <_svfiprintf_r+0x1b0>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	3307      	adds	r3, #7
 800528c:	f023 0307 	bic.w	r3, r3, #7
 8005290:	3308      	adds	r3, #8
 8005292:	9303      	str	r3, [sp, #12]
 8005294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005296:	4433      	add	r3, r6
 8005298:	9309      	str	r3, [sp, #36]	@ 0x24
 800529a:	e76a      	b.n	8005172 <_svfiprintf_r+0x52>
 800529c:	fb0c 3202 	mla	r2, ip, r2, r3
 80052a0:	460c      	mov	r4, r1
 80052a2:	2001      	movs	r0, #1
 80052a4:	e7a8      	b.n	80051f8 <_svfiprintf_r+0xd8>
 80052a6:	2300      	movs	r3, #0
 80052a8:	3401      	adds	r4, #1
 80052aa:	9305      	str	r3, [sp, #20]
 80052ac:	4619      	mov	r1, r3
 80052ae:	f04f 0c0a 	mov.w	ip, #10
 80052b2:	4620      	mov	r0, r4
 80052b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052b8:	3a30      	subs	r2, #48	@ 0x30
 80052ba:	2a09      	cmp	r2, #9
 80052bc:	d903      	bls.n	80052c6 <_svfiprintf_r+0x1a6>
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d0c6      	beq.n	8005250 <_svfiprintf_r+0x130>
 80052c2:	9105      	str	r1, [sp, #20]
 80052c4:	e7c4      	b.n	8005250 <_svfiprintf_r+0x130>
 80052c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ca:	4604      	mov	r4, r0
 80052cc:	2301      	movs	r3, #1
 80052ce:	e7f0      	b.n	80052b2 <_svfiprintf_r+0x192>
 80052d0:	ab03      	add	r3, sp, #12
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	462a      	mov	r2, r5
 80052d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005310 <_svfiprintf_r+0x1f0>)
 80052d8:	a904      	add	r1, sp, #16
 80052da:	4638      	mov	r0, r7
 80052dc:	f3af 8000 	nop.w
 80052e0:	1c42      	adds	r2, r0, #1
 80052e2:	4606      	mov	r6, r0
 80052e4:	d1d6      	bne.n	8005294 <_svfiprintf_r+0x174>
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	065b      	lsls	r3, r3, #25
 80052ea:	f53f af2d 	bmi.w	8005148 <_svfiprintf_r+0x28>
 80052ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052f0:	e72c      	b.n	800514c <_svfiprintf_r+0x2c>
 80052f2:	ab03      	add	r3, sp, #12
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	462a      	mov	r2, r5
 80052f8:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <_svfiprintf_r+0x1f0>)
 80052fa:	a904      	add	r1, sp, #16
 80052fc:	4638      	mov	r0, r7
 80052fe:	f000 f879 	bl	80053f4 <_printf_i>
 8005302:	e7ed      	b.n	80052e0 <_svfiprintf_r+0x1c0>
 8005304:	08005869 	.word	0x08005869
 8005308:	08005873 	.word	0x08005873
 800530c:	00000000 	.word	0x00000000
 8005310:	08005069 	.word	0x08005069
 8005314:	0800586f 	.word	0x0800586f

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4698      	mov	r8, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	3b00      	subs	r3, #0
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005374:	4641      	mov	r1, r8
 8005376:	4638      	mov	r0, r7
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf02      	ittt	eq
 800538a:	68e5      	ldreq	r5, [r4, #12]
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	1aed      	subeq	r5, r5, r3
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4641      	mov	r1, r8
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c8      	blx	r9
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	@ 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4641      	mov	r1, r8
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c8      	blx	r9
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	7e0f      	ldrb	r7, [r1, #24]
 80053fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fc:	2f78      	cmp	r7, #120	@ 0x78
 80053fe:	4691      	mov	r9, r2
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	469a      	mov	sl, r3
 8005406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	@ 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d1 	beq.w	80055b8 <_printf_i+0x1c4>
 8005416:	2f58      	cmp	r7, #88	@ 0x58
 8005418:	f000 80b8 	beq.w	800558c <_printf_i+0x198>
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a101      	add	r1, pc, #4	@ (adr r1, 8005434 <_printf_i+0x40>)
 8005430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	0800559f 	.word	0x0800559f
 8005464:	080054cb 	.word	0x080054cb
 8005468:	08005559 	.word	0x08005559
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055c1 	.word	0x080055c1
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054cb 	.word	0x080054cb
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005561 	.word	0x08005561
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6032      	str	r2, [r6, #0]
 8005494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e09c      	b.n	80055da <_printf_i+0x1e6>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	0606      	lsls	r6, r0, #24
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0xbc>
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <_printf_i+0xc4>
 80054b0:	0645      	lsls	r5, r0, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0xb8>
 80054b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	da03      	bge.n	80054c4 <_printf_i+0xd0>
 80054bc:	232d      	movs	r3, #45	@ 0x2d
 80054be:	426d      	negs	r5, r5
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c4:	4858      	ldr	r0, [pc, #352]	@ (8005628 <_printf_i+0x234>)
 80054c6:	230a      	movs	r3, #10
 80054c8:	e011      	b.n	80054ee <_printf_i+0xfa>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	0608      	lsls	r0, r1, #24
 80054d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054d4:	d402      	bmi.n	80054dc <_printf_i+0xe8>
 80054d6:	0649      	lsls	r1, r1, #25
 80054d8:	bf48      	it	mi
 80054da:	b2ad      	uxthmi	r5, r5
 80054dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054de:	4852      	ldr	r0, [pc, #328]	@ (8005628 <_printf_i+0x234>)
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	bf14      	ite	ne
 80054e4:	230a      	movne	r3, #10
 80054e6:	2308      	moveq	r3, #8
 80054e8:	2100      	movs	r1, #0
 80054ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054ee:	6866      	ldr	r6, [r4, #4]
 80054f0:	60a6      	str	r6, [r4, #8]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	db05      	blt.n	8005502 <_printf_i+0x10e>
 80054f6:	6821      	ldr	r1, [r4, #0]
 80054f8:	432e      	orrs	r6, r5
 80054fa:	f021 0104 	bic.w	r1, r1, #4
 80054fe:	6021      	str	r1, [r4, #0]
 8005500:	d04b      	beq.n	800559a <_printf_i+0x1a6>
 8005502:	4616      	mov	r6, r2
 8005504:	fbb5 f1f3 	udiv	r1, r5, r3
 8005508:	fb03 5711 	mls	r7, r3, r1, r5
 800550c:	5dc7      	ldrb	r7, [r0, r7]
 800550e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005512:	462f      	mov	r7, r5
 8005514:	42bb      	cmp	r3, r7
 8005516:	460d      	mov	r5, r1
 8005518:	d9f4      	bls.n	8005504 <_printf_i+0x110>
 800551a:	2b08      	cmp	r3, #8
 800551c:	d10b      	bne.n	8005536 <_printf_i+0x142>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	07df      	lsls	r7, r3, #31
 8005522:	d508      	bpl.n	8005536 <_printf_i+0x142>
 8005524:	6923      	ldr	r3, [r4, #16]
 8005526:	6861      	ldr	r1, [r4, #4]
 8005528:	4299      	cmp	r1, r3
 800552a:	bfde      	ittt	le
 800552c:	2330      	movle	r3, #48	@ 0x30
 800552e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005532:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005536:	1b92      	subs	r2, r2, r6
 8005538:	6122      	str	r2, [r4, #16]
 800553a:	f8cd a000 	str.w	sl, [sp]
 800553e:	464b      	mov	r3, r9
 8005540:	aa03      	add	r2, sp, #12
 8005542:	4621      	mov	r1, r4
 8005544:	4640      	mov	r0, r8
 8005546:	f7ff fee7 	bl	8005318 <_printf_common>
 800554a:	3001      	adds	r0, #1
 800554c:	d14a      	bne.n	80055e4 <_printf_i+0x1f0>
 800554e:	f04f 30ff 	mov.w	r0, #4294967295
 8005552:	b004      	add	sp, #16
 8005554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005558:	6823      	ldr	r3, [r4, #0]
 800555a:	f043 0320 	orr.w	r3, r3, #32
 800555e:	6023      	str	r3, [r4, #0]
 8005560:	4832      	ldr	r0, [pc, #200]	@ (800562c <_printf_i+0x238>)
 8005562:	2778      	movs	r7, #120	@ 0x78
 8005564:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	6831      	ldr	r1, [r6, #0]
 800556c:	061f      	lsls	r7, r3, #24
 800556e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005572:	d402      	bmi.n	800557a <_printf_i+0x186>
 8005574:	065f      	lsls	r7, r3, #25
 8005576:	bf48      	it	mi
 8005578:	b2ad      	uxthmi	r5, r5
 800557a:	6031      	str	r1, [r6, #0]
 800557c:	07d9      	lsls	r1, r3, #31
 800557e:	bf44      	itt	mi
 8005580:	f043 0320 	orrmi.w	r3, r3, #32
 8005584:	6023      	strmi	r3, [r4, #0]
 8005586:	b11d      	cbz	r5, 8005590 <_printf_i+0x19c>
 8005588:	2310      	movs	r3, #16
 800558a:	e7ad      	b.n	80054e8 <_printf_i+0xf4>
 800558c:	4826      	ldr	r0, [pc, #152]	@ (8005628 <_printf_i+0x234>)
 800558e:	e7e9      	b.n	8005564 <_printf_i+0x170>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	f023 0320 	bic.w	r3, r3, #32
 8005596:	6023      	str	r3, [r4, #0]
 8005598:	e7f6      	b.n	8005588 <_printf_i+0x194>
 800559a:	4616      	mov	r6, r2
 800559c:	e7bd      	b.n	800551a <_printf_i+0x126>
 800559e:	6833      	ldr	r3, [r6, #0]
 80055a0:	6825      	ldr	r5, [r4, #0]
 80055a2:	6961      	ldr	r1, [r4, #20]
 80055a4:	1d18      	adds	r0, r3, #4
 80055a6:	6030      	str	r0, [r6, #0]
 80055a8:	062e      	lsls	r6, r5, #24
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	d501      	bpl.n	80055b2 <_printf_i+0x1be>
 80055ae:	6019      	str	r1, [r3, #0]
 80055b0:	e002      	b.n	80055b8 <_printf_i+0x1c4>
 80055b2:	0668      	lsls	r0, r5, #25
 80055b4:	d5fb      	bpl.n	80055ae <_printf_i+0x1ba>
 80055b6:	8019      	strh	r1, [r3, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	6123      	str	r3, [r4, #16]
 80055bc:	4616      	mov	r6, r2
 80055be:	e7bc      	b.n	800553a <_printf_i+0x146>
 80055c0:	6833      	ldr	r3, [r6, #0]
 80055c2:	1d1a      	adds	r2, r3, #4
 80055c4:	6032      	str	r2, [r6, #0]
 80055c6:	681e      	ldr	r6, [r3, #0]
 80055c8:	6862      	ldr	r2, [r4, #4]
 80055ca:	2100      	movs	r1, #0
 80055cc:	4630      	mov	r0, r6
 80055ce:	f7fa fe27 	bl	8000220 <memchr>
 80055d2:	b108      	cbz	r0, 80055d8 <_printf_i+0x1e4>
 80055d4:	1b80      	subs	r0, r0, r6
 80055d6:	6060      	str	r0, [r4, #4]
 80055d8:	6863      	ldr	r3, [r4, #4]
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	2300      	movs	r3, #0
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e2:	e7aa      	b.n	800553a <_printf_i+0x146>
 80055e4:	6923      	ldr	r3, [r4, #16]
 80055e6:	4632      	mov	r2, r6
 80055e8:	4649      	mov	r1, r9
 80055ea:	4640      	mov	r0, r8
 80055ec:	47d0      	blx	sl
 80055ee:	3001      	adds	r0, #1
 80055f0:	d0ad      	beq.n	800554e <_printf_i+0x15a>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	079b      	lsls	r3, r3, #30
 80055f6:	d413      	bmi.n	8005620 <_printf_i+0x22c>
 80055f8:	68e0      	ldr	r0, [r4, #12]
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	4298      	cmp	r0, r3
 80055fe:	bfb8      	it	lt
 8005600:	4618      	movlt	r0, r3
 8005602:	e7a6      	b.n	8005552 <_printf_i+0x15e>
 8005604:	2301      	movs	r3, #1
 8005606:	4632      	mov	r2, r6
 8005608:	4649      	mov	r1, r9
 800560a:	4640      	mov	r0, r8
 800560c:	47d0      	blx	sl
 800560e:	3001      	adds	r0, #1
 8005610:	d09d      	beq.n	800554e <_printf_i+0x15a>
 8005612:	3501      	adds	r5, #1
 8005614:	68e3      	ldr	r3, [r4, #12]
 8005616:	9903      	ldr	r1, [sp, #12]
 8005618:	1a5b      	subs	r3, r3, r1
 800561a:	42ab      	cmp	r3, r5
 800561c:	dcf2      	bgt.n	8005604 <_printf_i+0x210>
 800561e:	e7eb      	b.n	80055f8 <_printf_i+0x204>
 8005620:	2500      	movs	r5, #0
 8005622:	f104 0619 	add.w	r6, r4, #25
 8005626:	e7f5      	b.n	8005614 <_printf_i+0x220>
 8005628:	0800587a 	.word	0x0800587a
 800562c:	0800588b 	.word	0x0800588b

08005630 <memmove>:
 8005630:	4288      	cmp	r0, r1
 8005632:	b510      	push	{r4, lr}
 8005634:	eb01 0402 	add.w	r4, r1, r2
 8005638:	d902      	bls.n	8005640 <memmove+0x10>
 800563a:	4284      	cmp	r4, r0
 800563c:	4623      	mov	r3, r4
 800563e:	d807      	bhi.n	8005650 <memmove+0x20>
 8005640:	1e43      	subs	r3, r0, #1
 8005642:	42a1      	cmp	r1, r4
 8005644:	d008      	beq.n	8005658 <memmove+0x28>
 8005646:	f811 2b01 	ldrb.w	r2, [r1], #1
 800564a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800564e:	e7f8      	b.n	8005642 <memmove+0x12>
 8005650:	4402      	add	r2, r0
 8005652:	4601      	mov	r1, r0
 8005654:	428a      	cmp	r2, r1
 8005656:	d100      	bne.n	800565a <memmove+0x2a>
 8005658:	bd10      	pop	{r4, pc}
 800565a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800565e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005662:	e7f7      	b.n	8005654 <memmove+0x24>

08005664 <_sbrk_r>:
 8005664:	b538      	push	{r3, r4, r5, lr}
 8005666:	4d06      	ldr	r5, [pc, #24]	@ (8005680 <_sbrk_r+0x1c>)
 8005668:	2300      	movs	r3, #0
 800566a:	4604      	mov	r4, r0
 800566c:	4608      	mov	r0, r1
 800566e:	602b      	str	r3, [r5, #0]
 8005670:	f7fb faf2 	bl	8000c58 <_sbrk>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_sbrk_r+0x1a>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_sbrk_r+0x1a>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	200002c8 	.word	0x200002c8

08005684 <memcpy>:
 8005684:	440a      	add	r2, r1
 8005686:	4291      	cmp	r1, r2
 8005688:	f100 33ff 	add.w	r3, r0, #4294967295
 800568c:	d100      	bne.n	8005690 <memcpy+0xc>
 800568e:	4770      	bx	lr
 8005690:	b510      	push	{r4, lr}
 8005692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800569a:	4291      	cmp	r1, r2
 800569c:	d1f9      	bne.n	8005692 <memcpy+0xe>
 800569e:	bd10      	pop	{r4, pc}

080056a0 <_realloc_r>:
 80056a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056a4:	4607      	mov	r7, r0
 80056a6:	4614      	mov	r4, r2
 80056a8:	460d      	mov	r5, r1
 80056aa:	b921      	cbnz	r1, 80056b6 <_realloc_r+0x16>
 80056ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	4611      	mov	r1, r2
 80056b2:	f7ff bc4d 	b.w	8004f50 <_malloc_r>
 80056b6:	b92a      	cbnz	r2, 80056c4 <_realloc_r+0x24>
 80056b8:	f7ff fbde 	bl	8004e78 <_free_r>
 80056bc:	4625      	mov	r5, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c4:	f000 f81a 	bl	80056fc <_malloc_usable_size_r>
 80056c8:	4284      	cmp	r4, r0
 80056ca:	4606      	mov	r6, r0
 80056cc:	d802      	bhi.n	80056d4 <_realloc_r+0x34>
 80056ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056d2:	d8f4      	bhi.n	80056be <_realloc_r+0x1e>
 80056d4:	4621      	mov	r1, r4
 80056d6:	4638      	mov	r0, r7
 80056d8:	f7ff fc3a 	bl	8004f50 <_malloc_r>
 80056dc:	4680      	mov	r8, r0
 80056de:	b908      	cbnz	r0, 80056e4 <_realloc_r+0x44>
 80056e0:	4645      	mov	r5, r8
 80056e2:	e7ec      	b.n	80056be <_realloc_r+0x1e>
 80056e4:	42b4      	cmp	r4, r6
 80056e6:	4622      	mov	r2, r4
 80056e8:	4629      	mov	r1, r5
 80056ea:	bf28      	it	cs
 80056ec:	4632      	movcs	r2, r6
 80056ee:	f7ff ffc9 	bl	8005684 <memcpy>
 80056f2:	4629      	mov	r1, r5
 80056f4:	4638      	mov	r0, r7
 80056f6:	f7ff fbbf 	bl	8004e78 <_free_r>
 80056fa:	e7f1      	b.n	80056e0 <_realloc_r+0x40>

080056fc <_malloc_usable_size_r>:
 80056fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005700:	1f18      	subs	r0, r3, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfbc      	itt	lt
 8005706:	580b      	ldrlt	r3, [r1, r0]
 8005708:	18c0      	addlt	r0, r0, r3
 800570a:	4770      	bx	lr

0800570c <_init>:
 800570c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570e:	bf00      	nop
 8005710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005712:	bc08      	pop	{r3}
 8005714:	469e      	mov	lr, r3
 8005716:	4770      	bx	lr

08005718 <_fini>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr
