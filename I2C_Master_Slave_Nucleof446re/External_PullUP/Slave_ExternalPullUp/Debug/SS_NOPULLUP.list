
SS_NOPULLUP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004888  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a4c  08004a4c  00005a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a6c  08004a6c  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a74  08004a74  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a78  08004a78  00005a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004a7c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  2000000c  08004a88  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004a88  0000612c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000babd  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4c  00000000  00000000  00011af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00013648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ee  00000000  00000000  00014060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002099d  00000000  00000000  0001484e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d751  00000000  00000000  000351eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7497  00000000  00000000  0004293c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109dd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029f8  00000000  00000000  00109e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  0010c810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004a34 	.word	0x08004a34

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004a34 	.word	0x08004a34

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fb1c 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f816 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8fa 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 8000540:	f000 f8d8 	bl	80006f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f8ac 	bl	80006a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000548:	f000 f87c 	bl	8000644 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_I2C_Slave_Receive_IT(&hi2c1 ,(uint8_t *)RX_Buffer, 1); //Receiving in Interrupt mode
 800054c:	2201      	movs	r2, #1
 800054e:	4904      	ldr	r1, [pc, #16]	@ (8000560 <main+0x30>)
 8000550:	4804      	ldr	r0, [pc, #16]	@ (8000564 <main+0x34>)
 8000552:	f001 faf1 	bl	8001b38 <HAL_I2C_Slave_Receive_IT>
  HAL_Delay(100);
 8000556:	2064      	movs	r0, #100	@ 0x64
 8000558:	f000 fb7c 	bl	8000c54 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <main+0x2c>
 8000560:	20000124 	.word	0x20000124
 8000564:	20000028 	.word	0x20000028

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	@ 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	@ 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fa30 	bl	80049dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	4b2a      	ldr	r3, [pc, #168]	@ (800063c <SystemClock_Config+0xd4>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000594:	4a29      	ldr	r2, [pc, #164]	@ (800063c <SystemClock_Config+0xd4>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	@ 0x40
 800059c:	4b27      	ldr	r3, [pc, #156]	@ (800063c <SystemClock_Config+0xd4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a8:	2300      	movs	r3, #0
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	4b24      	ldr	r3, [pc, #144]	@ (8000640 <SystemClock_Config+0xd8>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b4:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <SystemClock_Config+0xd8>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <SystemClock_Config+0xd8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005dc:	2310      	movs	r3, #16
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005e6:	2304      	movs	r3, #4
 80005e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 031c 	add.w	r3, r7, #28
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fb46 	bl	8003c88 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000602:	f000 f92b 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	230f      	movs	r3, #15
 8000608:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2302      	movs	r3, #2
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000612:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	2102      	movs	r1, #2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 ffe6 	bl	80035f4 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800062e:	f000 f915 	bl	800085c <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	@ 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40007000 	.word	0x40007000

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	@ (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	@ (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	@ (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2220      	movs	r2, #32
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f001 f8ff 	bl	8001884 <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 f8e6 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40005400 	.word	0x40005400
 800069c:	000186a0 	.word	0x000186a0

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	@ (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	@ (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f003 fd74 	bl	80041c4 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f8bb 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000dc 	.word	0x200000dc
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <MX_DMA_Init+0x3c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	4a0b      	ldr	r2, [pc, #44]	@ (8000730 <MX_DMA_Init+0x3c>)
 8000704:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000708:	6313      	str	r3, [r2, #48]	@ 0x30
 800070a:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <MX_DMA_Init+0x3c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	200b      	movs	r0, #11
 800071c:	f000 fb99 	bl	8000e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000720:	200b      	movs	r0, #11
 8000722:	f000 fbb2 	bl	8000e8a <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	613b      	str	r3, [r7, #16]
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b2a      	ldr	r3, [pc, #168]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	4a25      	ldr	r2, [pc, #148]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000774:	6313      	str	r3, [r2, #48]	@ 0x30
 8000776:	4b23      	ldr	r3, [pc, #140]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1e      	ldr	r2, [pc, #120]	@ (8000804 <MX_GPIO_Init+0xd0>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b1c      	ldr	r3, [pc, #112]	@ (8000804 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	607b      	str	r3, [r7, #4]
 80007a2:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	@ (8000804 <MX_GPIO_Init+0xd0>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4812      	ldr	r0, [pc, #72]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007c0:	f001 f82c 	bl	800181c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ca:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	480c      	ldr	r0, [pc, #48]	@ (800080c <MX_GPIO_Init+0xd8>)
 80007dc:	f000 fe8a 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e0:	2320      	movs	r3, #32
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e4:	2301      	movs	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_GPIO_Init+0xd4>)
 80007f8:	f000 fe7c 	bl	80014f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020800 	.word	0x40020800

08000810 <HAL_I2C_SlaveRxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == I2C1) {
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a0a      	ldr	r2, [pc, #40]	@ (8000848 <HAL_I2C_SlaveRxCpltCallback+0x38>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d109      	bne.n	8000836 <HAL_I2C_SlaveRxCpltCallback+0x26>
	    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);  // Indicate data reception
 8000822:	2120      	movs	r1, #32
 8000824:	4809      	ldr	r0, [pc, #36]	@ (800084c <HAL_I2C_SlaveRxCpltCallback+0x3c>)
 8000826:	f001 f812 	bl	800184e <HAL_GPIO_TogglePin>
	    HAL_UART_Transmit(&huart2, RX_Buffer, 1, 100); // Print the received data via UART
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	2201      	movs	r2, #1
 800082e:	4908      	ldr	r1, [pc, #32]	@ (8000850 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 8000830:	4808      	ldr	r0, [pc, #32]	@ (8000854 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8000832:	f003 fd17 	bl	8004264 <HAL_UART_Transmit>
	}

	// Re-enable I2C reception in interrupt mode
	HAL_I2C_Slave_Receive_IT(&hi2c1, RX_Buffer, 1);
 8000836:	2201      	movs	r2, #1
 8000838:	4905      	ldr	r1, [pc, #20]	@ (8000850 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800083a:	4807      	ldr	r0, [pc, #28]	@ (8000858 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 800083c:	f001 f97c 	bl	8001b38 <HAL_I2C_Slave_Receive_IT>

}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40005400 	.word	0x40005400
 800084c:	40020000 	.word	0x40020000
 8000850:	20000124 	.word	0x20000124
 8000854:	200000dc 	.word	0x200000dc
 8000858:	20000028 	.word	0x20000028

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087c:	6453      	str	r3, [r2, #68]	@ 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008a6:	2007      	movs	r0, #7
 80008a8:	f000 fac8 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a38      	ldr	r2, [pc, #224]	@ (80009b8 <HAL_I2C_MspInit+0x100>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d16a      	bne.n	80009b0 <HAL_I2C_MspInit+0xf8>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b37      	ldr	r3, [pc, #220]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a36      	ldr	r2, [pc, #216]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 80008e4:	f043 0302 	orr.w	r3, r3, #2
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008f6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fc:	2312      	movs	r3, #18
 80008fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000904:	2303      	movs	r3, #3
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000908:	2304      	movs	r3, #4
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	482b      	ldr	r0, [pc, #172]	@ (80009c0 <HAL_I2C_MspInit+0x108>)
 8000914:	f000 fdee 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a26      	ldr	r2, [pc, #152]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 8000922:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40
 8000928:	4b24      	ldr	r3, [pc, #144]	@ (80009bc <HAL_I2C_MspInit+0x104>)
 800092a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000934:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000936:	4a24      	ldr	r2, [pc, #144]	@ (80009c8 <HAL_I2C_MspInit+0x110>)
 8000938:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800093a:	4b22      	ldr	r3, [pc, #136]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 800093c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000940:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000942:	4b20      	ldr	r3, [pc, #128]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800094e:	4b1d      	ldr	r3, [pc, #116]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000950:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000954:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000956:	4b1b      	ldr	r3, [pc, #108]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000968:	4b16      	ldr	r3, [pc, #88]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800096e:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000974:	4813      	ldr	r0, [pc, #76]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000976:	f000 faa3 	bl	8000ec0 <HAL_DMA_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000980:	f7ff ff6c 	bl	800085c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a0f      	ldr	r2, [pc, #60]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 8000988:	639a      	str	r2, [r3, #56]	@ 0x38
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_I2C_MspInit+0x10c>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	201f      	movs	r0, #31
 8000996:	f000 fa5c 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800099a:	201f      	movs	r0, #31
 800099c:	f000 fa75 	bl	8000e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2020      	movs	r0, #32
 80009a6:	f000 fa54 	bl	8000e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80009aa:	2020      	movs	r0, #32
 80009ac:	f000 fa6d 	bl	8000e8a <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009b0:	bf00      	nop
 80009b2:	3728      	adds	r7, #40	@ 0x28
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40005400 	.word	0x40005400
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	40026010 	.word	0x40026010

080009cc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	@ 0x28
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <HAL_UART_MspInit+0x84>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d12b      	bne.n	8000a46 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	4a17      	ldr	r2, [pc, #92]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fe:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a10      	ldr	r2, [pc, #64]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <HAL_UART_MspInit+0x88>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a26:	230c      	movs	r3, #12
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a32:	2303      	movs	r3, #3
 8000a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a36:	2307      	movs	r3, #7
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <HAL_UART_MspInit+0x8c>)
 8000a42:	f000 fd57 	bl	80014f4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40004400 	.word	0x40004400
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab2:	f000 f8af 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000ac0:	4802      	ldr	r0, [pc, #8]	@ (8000acc <DMA1_Stream0_IRQHandler+0x10>)
 8000ac2:	f000 facd 	bl	8001060 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000007c 	.word	0x2000007c

08000ad0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <I2C1_EV_IRQHandler+0x10>)
 8000ad6:	f001 f89f 	bl	8001c18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000028 	.word	0x20000028

08000ae4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ae8:	4802      	ldr	r0, [pc, #8]	@ (8000af4 <I2C1_ER_IRQHandler+0x10>)
 8000aea:	f001 fa06 	bl	8001efa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000028 	.word	0x20000028

08000af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000afc:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <SystemInit+0x20>)
 8000afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b02:	4a05      	ldr	r2, [pc, #20]	@ (8000b18 <SystemInit+0x20>)
 8000b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b20:	f7ff ffea 	bl	8000af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b4a:	f003 ff4f 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b4e:	f7ff fcef 	bl	8000530 <main>
  bx  lr    
 8000b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b60:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 8000b64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b68:	2000012c 	.word	0x2000012c

08000b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb0 <HAL_Init+0x40>)
 8000b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <HAL_Init+0x40>)
 8000b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <HAL_Init+0x40>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	@ (8000bb0 <HAL_Init+0x40>)
 8000b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f94f 	bl	8000e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f7ff fe60 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023c00 	.word	0x40023c00

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	@ (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f967 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f92f 	bl	8000e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	@ (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	20000004 	.word	0x20000004

08000c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	@ (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000128 	.word	0x20000128

08000c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c40:	4b03      	ldr	r3, [pc, #12]	@ (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000128 	.word	0x20000128

08000c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <HAL_Delay+0x44>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	bf00      	nop
 8000c90:	3710      	adds	r7, #16
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008

08000c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b085      	sub	sp, #20
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb8:	4013      	ands	r3, r2
 8000cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce8:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <__NVIC_GetPriorityGrouping+0x18>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	0a1b      	lsrs	r3, r3, #8
 8000cee:	f003 0307 	and.w	r3, r3, #7
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	db0b      	blt.n	8000d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	f003 021f 	and.w	r2, r3, #31
 8000d18:	4907      	ldr	r1, [pc, #28]	@ (8000d38 <__NVIC_EnableIRQ+0x38>)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	095b      	lsrs	r3, r3, #5
 8000d20:	2001      	movs	r0, #1
 8000d22:	fa00 f202 	lsl.w	r2, r0, r2
 8000d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
	...

08000df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3b01      	subs	r3, #1
 8000e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e08:	d301      	bcc.n	8000e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e00f      	b.n	8000e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e38 <SysTick_Config+0x40>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e16:	210f      	movs	r1, #15
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	f7ff ff8e 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e20:	4b05      	ldr	r3, [pc, #20]	@ (8000e38 <SysTick_Config+0x40>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e26:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <SysTick_Config+0x40>)
 8000e28:	2207      	movs	r2, #7
 8000e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e2c:	2300      	movs	r3, #0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	e000e010 	.word	0xe000e010

08000e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff29 	bl	8000c9c <__NVIC_SetPriorityGrouping>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff3e 	bl	8000ce4 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff8e 	bl	8000d90 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5d 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff31 	bl	8000d00 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa2 	bl	8000df8 <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff feb6 	bl	8000c3c <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d101      	bne.n	8000edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e099      	b.n	8001010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efc:	e00f      	b.n	8000f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efe:	f7ff fe9d 	bl	8000c3c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d908      	bls.n	8000f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e078      	b.n	8001010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0301 	and.w	r3, r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e8      	bne.n	8000efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000f34:	697a      	ldr	r2, [r7, #20]
 8000f36:	4b38      	ldr	r3, [pc, #224]	@ (8001018 <HAL_DMA_Init+0x158>)
 8000f38:	4013      	ands	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f74:	2b04      	cmp	r3, #4
 8000f76:	d107      	bne.n	8000f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f80:	4313      	orrs	r3, r2
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f023 0307 	bic.w	r3, r3, #7
 8000f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fae:	2b04      	cmp	r3, #4
 8000fb0:	d117      	bne.n	8000fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00e      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fa19 	bl	80013fc <DMA_CheckFifoParam>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d008      	beq.n	8000fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2240      	movs	r2, #64	@ 0x40
 8000fd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e016      	b.n	8001010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 f9d0 	bl	8001390 <DMA_CalcBaseAndBitshift>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff8:	223f      	movs	r2, #63	@ 0x3f
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2201      	movs	r2, #1
 800100a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	f010803f 	.word	0xf010803f

0800101c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b02      	cmp	r3, #2
 800102e:	d004      	beq.n	800103a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2280      	movs	r2, #128	@ 0x80
 8001034:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00c      	b.n	8001054 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2205      	movs	r2, #5
 800103e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f022 0201 	bic.w	r2, r2, #1
 8001050:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800106c:	4b8e      	ldr	r3, [pc, #568]	@ (80012a8 <HAL_DMA_IRQHandler+0x248>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a8e      	ldr	r2, [pc, #568]	@ (80012ac <HAL_DMA_IRQHandler+0x24c>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	0a9b      	lsrs	r3, r3, #10
 8001078:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800107e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800108a:	2208      	movs	r2, #8
 800108c:	409a      	lsls	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4013      	ands	r3, r2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d01a      	beq.n	80010cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d013      	beq.n	80010cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 0204 	bic.w	r2, r2, #4
 80010b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010b8:	2208      	movs	r2, #8
 80010ba:	409a      	lsls	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010d0:	2201      	movs	r2, #1
 80010d2:	409a      	lsls	r2, r3
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d012      	beq.n	8001102 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d00b      	beq.n	8001102 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ee:	2201      	movs	r2, #1
 80010f0:	409a      	lsls	r2, r3
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001106:	2204      	movs	r2, #4
 8001108:	409a      	lsls	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	2b00      	cmp	r3, #0
 8001110:	d012      	beq.n	8001138 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001124:	2204      	movs	r2, #4
 8001126:	409a      	lsls	r2, r3
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001130:	f043 0204 	orr.w	r2, r3, #4
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800113c:	2210      	movs	r2, #16
 800113e:	409a      	lsls	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4013      	ands	r3, r2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d043      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	2b00      	cmp	r3, #0
 8001154:	d03c      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115a:	2210      	movs	r2, #16
 800115c:	409a      	lsls	r2, r3
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d018      	beq.n	80011a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d108      	bne.n	8001190 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	2b00      	cmp	r3, #0
 8001184:	d024      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	4798      	blx	r3
 800118e:	e01f      	b.n	80011d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001194:	2b00      	cmp	r3, #0
 8001196:	d01b      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	4798      	blx	r3
 80011a0:	e016      	b.n	80011d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d107      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 0208 	bic.w	r2, r2, #8
 80011be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d4:	2220      	movs	r2, #32
 80011d6:	409a      	lsls	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4013      	ands	r3, r2
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 808f 	beq.w	8001300 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 8087 	beq.w	8001300 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011f6:	2220      	movs	r2, #32
 80011f8:	409a      	lsls	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b05      	cmp	r3, #5
 8001208:	d136      	bne.n	8001278 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0216 	bic.w	r2, r2, #22
 8001218:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	695a      	ldr	r2, [r3, #20]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001228:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122e:	2b00      	cmp	r3, #0
 8001230:	d103      	bne.n	800123a <HAL_DMA_IRQHandler+0x1da>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001236:	2b00      	cmp	r3, #0
 8001238:	d007      	beq.n	800124a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f022 0208 	bic.w	r2, r2, #8
 8001248:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800124e:	223f      	movs	r2, #63	@ 0x3f
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800126a:	2b00      	cmp	r3, #0
 800126c:	d07e      	beq.n	800136c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
        }
        return;
 8001276:	e079      	b.n	800136c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01d      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10d      	bne.n	80012b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001298:	2b00      	cmp	r3, #0
 800129a:	d031      	beq.n	8001300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	4798      	blx	r3
 80012a4:	e02c      	b.n	8001300 <HAL_DMA_IRQHandler+0x2a0>
 80012a6:	bf00      	nop
 80012a8:	20000000 	.word	0x20000000
 80012ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d023      	beq.n	8001300 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	4798      	blx	r3
 80012c0:	e01e      	b.n	8001300 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10f      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0210 	bic.w	r2, r2, #16
 80012de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	2b00      	cmp	r3, #0
 8001306:	d032      	beq.n	800136e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	2b00      	cmp	r3, #0
 8001312:	d022      	beq.n	800135a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2205      	movs	r2, #5
 8001318:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	3301      	adds	r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	429a      	cmp	r2, r3
 8001336:	d307      	bcc.n	8001348 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f2      	bne.n	800132c <HAL_DMA_IRQHandler+0x2cc>
 8001346:	e000      	b.n	800134a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001348:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2201      	movs	r2, #1
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135e:	2b00      	cmp	r3, #0
 8001360:	d005      	beq.n	800136e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	4798      	blx	r3
 800136a:	e000      	b.n	800136e <HAL_DMA_IRQHandler+0x30e>
        return;
 800136c:	bf00      	nop
    }
  }
}
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001382:	b2db      	uxtb	r3, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	3b10      	subs	r3, #16
 80013a0:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <DMA_CalcBaseAndBitshift+0x64>)
 80013a2:	fba2 2303 	umull	r2, r3, r2, r3
 80013a6:	091b      	lsrs	r3, r3, #4
 80013a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80013aa:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <DMA_CalcBaseAndBitshift+0x68>)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b03      	cmp	r3, #3
 80013bc:	d909      	bls.n	80013d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013c6:	f023 0303 	bic.w	r3, r3, #3
 80013ca:	1d1a      	adds	r2, r3, #4
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	659a      	str	r2, [r3, #88]	@ 0x58
 80013d0:	e007      	b.n	80013e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	aaaaaaab 	.word	0xaaaaaaab
 80013f8:	08004a64 	.word	0x08004a64

080013fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	699b      	ldr	r3, [r3, #24]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d11f      	bne.n	8001456 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2b03      	cmp	r3, #3
 800141a:	d856      	bhi.n	80014ca <DMA_CheckFifoParam+0xce>
 800141c:	a201      	add	r2, pc, #4	@ (adr r2, 8001424 <DMA_CheckFifoParam+0x28>)
 800141e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001422:	bf00      	nop
 8001424:	08001435 	.word	0x08001435
 8001428:	08001447 	.word	0x08001447
 800142c:	08001435 	.word	0x08001435
 8001430:	080014cb 	.word	0x080014cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001438:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d046      	beq.n	80014ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001444:	e043      	b.n	80014ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800144a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800144e:	d140      	bne.n	80014d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001454:	e03d      	b.n	80014d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800145e:	d121      	bne.n	80014a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	2b03      	cmp	r3, #3
 8001464:	d837      	bhi.n	80014d6 <DMA_CheckFifoParam+0xda>
 8001466:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <DMA_CheckFifoParam+0x70>)
 8001468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146c:	0800147d 	.word	0x0800147d
 8001470:	08001483 	.word	0x08001483
 8001474:	0800147d 	.word	0x0800147d
 8001478:	08001495 	.word	0x08001495
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
      break;
 8001480:	e030      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d025      	beq.n	80014da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001492:	e022      	b.n	80014da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001498:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800149c:	d11f      	bne.n	80014de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80014a2:	e01c      	b.n	80014de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d903      	bls.n	80014b2 <DMA_CheckFifoParam+0xb6>
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d003      	beq.n	80014b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80014b0:	e018      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
      break;
 80014b6:	e015      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00e      	beq.n	80014e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
      break;
 80014c8:	e00b      	b.n	80014e2 <DMA_CheckFifoParam+0xe6>
      break;
 80014ca:	bf00      	nop
 80014cc:	e00a      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;
 80014ce:	bf00      	nop
 80014d0:	e008      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;
 80014d2:	bf00      	nop
 80014d4:	e006      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;
 80014d6:	bf00      	nop
 80014d8:	e004      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;
 80014da:	bf00      	nop
 80014dc:	e002      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80014de:	bf00      	nop
 80014e0:	e000      	b.n	80014e4 <DMA_CheckFifoParam+0xe8>
      break;
 80014e2:	bf00      	nop
    }
  } 
  
  return status; 
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e165      	b.n	80017dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8154 	bne.w	80017d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80ae 	beq.w	80017d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b5d      	ldr	r3, [pc, #372]	@ (80017f4 <HAL_GPIO_Init+0x300>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a5c      	ldr	r2, [pc, #368]	@ (80017f4 <HAL_GPIO_Init+0x300>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b5a      	ldr	r3, [pc, #360]	@ (80017f4 <HAL_GPIO_Init+0x300>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a58      	ldr	r2, [pc, #352]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a4f      	ldr	r2, [pc, #316]	@ (80017fc <HAL_GPIO_Init+0x308>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x21a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <HAL_GPIO_Init+0x30c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x216>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <HAL_GPIO_Init+0x310>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x212>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001808 <HAL_GPIO_Init+0x314>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4b      	ldr	r2, [pc, #300]	@ (800180c <HAL_GPIO_Init+0x318>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x20a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001810 <HAL_GPIO_Init+0x31c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x206>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a49      	ldr	r2, [pc, #292]	@ (8001814 <HAL_GPIO_Init+0x320>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x202>
 80016f2:	2306      	movs	r3, #6
 80016f4:	e00c      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016f6:	2307      	movs	r3, #7
 80016f8:	e00a      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016fa:	2305      	movs	r3, #5
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 80016fe:	2304      	movs	r3, #4
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 8001702:	2303      	movs	r3, #3
 8001704:	e004      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 8001706:	2302      	movs	r3, #2
 8001708:	e002      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 800170a:	2301      	movs	r3, #1
 800170c:	e000      	b.n	8001710 <HAL_GPIO_Init+0x21c>
 800170e:	2300      	movs	r3, #0
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	f002 0203 	and.w	r2, r2, #3
 8001716:	0092      	lsls	r2, r2, #2
 8001718:	4093      	lsls	r3, r2
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001720:	4935      	ldr	r1, [pc, #212]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	089b      	lsrs	r3, r3, #2
 8001726:	3302      	adds	r3, #2
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <HAL_GPIO_Init+0x324>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001752:	4a31      	ldr	r2, [pc, #196]	@ (8001818 <HAL_GPIO_Init+0x324>)
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001758:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_GPIO_Init+0x324>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800177c:	4a26      	ldr	r2, [pc, #152]	@ (8001818 <HAL_GPIO_Init+0x324>)
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001782:	4b25      	ldr	r3, [pc, #148]	@ (8001818 <HAL_GPIO_Init+0x324>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001818 <HAL_GPIO_Init+0x324>)
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001818 <HAL_GPIO_Init+0x324>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d0:	4a11      	ldr	r2, [pc, #68]	@ (8001818 <HAL_GPIO_Init+0x324>)
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3301      	adds	r3, #1
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b0f      	cmp	r3, #15
 80017e0:	f67f ae96 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3724      	adds	r7, #36	@ 0x24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40013800 	.word	0x40013800
 80017fc:	40020000 	.word	0x40020000
 8001800:	40020400 	.word	0x40020400
 8001804:	40020800 	.word	0x40020800
 8001808:	40020c00 	.word	0x40020c00
 800180c:	40021000 	.word	0x40021000
 8001810:	40021400 	.word	0x40021400
 8001814:	40021800 	.word	0x40021800
 8001818:	40013c00 	.word	0x40013c00

0800181c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	460b      	mov	r3, r1
 8001826:	807b      	strh	r3, [r7, #2]
 8001828:	4613      	mov	r3, r2
 800182a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800182c:	787b      	ldrb	r3, [r7, #1]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001832:	887a      	ldrh	r2, [r7, #2]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001838:	e003      	b.n	8001842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800183a:	887b      	ldrh	r3, [r7, #2]
 800183c:	041a      	lsls	r2, r3, #16
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	041a      	lsls	r2, r3, #16
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43d9      	mvns	r1, r3
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	400b      	ands	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
	...

08001884 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e12b      	b.n	8001aee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d106      	bne.n	80018b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff f804 	bl	80008b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2224      	movs	r2, #36	@ 0x24
 80018b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f022 0201 	bic.w	r2, r2, #1
 80018c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e8:	f001 ff76 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80018ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a81      	ldr	r2, [pc, #516]	@ (8001af8 <HAL_I2C_Init+0x274>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d807      	bhi.n	8001908 <HAL_I2C_Init+0x84>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4a80      	ldr	r2, [pc, #512]	@ (8001afc <HAL_I2C_Init+0x278>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	bf94      	ite	ls
 8001900:	2301      	movls	r3, #1
 8001902:	2300      	movhi	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	e006      	b.n	8001916 <HAL_I2C_Init+0x92>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b00 <HAL_I2C_Init+0x27c>)
 800190c:	4293      	cmp	r3, r2
 800190e:	bf94      	ite	ls
 8001910:	2301      	movls	r3, #1
 8001912:	2300      	movhi	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e0e7      	b.n	8001aee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a78      	ldr	r2, [pc, #480]	@ (8001b04 <HAL_I2C_Init+0x280>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9b      	lsrs	r3, r3, #18
 8001928:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	430a      	orrs	r2, r1
 800193c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	4a6a      	ldr	r2, [pc, #424]	@ (8001af8 <HAL_I2C_Init+0x274>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d802      	bhi.n	8001958 <HAL_I2C_Init+0xd4>
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	3301      	adds	r3, #1
 8001956:	e009      	b.n	800196c <HAL_I2C_Init+0xe8>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a69      	ldr	r2, [pc, #420]	@ (8001b08 <HAL_I2C_Init+0x284>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	099b      	lsrs	r3, r3, #6
 800196a:	3301      	adds	r3, #1
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6812      	ldr	r2, [r2, #0]
 8001970:	430b      	orrs	r3, r1
 8001972:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800197e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	495c      	ldr	r1, [pc, #368]	@ (8001af8 <HAL_I2C_Init+0x274>)
 8001988:	428b      	cmp	r3, r1
 800198a:	d819      	bhi.n	80019c0 <HAL_I2C_Init+0x13c>
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1e59      	subs	r1, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	fbb1 f3f3 	udiv	r3, r1, r3
 800199a:	1c59      	adds	r1, r3, #1
 800199c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80019a0:	400b      	ands	r3, r1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00a      	beq.n	80019bc <HAL_I2C_Init+0x138>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e59      	subs	r1, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019b4:	3301      	adds	r3, #1
 80019b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019ba:	e051      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 80019bc:	2304      	movs	r3, #4
 80019be:	e04f      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d111      	bne.n	80019ec <HAL_I2C_Init+0x168>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	e012      	b.n	8001a12 <HAL_I2C_Init+0x18e>
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1e58      	subs	r0, r3, #1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6859      	ldr	r1, [r3, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	0099      	lsls	r1, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a02:	3301      	adds	r3, #1
 8001a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <HAL_I2C_Init+0x196>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e022      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10e      	bne.n	8001a40 <HAL_I2C_Init+0x1bc>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1e58      	subs	r0, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6859      	ldr	r1, [r3, #4]
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	440b      	add	r3, r1
 8001a30:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a34:	3301      	adds	r3, #1
 8001a36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a3e:	e00f      	b.n	8001a60 <HAL_I2C_Init+0x1dc>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	1e58      	subs	r0, r3, #1
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6859      	ldr	r1, [r3, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	0099      	lsls	r1, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a56:	3301      	adds	r3, #1
 8001a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	6809      	ldr	r1, [r1, #0]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6911      	ldr	r1, [r2, #16]
 8001a96:	687a      	ldr	r2, [r7, #4]
 8001a98:	68d2      	ldr	r2, [r2, #12]
 8001a9a:	4311      	orrs	r1, r2
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695a      	ldr	r2, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	000186a0 	.word	0x000186a0
 8001afc:	001e847f 	.word	0x001e847f
 8001b00:	003d08ff 	.word	0x003d08ff
 8001b04:	431bde83 	.word	0x431bde83
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b1e:	2b80      	cmp	r3, #128	@ 0x80
 8001b20:	d103      	bne.n	8001b2a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	4613      	mov	r3, r2
 8001b44:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b20      	cmp	r3, #32
 8001b50:	d158      	bne.n	8001c04 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <HAL_I2C_Slave_Receive_IT+0x26>
 8001b58:	88fb      	ldrh	r3, [r7, #6]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e051      	b.n	8001c06 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d101      	bne.n	8001b70 <HAL_I2C_Slave_Receive_IT+0x38>
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e04a      	b.n	8001c06 <HAL_I2C_Slave_Receive_IT+0xce>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d007      	beq.n	8001b96 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ba4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2222      	movs	r2, #34	@ 0x22
 8001baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	88fa      	ldrh	r2, [r7, #6]
 8001bc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <HAL_I2C_Slave_Receive_IT+0xdc>)
 8001bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001be6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8001bfe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	ffff0000 	.word	0xffff0000

08001c18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c30:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c38:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c40:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d003      	beq.n	8001c50 <HAL_I2C_EV_IRQHandler+0x38>
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	2b40      	cmp	r3, #64	@ 0x40
 8001c4c:	f040 80c1 	bne.w	8001dd2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10d      	bne.n	8001c86 <HAL_I2C_EV_IRQHandler+0x6e>
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8001c70:	d003      	beq.n	8001c7a <HAL_I2C_EV_IRQHandler+0x62>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8001c78:	d101      	bne.n	8001c7e <HAL_I2C_EV_IRQHandler+0x66>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_I2C_EV_IRQHandler+0x68>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f000 8132 	beq.w	8001eea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d00c      	beq.n	8001caa <HAL_I2C_EV_IRQHandler+0x92>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	0a5b      	lsrs	r3, r3, #9
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d006      	beq.n	8001caa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f001 fc8d 	bl	80035bc <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fd91 	bl	80027ca <I2C_Master_SB>
 8001ca8:	e092      	b.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	08db      	lsrs	r3, r3, #3
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_I2C_EV_IRQHandler+0xb2>
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	0a5b      	lsrs	r3, r3, #9
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fe07 	bl	80028d6 <I2C_Master_ADD10>
 8001cc8:	e082      	b.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_I2C_EV_IRQHandler+0xd2>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	0a5b      	lsrs	r3, r3, #9
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fe21 	bl	800292a <I2C_Master_ADDR>
 8001ce8:	e072      	b.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d03b      	beq.n	8001d6e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d04:	f000 80f3 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	09db      	lsrs	r3, r3, #7
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00f      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d103      	bne.n	8001d34 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f9e9 	bl	8002104 <I2C_MasterTransmit_TXE>
 8001d32:	e04d      	b.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 80d6 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	0a5b      	lsrs	r3, r3, #9
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80cf 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	2b21      	cmp	r3, #33	@ 0x21
 8001d54:	d103      	bne.n	8001d5e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 fa70 	bl	800223c <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d5c:	e0c7      	b.n	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	2b40      	cmp	r3, #64	@ 0x40
 8001d62:	f040 80c4 	bne.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 fade 	bl	8002328 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d6c:	e0bf      	b.n	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001d7c:	f000 80b7 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	099b      	lsrs	r3, r3, #6
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d00f      	beq.n	8001dac <HAL_I2C_EV_IRQHandler+0x194>
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	0a9b      	lsrs	r3, r3, #10
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d009      	beq.n	8001dac <HAL_I2C_EV_IRQHandler+0x194>
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d103      	bne.n	8001dac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 fb57 	bl	8002458 <I2C_MasterReceive_RXNE>
 8001daa:	e011      	b.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 809a 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	0a5b      	lsrs	r3, r3, #9
 8001dbe:	f003 0301 	and.w	r3, r3, #1
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8093 	beq.w	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fc0d 	bl	80025e8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dce:	e08e      	b.n	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dd0:	e08d      	b.n	8001eee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695b      	ldr	r3, [r3, #20]
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	e007      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	085b      	lsrs	r3, r3, #1
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <HAL_I2C_EV_IRQHandler+0x20e>
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	0a5b      	lsrs	r3, r3, #9
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00c      	beq.n	8001e26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e1c:	69b9      	ldr	r1, [r7, #24]
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 ffd2 	bl	8002dc8 <I2C_Slave_ADDR>
 8001e24:	e066      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d009      	beq.n	8001e46 <HAL_I2C_EV_IRQHandler+0x22e>
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	0a5b      	lsrs	r3, r3, #9
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 f80c 	bl	8002e5c <I2C_Slave_STOPF>
 8001e44:	e056      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e46:	7bbb      	ldrb	r3, [r7, #14]
 8001e48:	2b21      	cmp	r3, #33	@ 0x21
 8001e4a:	d002      	beq.n	8001e52 <HAL_I2C_EV_IRQHandler+0x23a>
 8001e4c:	7bbb      	ldrb	r3, [r7, #14]
 8001e4e:	2b29      	cmp	r3, #41	@ 0x29
 8001e50:	d125      	bne.n	8001e9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	09db      	lsrs	r3, r3, #7
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00f      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0x266>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	0a9b      	lsrs	r3, r3, #10
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_I2C_EV_IRQHandler+0x266>
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 fee8 	bl	8002c4c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e7c:	e039      	b.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d033      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x2da>
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	0a5b      	lsrs	r3, r3, #9
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d02d      	beq.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 ff15 	bl	8002cc6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9c:	e029      	b.n	8001ef2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	099b      	lsrs	r3, r3, #6
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00f      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x2b2>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	0a9b      	lsrs	r3, r3, #10
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d009      	beq.n	8001eca <HAL_I2C_EV_IRQHandler+0x2b2>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	089b      	lsrs	r3, r3, #2
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d103      	bne.n	8001eca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 ff20 	bl	8002d08 <I2C_SlaveReceive_RXNE>
 8001ec8:	e014      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00e      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	0a5b      	lsrs	r3, r3, #9
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d008      	beq.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 ff4e 	bl	8002d84 <I2C_SlaveReceive_BTF>
 8001ee8:	e004      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001eea:	bf00      	nop
 8001eec:	e002      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ef2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001ef4:	3720      	adds	r7, #32
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b08a      	sub	sp, #40	@ 0x28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f1e:	6a3b      	ldr	r3, [r7, #32]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00e      	beq.n	8001f48 <HAL_I2C_ER_IRQHandler+0x4e>
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	0a1b      	lsrs	r3, r3, #8
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d008      	beq.n	8001f48 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	0a5b      	lsrs	r3, r3, #9
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00e      	beq.n	8001f72 <HAL_I2C_ER_IRQHandler+0x78>
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8001f70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	0a9b      	lsrs	r3, r3, #10
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d03f      	beq.n	8001ffe <HAL_I2C_ER_IRQHandler+0x104>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	0a1b      	lsrs	r3, r3, #8
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d039      	beq.n	8001ffe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001f8a:	7efb      	ldrb	r3, [r7, #27]
 8001f8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fa4:	7ebb      	ldrb	r3, [r7, #26]
 8001fa6:	2b20      	cmp	r3, #32
 8001fa8:	d112      	bne.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10f      	bne.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fb0:	7cfb      	ldrb	r3, [r7, #19]
 8001fb2:	2b21      	cmp	r3, #33	@ 0x21
 8001fb4:	d008      	beq.n	8001fc8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001fb6:	7cfb      	ldrb	r3, [r7, #19]
 8001fb8:	2b29      	cmp	r3, #41	@ 0x29
 8001fba:	d005      	beq.n	8001fc8 <HAL_I2C_ER_IRQHandler+0xce>
 8001fbc:	7cfb      	ldrb	r3, [r7, #19]
 8001fbe:	2b28      	cmp	r3, #40	@ 0x28
 8001fc0:	d106      	bne.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b21      	cmp	r3, #33	@ 0x21
 8001fc6:	d103      	bne.n	8001fd0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f001 f877 	bl	80030bc <I2C_Slave_AF>
 8001fce:	e016      	b.n	8001ffe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001fd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001fe2:	7efb      	ldrb	r3, [r7, #27]
 8001fe4:	2b10      	cmp	r3, #16
 8001fe6:	d002      	beq.n	8001fee <HAL_I2C_ER_IRQHandler+0xf4>
 8001fe8:	7efb      	ldrb	r3, [r7, #27]
 8001fea:	2b40      	cmp	r3, #64	@ 0x40
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ffc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	0adb      	lsrs	r3, r3, #11
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00e      	beq.n	8002028 <HAL_I2C_ER_IRQHandler+0x12e>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8002026:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f001 f8b2 	bl	80031a4 <I2C_ITError>
  }
}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	70fb      	strb	r3, [r7, #3]
 8002090:	4613      	mov	r3, r2
 8002092:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002112:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800211a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002120:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002126:	2b00      	cmp	r3, #0
 8002128:	d150      	bne.n	80021cc <I2C_MasterTransmit_TXE+0xc8>
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b21      	cmp	r3, #33	@ 0x21
 800212e:	d14d      	bne.n	80021cc <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d01d      	beq.n	8002172 <I2C_MasterTransmit_TXE+0x6e>
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	2b20      	cmp	r3, #32
 800213a:	d01a      	beq.n	8002172 <I2C_MasterTransmit_TXE+0x6e>
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002142:	d016      	beq.n	8002172 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	685a      	ldr	r2, [r3, #4]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002152:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2211      	movs	r2, #17
 8002158:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2200      	movs	r2, #0
 800215e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff6c 	bl	8002048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002170:	e060      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002180:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002190:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	2b40      	cmp	r3, #64	@ 0x40
 80021aa:	d107      	bne.n	80021bc <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff7d 	bl	80020b4 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021ba:	e03b      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff ff3f 	bl	8002048 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021ca:	e033      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	2b21      	cmp	r3, #33	@ 0x21
 80021d0:	d005      	beq.n	80021de <I2C_MasterTransmit_TXE+0xda>
 80021d2:	7bbb      	ldrb	r3, [r7, #14]
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	d12d      	bne.n	8002234 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80021d8:	7bfb      	ldrb	r3, [r7, #15]
 80021da:	2b22      	cmp	r3, #34	@ 0x22
 80021dc:	d12a      	bne.n	8002234 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80021f6:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80021f8:	e01c      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b40      	cmp	r3, #64	@ 0x40
 8002204:	d103      	bne.n	800220e <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f88e 	bl	8002328 <I2C_MemoryTransmit_TXE_BTF>
}
 800220c:	e012      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	781a      	ldrb	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002232:	e7ff      	b.n	8002234 <I2C_MasterTransmit_TXE+0x130>
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002248:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b21      	cmp	r3, #33	@ 0x21
 8002254:	d164      	bne.n	8002320 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225a:	b29b      	uxth	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d012      	beq.n	8002286 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	781a      	ldrb	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002284:	e04c      	b.n	8002320 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d01d      	beq.n	80022c8 <I2C_MasterTransmit_BTF+0x8c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b20      	cmp	r3, #32
 8002290:	d01a      	beq.n	80022c8 <I2C_MasterTransmit_BTF+0x8c>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002298:	d016      	beq.n	80022c8 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022a8:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2211      	movs	r2, #17
 80022ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff fec1 	bl	8002048 <HAL_I2C_MasterTxCpltCallback>
}
 80022c6:	e02b      	b.n	8002320 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80022d6:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2220      	movs	r2, #32
 80022f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b40      	cmp	r3, #64	@ 0x40
 8002300:	d107      	bne.n	8002312 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fed2 	bl	80020b4 <HAL_I2C_MemTxCpltCallback>
}
 8002310:	e006      	b.n	8002320 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7ff fe94 	bl	8002048 <HAL_I2C_MasterTxCpltCallback>
}
 8002320:	bf00      	nop
 8002322:	3710      	adds	r7, #16
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002336:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800233c:	2b00      	cmp	r3, #0
 800233e:	d11d      	bne.n	800237c <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d10b      	bne.n	8002360 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234c:	b2da      	uxtb	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800235e:	e077      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002364:	b29b      	uxth	r3, r3
 8002366:	121b      	asrs	r3, r3, #8
 8002368:	b2da      	uxtb	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800237a:	e069      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002380:	2b01      	cmp	r3, #1
 8002382:	d10b      	bne.n	800239c <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800239a:	e059      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d152      	bne.n	800244a <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b22      	cmp	r3, #34	@ 0x22
 80023a8:	d10d      	bne.n	80023c6 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023b8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023be:	1c5a      	adds	r2, r3, #1
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80023c4:	e044      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d015      	beq.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	2b21      	cmp	r3, #33	@ 0x21
 80023d4:	d112      	bne.n	80023fc <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80023fa:	e029      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002400:	b29b      	uxth	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d124      	bne.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	2b21      	cmp	r3, #33	@ 0x21
 800240a:	d121      	bne.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800241a:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800242a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f7ff fe36 	bl	80020b4 <HAL_I2C_MemTxCpltCallback>
}
 8002448:	e002      	b.n	8002450 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fb5e 	bl	8001b0c <I2C_Flush_DR>
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b22      	cmp	r3, #34	@ 0x22
 800246a:	f040 80b9 	bne.w	80025e0 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b03      	cmp	r3, #3
 8002480:	d921      	bls.n	80024c6 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	f040 8096 	bne.w	80025e0 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c2:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80024c4:	e08c      	b.n	80025e0 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d07f      	beq.n	80025ce <I2C_MasterReceive_RXNE+0x176>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d002      	beq.n	80024da <I2C_MasterReceive_RXNE+0x82>
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d179      	bne.n	80025ce <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f001 f83c 	bl	8003558 <I2C_WaitOnSTOPRequestThroughIT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d14c      	bne.n	8002580 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024f4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002504:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002510:	b2d2      	uxtb	r2, r2
 8002512:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002522:	b29b      	uxth	r3, r3
 8002524:	3b01      	subs	r3, #1
 8002526:	b29a      	uxth	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b40      	cmp	r3, #64	@ 0x40
 800253e:	d10a      	bne.n	8002556 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7ff fdba 	bl	80020c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002554:	e044      	b.n	80025e0 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d002      	beq.n	800256a <I2C_MasterReceive_RXNE+0x112>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2b20      	cmp	r3, #32
 8002568:	d103      	bne.n	8002572 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002570:	e002      	b.n	8002578 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2212      	movs	r2, #18
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fd6f 	bl	800205c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800257e:	e02f      	b.n	80025e0 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800258e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691a      	ldr	r2, [r3, #16]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a2:	1c5a      	adds	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fd88 	bl	80020dc <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025cc:	e008      	b.n	80025e0 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025dc:	605a      	str	r2, [r3, #4]
}
 80025de:	e7ff      	b.n	80025e0 <I2C_MasterReceive_RXNE+0x188>
 80025e0:	bf00      	nop
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d11b      	bne.n	8002638 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800260e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002636:	e0c4      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b03      	cmp	r3, #3
 8002640:	d129      	bne.n	8002696 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002650:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2b04      	cmp	r3, #4
 8002656:	d00a      	beq.n	800266e <I2C_MasterReceive_BTF+0x86>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d007      	beq.n	800266e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800266c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8002694:	e095      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d17d      	bne.n	800279c <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d002      	beq.n	80026ac <I2C_MasterReceive_BTF+0xc4>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d108      	bne.n	80026be <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	e016      	b.n	80026ec <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d002      	beq.n	80026ca <I2C_MasterReceive_BTF+0xe2>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d108      	bne.n	80026dc <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e007      	b.n	80026ec <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691a      	ldr	r2, [r3, #16]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	3b01      	subs	r3, #1
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002724:	1c5a      	adds	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800272e:	b29b      	uxth	r3, r3
 8002730:	3b01      	subs	r3, #1
 8002732:	b29a      	uxth	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002746:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b40      	cmp	r3, #64	@ 0x40
 800275a:	d10a      	bne.n	8002772 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff fcac 	bl	80020c8 <HAL_I2C_MemRxCpltCallback>
}
 8002770:	e027      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b08      	cmp	r3, #8
 800277e:	d002      	beq.n	8002786 <I2C_MasterReceive_BTF+0x19e>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b20      	cmp	r3, #32
 8002784:	d103      	bne.n	800278e <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	631a      	str	r2, [r3, #48]	@ 0x30
 800278c:	e002      	b.n	8002794 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2212      	movs	r2, #18
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff fc61 	bl	800205c <HAL_I2C_MasterRxCpltCallback>
}
 800279a:	e012      	b.n	80027c2 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691a      	ldr	r2, [r3, #16]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a6:	b2d2      	uxtb	r2, r2
 80027a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d117      	bne.n	800280e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80027f8:	e067      	b.n	80028ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	611a      	str	r2, [r3, #16]
}
 800280c:	e05d      	b.n	80028ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002816:	d133      	bne.n	8002880 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b21      	cmp	r3, #33	@ 0x21
 8002822:	d109      	bne.n	8002838 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	e008      	b.n	800284a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	b2da      	uxtb	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800284e:	2b00      	cmp	r3, #0
 8002850:	d004      	beq.n	800285c <I2C_Master_SB+0x92>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d032      	beq.n	80028ca <I2C_Master_SB+0x100>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286a:	2b00      	cmp	r3, #0
 800286c:	d02d      	beq.n	80028ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800287c:	605a      	str	r2, [r3, #4]
}
 800287e:	e024      	b.n	80028ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10e      	bne.n	80028a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288c:	b29b      	uxth	r3, r3
 800288e:	11db      	asrs	r3, r3, #7
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0306 	and.w	r3, r3, #6
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f063 030f 	orn	r3, r3, #15
 800289c:	b2da      	uxtb	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	611a      	str	r2, [r3, #16]
}
 80028a4:	e011      	b.n	80028ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d10d      	bne.n	80028ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	11db      	asrs	r3, r3, #7
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	f003 0306 	and.w	r3, r3, #6
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	f063 030e 	orn	r3, r3, #14
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	611a      	str	r2, [r3, #16]
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr

080028d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d004      	beq.n	80028fc <I2C_Master_ADD10+0x26>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d108      	bne.n	800290e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00c      	beq.n	800291e <I2C_Master_ADD10+0x48>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800291c:	605a      	str	r2, [r3, #4]
  }
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800292a:	b480      	push	{r7}
 800292c:	b091      	sub	sp, #68	@ 0x44
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002938:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b22      	cmp	r3, #34	@ 0x22
 8002952:	f040 8169 	bne.w	8002c28 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <I2C_Master_ADDR+0x54>
 800295e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8002962:	2b40      	cmp	r3, #64	@ 0x40
 8002964:	d10b      	bne.n	800297e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	633b      	str	r3, [r7, #48]	@ 0x30
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	633b      	str	r3, [r7, #48]	@ 0x30
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	633b      	str	r3, [r7, #48]	@ 0x30
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	e160      	b.n	8002c40 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11d      	bne.n	80029c2 <I2C_Master_ADDR+0x98>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800298e:	d118      	bne.n	80029c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002990:	2300      	movs	r3, #0
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	651a      	str	r2, [r3, #80]	@ 0x50
 80029c0:	e13e      	b.n	8002c40 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d113      	bne.n	80029f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029cc:	2300      	movs	r3, #0
 80029ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	699b      	ldr	r3, [r3, #24]
 80029de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e115      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	f040 808a 	bne.w	8002b14 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a02:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a06:	d137      	bne.n	8002a78 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a16:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a26:	d113      	bne.n	8002a50 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a36:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4e:	e0e7      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a50:	2300      	movs	r3, #0
 8002a52:	623b      	str	r3, [r7, #32]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	e0d3      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d02e      	beq.n	8002adc <I2C_Master_ADDR+0x1b2>
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	d02b      	beq.n	8002adc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a86:	2b12      	cmp	r3, #18
 8002a88:	d102      	bne.n	8002a90 <I2C_Master_ADDR+0x166>
 8002a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d125      	bne.n	8002adc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d00e      	beq.n	8002ab4 <I2C_Master_ADDR+0x18a>
 8002a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d00b      	beq.n	8002ab4 <I2C_Master_ADDR+0x18a>
 8002a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d008      	beq.n	8002ab4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ac2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	e0a1      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002aea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aec:	2300      	movs	r3, #0
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	e085      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d14d      	bne.n	8002bba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d016      	beq.n	8002b52 <I2C_Master_ADDR+0x228>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d013      	beq.n	8002b52 <I2C_Master_ADDR+0x228>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d010      	beq.n	8002b52 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e007      	b.n	8002b62 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b60:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002b70:	d117      	bne.n	8002ba2 <I2C_Master_ADDR+0x278>
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002b78:	d00b      	beq.n	8002b92 <I2C_Master_ADDR+0x268>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d008      	beq.n	8002b92 <I2C_Master_ADDR+0x268>
 8002b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b82:	2b08      	cmp	r3, #8
 8002b84:	d005      	beq.n	8002b92 <I2C_Master_ADDR+0x268>
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d002      	beq.n	8002b92 <I2C_Master_ADDR+0x268>
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d107      	bne.n	8002ba2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002ba0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	e032      	b.n	8002c20 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bc8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd8:	d117      	bne.n	8002c0a <I2C_Master_ADDR+0x2e0>
 8002bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002be0:	d00b      	beq.n	8002bfa <I2C_Master_ADDR+0x2d0>
 8002be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d008      	beq.n	8002bfa <I2C_Master_ADDR+0x2d0>
 8002be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d005      	beq.n	8002bfa <I2C_Master_ADDR+0x2d0>
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2b10      	cmp	r3, #16
 8002bf2:	d002      	beq.n	8002bfa <I2C_Master_ADDR+0x2d0>
 8002bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d107      	bne.n	8002c0a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c08:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c26:	e00b      	b.n	8002c40 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695b      	ldr	r3, [r3, #20]
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699b      	ldr	r3, [r3, #24]
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
}
 8002c3e:	e7ff      	b.n	8002c40 <I2C_Master_ADDR+0x316>
 8002c40:	bf00      	nop
 8002c42:	3744      	adds	r7, #68	@ 0x44
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d02b      	beq.n	8002cbe <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	3b01      	subs	r3, #1
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d114      	bne.n	8002cbe <I2C_SlaveTransmit_TXE+0x72>
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	2b29      	cmp	r3, #41	@ 0x29
 8002c98:	d111      	bne.n	8002cbe <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	685a      	ldr	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2221      	movs	r2, #33	@ 0x21
 8002cae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2228      	movs	r2, #40	@ 0x28
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff f9d9 	bl	8002070 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d011      	beq.n	8002cfc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d16:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d02c      	beq.n	8002d7c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d114      	bne.n	8002d7c <I2C_SlaveReceive_RXNE+0x74>
 8002d52:	7bfb      	ldrb	r3, [r7, #15]
 8002d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d56:	d111      	bne.n	8002d7c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2222      	movs	r2, #34	@ 0x22
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2228      	movs	r2, #40	@ 0x28
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fd fd4a 	bl	8000810 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d012      	beq.n	8002dbc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002de2:	2b28      	cmp	r3, #40	@ 0x28
 8002de4:	d127      	bne.n	8002e36 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002df4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	09db      	lsrs	r3, r3, #7
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	81bb      	strh	r3, [r7, #12]
 8002e18:	e002      	b.n	8002e20 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e28:	89ba      	ldrh	r2, [r7, #12]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f928 	bl	8002084 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e34:	e00e      	b.n	8002e54 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8002e54:	bf00      	nop
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e6a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002e7a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ea8:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002eb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb8:	d172      	bne.n	8002fa0 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
 8002ebc:	2b22      	cmp	r3, #34	@ 0x22
 8002ebe:	d002      	beq.n	8002ec6 <I2C_Slave_STOPF+0x6a>
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ec4:	d135      	bne.n	8002f32 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d005      	beq.n	8002eea <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f043 0204 	orr.w	r2, r3, #4
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ef8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fa38 	bl	8001374 <HAL_DMA_GetState>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d049      	beq.n	8002f9e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	4a69      	ldr	r2, [pc, #420]	@ (80030b4 <I2C_Slave_STOPF+0x258>)
 8002f10:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe f880 	bl	800101c <HAL_DMA_Abort_IT>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d03d      	beq.n	8002f9e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f30:	e035      	b.n	8002f9e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f043 0204 	orr.w	r2, r3, #4
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f64:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fa02 	bl	8001374 <HAL_DMA_GetState>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d014      	beq.n	8002fa0 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80030b4 <I2C_Slave_STOPF+0x258>)
 8002f7c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fe f84a 	bl	800101c <HAL_DMA_Abort_IT>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f98:	4610      	mov	r0, r2
 8002f9a:	4798      	blx	r3
 8002f9c:	e000      	b.n	8002fa0 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f9e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d03e      	beq.n	8003028 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d112      	bne.n	8002fde <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc2:	b2d2      	uxtb	r2, r2
 8002fc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fca:	1c5a      	adds	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe8:	2b40      	cmp	r3, #64	@ 0x40
 8002fea:	d112      	bne.n	8003012 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	691a      	ldr	r2, [r3, #16]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	b2d2      	uxtb	r2, r2
 8002ff8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003008:	b29b      	uxth	r3, r3
 800300a:	3b01      	subs	r3, #1
 800300c:	b29a      	uxth	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003020:	f043 0204 	orr.w	r2, r3, #4
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8b7 	bl	80031a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003036:	e039      	b.n	80030ac <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	2b2a      	cmp	r3, #42	@ 0x2a
 800303c:	d109      	bne.n	8003052 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2228      	movs	r2, #40	@ 0x28
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7fd fbdf 	bl	8000810 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b28      	cmp	r3, #40	@ 0x28
 800305c:	d111      	bne.n	8003082 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a15      	ldr	r2, [pc, #84]	@ (80030b8 <I2C_Slave_STOPF+0x25c>)
 8003062:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2220      	movs	r2, #32
 800306e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff f810 	bl	80020a0 <HAL_I2C_ListenCpltCallback>
}
 8003080:	e014      	b.n	80030ac <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003086:	2b22      	cmp	r3, #34	@ 0x22
 8003088:	d002      	beq.n	8003090 <I2C_Slave_STOPF+0x234>
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b22      	cmp	r3, #34	@ 0x22
 800308e:	d10d      	bne.n	80030ac <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fbb2 	bl	8000810 <HAL_I2C_SlaveRxCpltCallback>
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	08003409 	.word	0x08003409
 80030b8:	ffff0000 	.word	0xffff0000

080030bc <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ca:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d002      	beq.n	80030de <I2C_Slave_AF+0x22>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d129      	bne.n	8003132 <I2C_Slave_AF+0x76>
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	2b28      	cmp	r3, #40	@ 0x28
 80030e2:	d126      	bne.n	8003132 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2e      	ldr	r2, [pc, #184]	@ (80031a0 <I2C_Slave_AF+0xe4>)
 80030e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80030f8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003102:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003112:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe ffb8 	bl	80020a0 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003130:	e031      	b.n	8003196 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	2b21      	cmp	r3, #33	@ 0x21
 8003136:	d129      	bne.n	800318c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a19      	ldr	r2, [pc, #100]	@ (80031a0 <I2C_Slave_AF+0xe4>)
 800313c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2221      	movs	r2, #33	@ 0x21
 8003142:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003162:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800317c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fe fcc4 	bl	8001b0c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7fe ff73 	bl	8002070 <HAL_I2C_SlaveTxCpltCallback>
}
 800318a:	e004      	b.n	8003196 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003194:	615a      	str	r2, [r3, #20]
}
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d002      	beq.n	80031c8 <I2C_ITError+0x24>
 80031c2:	7bbb      	ldrb	r3, [r7, #14]
 80031c4:	2b40      	cmp	r3, #64	@ 0x40
 80031c6:	d10a      	bne.n	80031de <I2C_ITError+0x3a>
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b22      	cmp	r3, #34	@ 0x22
 80031cc:	d107      	bne.n	80031de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031e4:	2b28      	cmp	r3, #40	@ 0x28
 80031e6:	d107      	bne.n	80031f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2228      	movs	r2, #40	@ 0x28
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80031f6:	e015      	b.n	8003224 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003206:	d00a      	beq.n	800321e <I2C_ITError+0x7a>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b60      	cmp	r3, #96	@ 0x60
 800320c:	d007      	beq.n	800321e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003232:	d162      	bne.n	80032fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003242:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d020      	beq.n	8003294 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	4a6a      	ldr	r2, [pc, #424]	@ (8003400 <I2C_ITError+0x25c>)
 8003258:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd fedc 	bl	800101c <HAL_DMA_Abort_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8089 	beq.w	800337e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800328e:	4610      	mov	r0, r2
 8003290:	4798      	blx	r3
 8003292:	e074      	b.n	800337e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003298:	4a59      	ldr	r2, [pc, #356]	@ (8003400 <I2C_ITError+0x25c>)
 800329a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd febb 	bl	800101c <HAL_DMA_Abort_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d068      	beq.n	800337e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032b6:	2b40      	cmp	r3, #64	@ 0x40
 80032b8:	d10b      	bne.n	80032d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032f4:	4610      	mov	r0, r2
 80032f6:	4798      	blx	r3
 80032f8:	e041      	b.n	800337e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b60      	cmp	r3, #96	@ 0x60
 8003304:	d125      	bne.n	8003352 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800331e:	2b40      	cmp	r3, #64	@ 0x40
 8003320:	d10b      	bne.n	800333a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe fed0 	bl	80020f0 <HAL_I2C_AbortCpltCallback>
 8003350:	e015      	b.n	800337e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800335c:	2b40      	cmp	r3, #64	@ 0x40
 800335e:	d10b      	bne.n	8003378 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe feaf 	bl	80020dc <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003382:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d113      	bne.n	80033f8 <I2C_ITError+0x254>
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b28      	cmp	r3, #40	@ 0x28
 80033d4:	d110      	bne.n	80033f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <I2C_ITError+0x260>)
 80033da:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fe54 	bl	80020a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	08003409 	.word	0x08003409
 8003404:	ffff0000 	.word	0xffff0000

08003408 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003420:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003422:	4b4b      	ldr	r3, [pc, #300]	@ (8003550 <I2C_DMAAbort+0x148>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	4a4a      	ldr	r2, [pc, #296]	@ (8003554 <I2C_DMAAbort+0x14c>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a1a      	lsrs	r2, r3, #8
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d106      	bne.n	8003450 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800344e:	e00a      	b.n	8003466 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3b01      	subs	r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003464:	d0ea      	beq.n	800343c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003472:	2200      	movs	r2, #0
 8003474:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003482:	2200      	movs	r2, #0
 8003484:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003494:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2200      	movs	r2, #0
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034a8:	2200      	movs	r2, #0
 80034aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b8:	2200      	movs	r2, #0
 80034ba:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 0201 	bic.w	r2, r2, #1
 80034ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b60      	cmp	r3, #96	@ 0x60
 80034d6:	d10e      	bne.n	80034f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2200      	movs	r2, #0
 80034ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f7fe fdfe 	bl	80020f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034f4:	e027      	b.n	8003546 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034f6:	7cfb      	ldrb	r3, [r7, #19]
 80034f8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80034fc:	2b28      	cmp	r3, #40	@ 0x28
 80034fe:	d117      	bne.n	8003530 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800351e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2200      	movs	r2, #0
 8003524:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2228      	movs	r2, #40	@ 0x28
 800352a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800352e:	e007      	b.n	8003540 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003540:	6978      	ldr	r0, [r7, #20]
 8003542:	f7fe fdcb 	bl	80020dc <HAL_I2C_ErrorCallback>
}
 8003546:	bf00      	nop
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20000000 	.word	0x20000000
 8003554:	14f8b589 	.word	0x14f8b589

08003558 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003564:	4b13      	ldr	r3, [pc, #76]	@ (80035b4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	4a13      	ldr	r2, [pc, #76]	@ (80035b8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	0a1a      	lsrs	r2, r3, #8
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3b01      	subs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d107      	bne.n	8003596 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	f043 0220 	orr.w	r2, r3, #32
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e008      	b.n	80035a8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a4:	d0e9      	beq.n	800357a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	20000000 	.word	0x20000000
 80035b8:	14f8b589 	.word	0x14f8b589

080035bc <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80035cc:	d103      	bne.n	80035d6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80035d4:	e007      	b.n	80035e6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80035de:	d102      	bne.n	80035e6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2208      	movs	r2, #8
 80035e4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80035e6:	bf00      	nop
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
	...

080035f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e0cc      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b68      	ldr	r3, [pc, #416]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d90c      	bls.n	8003630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b65      	ldr	r3, [pc, #404]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	4b63      	ldr	r3, [pc, #396]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 030f 	and.w	r3, r3, #15
 8003626:	683a      	ldr	r2, [r7, #0]
 8003628:	429a      	cmp	r2, r3
 800362a:	d001      	beq.n	8003630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0b8      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d020      	beq.n	800367e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d005      	beq.n	8003654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003648:	4b59      	ldr	r3, [pc, #356]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4a58      	ldr	r2, [pc, #352]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800364e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003652:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003660:	4b53      	ldr	r3, [pc, #332]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	4a52      	ldr	r2, [pc, #328]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003666:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800366a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800366c:	4b50      	ldr	r3, [pc, #320]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	494d      	ldr	r1, [pc, #308]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800367a:	4313      	orrs	r3, r2
 800367c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	2b00      	cmp	r3, #0
 8003688:	d044      	beq.n	8003714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d107      	bne.n	80036a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003692:	4b47      	ldr	r3, [pc, #284]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e07f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d003      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	d107      	bne.n	80036c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b2:	4b3f      	ldr	r3, [pc, #252]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d109      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c2:	4b3b      	ldr	r3, [pc, #236]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e067      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036d2:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f023 0203 	bic.w	r2, r3, #3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	4934      	ldr	r1, [pc, #208]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036e4:	f7fd faaa 	bl	8000c3c <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ea:	e00a      	b.n	8003702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ec:	f7fd faa6 	bl	8000c3c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e04f      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 020c 	and.w	r2, r3, #12
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	429a      	cmp	r2, r3
 8003712:	d1eb      	bne.n	80036ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003714:	4b25      	ldr	r3, [pc, #148]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d20c      	bcs.n	800373c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003722:	4b22      	ldr	r3, [pc, #136]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	b2d2      	uxtb	r2, r2
 8003728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800372a:	4b20      	ldr	r3, [pc, #128]	@ (80037ac <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e032      	b.n	80037a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003748:	4b19      	ldr	r3, [pc, #100]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4916      	ldr	r1, [pc, #88]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	d009      	beq.n	800377a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	490e      	ldr	r1, [pc, #56]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	4313      	orrs	r3, r2
 8003778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800377a:	f000 f855 	bl	8003828 <HAL_RCC_GetSysClockFreq>
 800377e:	4602      	mov	r2, r0
 8003780:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	490a      	ldr	r1, [pc, #40]	@ (80037b4 <HAL_RCC_ClockConfig+0x1c0>)
 800378c:	5ccb      	ldrb	r3, [r1, r3]
 800378e:	fa22 f303 	lsr.w	r3, r2, r3
 8003792:	4a09      	ldr	r2, [pc, #36]	@ (80037b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003796:	4b09      	ldr	r3, [pc, #36]	@ (80037bc <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f7fd fa0a 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	40023c00 	.word	0x40023c00
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08004a4c 	.word	0x08004a4c
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004

080037c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b480      	push	{r7}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000

080037d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037dc:	f7ff fff0 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037e0:	4602      	mov	r2, r0
 80037e2:	4b05      	ldr	r3, [pc, #20]	@ (80037f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	0a9b      	lsrs	r3, r3, #10
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	4903      	ldr	r1, [pc, #12]	@ (80037fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ee:	5ccb      	ldrb	r3, [r1, r3]
 80037f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	40023800 	.word	0x40023800
 80037fc:	08004a5c 	.word	0x08004a5c

08003800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003804:	f7ff ffdc 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 8003808:	4602      	mov	r2, r0
 800380a:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	0b5b      	lsrs	r3, r3, #13
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	4903      	ldr	r1, [pc, #12]	@ (8003824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003816:	5ccb      	ldrb	r3, [r1, r3]
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40023800 	.word	0x40023800
 8003824:	08004a5c 	.word	0x08004a5c

08003828 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800382c:	b0ae      	sub	sp, #184	@ 0xb8
 800382e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003848:	2300      	movs	r3, #0
 800384a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800384e:	4bcb      	ldr	r3, [pc, #812]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b0c      	cmp	r3, #12
 8003858:	f200 8206 	bhi.w	8003c68 <HAL_RCC_GetSysClockFreq+0x440>
 800385c:	a201      	add	r2, pc, #4	@ (adr r2, 8003864 <HAL_RCC_GetSysClockFreq+0x3c>)
 800385e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003862:	bf00      	nop
 8003864:	08003899 	.word	0x08003899
 8003868:	08003c69 	.word	0x08003c69
 800386c:	08003c69 	.word	0x08003c69
 8003870:	08003c69 	.word	0x08003c69
 8003874:	080038a1 	.word	0x080038a1
 8003878:	08003c69 	.word	0x08003c69
 800387c:	08003c69 	.word	0x08003c69
 8003880:	08003c69 	.word	0x08003c69
 8003884:	080038a9 	.word	0x080038a9
 8003888:	08003c69 	.word	0x08003c69
 800388c:	08003c69 	.word	0x08003c69
 8003890:	08003c69 	.word	0x08003c69
 8003894:	08003a99 	.word	0x08003a99
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4bb9      	ldr	r3, [pc, #740]	@ (8003b80 <HAL_RCC_GetSysClockFreq+0x358>)
 800389a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800389e:	e1e7      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a0:	4bb8      	ldr	r3, [pc, #736]	@ (8003b84 <HAL_RCC_GetSysClockFreq+0x35c>)
 80038a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80038a6:	e1e3      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a8:	4bb4      	ldr	r3, [pc, #720]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b4:	4bb1      	ldr	r3, [pc, #708]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d071      	beq.n	80039a4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c0:	4bae      	ldr	r3, [pc, #696]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	099b      	lsrs	r3, r3, #6
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80038cc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80038d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80038dc:	2300      	movs	r3, #0
 80038de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80038e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	f04f 0000 	mov.w	r0, #0
 80038ee:	f04f 0100 	mov.w	r1, #0
 80038f2:	0159      	lsls	r1, r3, #5
 80038f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f8:	0150      	lsls	r0, r2, #5
 80038fa:	4602      	mov	r2, r0
 80038fc:	460b      	mov	r3, r1
 80038fe:	4621      	mov	r1, r4
 8003900:	1a51      	subs	r1, r2, r1
 8003902:	6439      	str	r1, [r7, #64]	@ 0x40
 8003904:	4629      	mov	r1, r5
 8003906:	eb63 0301 	sbc.w	r3, r3, r1
 800390a:	647b      	str	r3, [r7, #68]	@ 0x44
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003918:	4649      	mov	r1, r9
 800391a:	018b      	lsls	r3, r1, #6
 800391c:	4641      	mov	r1, r8
 800391e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003922:	4641      	mov	r1, r8
 8003924:	018a      	lsls	r2, r1, #6
 8003926:	4641      	mov	r1, r8
 8003928:	1a51      	subs	r1, r2, r1
 800392a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800392c:	4649      	mov	r1, r9
 800392e:	eb63 0301 	sbc.w	r3, r3, r1
 8003932:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003934:	f04f 0200 	mov.w	r2, #0
 8003938:	f04f 0300 	mov.w	r3, #0
 800393c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003940:	4649      	mov	r1, r9
 8003942:	00cb      	lsls	r3, r1, #3
 8003944:	4641      	mov	r1, r8
 8003946:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800394a:	4641      	mov	r1, r8
 800394c:	00ca      	lsls	r2, r1, #3
 800394e:	4610      	mov	r0, r2
 8003950:	4619      	mov	r1, r3
 8003952:	4603      	mov	r3, r0
 8003954:	4622      	mov	r2, r4
 8003956:	189b      	adds	r3, r3, r2
 8003958:	633b      	str	r3, [r7, #48]	@ 0x30
 800395a:	462b      	mov	r3, r5
 800395c:	460a      	mov	r2, r1
 800395e:	eb42 0303 	adc.w	r3, r2, r3
 8003962:	637b      	str	r3, [r7, #52]	@ 0x34
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003970:	4629      	mov	r1, r5
 8003972:	024b      	lsls	r3, r1, #9
 8003974:	4621      	mov	r1, r4
 8003976:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800397a:	4621      	mov	r1, r4
 800397c:	024a      	lsls	r2, r1, #9
 800397e:	4610      	mov	r0, r2
 8003980:	4619      	mov	r1, r3
 8003982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003986:	2200      	movs	r2, #0
 8003988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800398c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003990:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003994:	f7fc fc36 	bl	8000204 <__aeabi_uldivmod>
 8003998:	4602      	mov	r2, r0
 800399a:	460b      	mov	r3, r1
 800399c:	4613      	mov	r3, r2
 800399e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039a2:	e067      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a4:	4b75      	ldr	r3, [pc, #468]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	099b      	lsrs	r3, r3, #6
 80039aa:	2200      	movs	r2, #0
 80039ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039b0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80039b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80039b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80039be:	2300      	movs	r3, #0
 80039c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039c2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80039c6:	4622      	mov	r2, r4
 80039c8:	462b      	mov	r3, r5
 80039ca:	f04f 0000 	mov.w	r0, #0
 80039ce:	f04f 0100 	mov.w	r1, #0
 80039d2:	0159      	lsls	r1, r3, #5
 80039d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d8:	0150      	lsls	r0, r2, #5
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4621      	mov	r1, r4
 80039e0:	1a51      	subs	r1, r2, r1
 80039e2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80039e4:	4629      	mov	r1, r5
 80039e6:	eb63 0301 	sbc.w	r3, r3, r1
 80039ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80039f8:	4649      	mov	r1, r9
 80039fa:	018b      	lsls	r3, r1, #6
 80039fc:	4641      	mov	r1, r8
 80039fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a02:	4641      	mov	r1, r8
 8003a04:	018a      	lsls	r2, r1, #6
 8003a06:	4641      	mov	r1, r8
 8003a08:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a0c:	4649      	mov	r1, r9
 8003a0e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a1e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a26:	4692      	mov	sl, r2
 8003a28:	469b      	mov	fp, r3
 8003a2a:	4623      	mov	r3, r4
 8003a2c:	eb1a 0303 	adds.w	r3, sl, r3
 8003a30:	623b      	str	r3, [r7, #32]
 8003a32:	462b      	mov	r3, r5
 8003a34:	eb4b 0303 	adc.w	r3, fp, r3
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	f04f 0300 	mov.w	r3, #0
 8003a42:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003a46:	4629      	mov	r1, r5
 8003a48:	028b      	lsls	r3, r1, #10
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a50:	4621      	mov	r1, r4
 8003a52:	028a      	lsls	r2, r1, #10
 8003a54:	4610      	mov	r0, r2
 8003a56:	4619      	mov	r1, r3
 8003a58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a60:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a62:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003a66:	f7fc fbcd 	bl	8000204 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4613      	mov	r3, r2
 8003a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a74:	4b41      	ldr	r3, [pc, #260]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003a86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003a96:	e0eb      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a98:	4b38      	ldr	r3, [pc, #224]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa4:	4b35      	ldr	r3, [pc, #212]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d06b      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab0:	4b32      	ldr	r3, [pc, #200]	@ (8003b7c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	099b      	lsrs	r3, r3, #6
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003aba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003abc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ac8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003acc:	4622      	mov	r2, r4
 8003ace:	462b      	mov	r3, r5
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	0159      	lsls	r1, r3, #5
 8003ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ade:	0150      	lsls	r0, r2, #5
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	1a51      	subs	r1, r2, r1
 8003ae8:	61b9      	str	r1, [r7, #24]
 8003aea:	4629      	mov	r1, r5
 8003aec:	eb63 0301 	sbc.w	r3, r3, r1
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003afe:	4659      	mov	r1, fp
 8003b00:	018b      	lsls	r3, r1, #6
 8003b02:	4651      	mov	r1, sl
 8003b04:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b08:	4651      	mov	r1, sl
 8003b0a:	018a      	lsls	r2, r1, #6
 8003b0c:	4651      	mov	r1, sl
 8003b0e:	ebb2 0801 	subs.w	r8, r2, r1
 8003b12:	4659      	mov	r1, fp
 8003b14:	eb63 0901 	sbc.w	r9, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b24:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b28:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b2c:	4690      	mov	r8, r2
 8003b2e:	4699      	mov	r9, r3
 8003b30:	4623      	mov	r3, r4
 8003b32:	eb18 0303 	adds.w	r3, r8, r3
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	462b      	mov	r3, r5
 8003b3a:	eb49 0303 	adc.w	r3, r9, r3
 8003b3e:	617b      	str	r3, [r7, #20]
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	024b      	lsls	r3, r1, #9
 8003b50:	4621      	mov	r1, r4
 8003b52:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b56:	4621      	mov	r1, r4
 8003b58:	024a      	lsls	r2, r1, #9
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b62:	2200      	movs	r2, #0
 8003b64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b66:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003b68:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b6c:	f7fc fb4a 	bl	8000204 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4613      	mov	r3, r2
 8003b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b7a:	e065      	b.n	8003c48 <HAL_RCC_GetSysClockFreq+0x420>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	00f42400 	.word	0x00f42400
 8003b84:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b88:	4b3d      	ldr	r3, [pc, #244]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	099b      	lsrs	r3, r3, #6
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4618      	mov	r0, r3
 8003b92:	4611      	mov	r1, r2
 8003b94:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b98:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b9e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003ba2:	4642      	mov	r2, r8
 8003ba4:	464b      	mov	r3, r9
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	0159      	lsls	r1, r3, #5
 8003bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bb4:	0150      	lsls	r0, r2, #5
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4641      	mov	r1, r8
 8003bbc:	1a51      	subs	r1, r2, r1
 8003bbe:	60b9      	str	r1, [r7, #8]
 8003bc0:	4649      	mov	r1, r9
 8003bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003bd4:	4659      	mov	r1, fp
 8003bd6:	018b      	lsls	r3, r1, #6
 8003bd8:	4651      	mov	r1, sl
 8003bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bde:	4651      	mov	r1, sl
 8003be0:	018a      	lsls	r2, r1, #6
 8003be2:	4651      	mov	r1, sl
 8003be4:	1a54      	subs	r4, r2, r1
 8003be6:	4659      	mov	r1, fp
 8003be8:	eb63 0501 	sbc.w	r5, r3, r1
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bfa:	00e2      	lsls	r2, r4, #3
 8003bfc:	4614      	mov	r4, r2
 8003bfe:	461d      	mov	r5, r3
 8003c00:	4643      	mov	r3, r8
 8003c02:	18e3      	adds	r3, r4, r3
 8003c04:	603b      	str	r3, [r7, #0]
 8003c06:	464b      	mov	r3, r9
 8003c08:	eb45 0303 	adc.w	r3, r5, r3
 8003c0c:	607b      	str	r3, [r7, #4]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c1a:	4629      	mov	r1, r5
 8003c1c:	028b      	lsls	r3, r1, #10
 8003c1e:	4621      	mov	r1, r4
 8003c20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c24:	4621      	mov	r1, r4
 8003c26:	028a      	lsls	r2, r1, #10
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c30:	2200      	movs	r2, #0
 8003c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c34:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003c36:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c3a:	f7fc fae3 	bl	8000204 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4613      	mov	r3, r2
 8003c44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c48:	4b0d      	ldr	r3, [pc, #52]	@ (8003c80 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0f1b      	lsrs	r3, r3, #28
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003c56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c66:	e003      	b.n	8003c70 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c68:	4b06      	ldr	r3, [pc, #24]	@ (8003c84 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003c6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	37b8      	adds	r7, #184	@ 0xb8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023800 	.word	0x40023800
 8003c84:	00f42400 	.word	0x00f42400

08003c88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e28d      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8083 	beq.w	8003dae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ca8:	4b94      	ldr	r3, [pc, #592]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 030c 	and.w	r3, r3, #12
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	d019      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cb4:	4b91      	ldr	r3, [pc, #580]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d106      	bne.n	8003cce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cce:	4b8b      	ldr	r3, [pc, #556]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cd6:	2b0c      	cmp	r3, #12
 8003cd8:	d112      	bne.n	8003d00 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cda:	4b88      	ldr	r3, [pc, #544]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce6:	d10b      	bne.n	8003d00 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce8:	4b84      	ldr	r3, [pc, #528]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d05b      	beq.n	8003dac <HAL_RCC_OscConfig+0x124>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d157      	bne.n	8003dac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e25a      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCC_OscConfig+0x90>
 8003d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e01d      	b.n	8003d54 <HAL_RCC_OscConfig+0xcc>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCC_OscConfig+0xb4>
 8003d22:	4b76      	ldr	r3, [pc, #472]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a75      	ldr	r2, [pc, #468]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b73      	ldr	r3, [pc, #460]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a72      	ldr	r2, [pc, #456]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d38:	6013      	str	r3, [r2, #0]
 8003d3a:	e00b      	b.n	8003d54 <HAL_RCC_OscConfig+0xcc>
 8003d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a6e      	ldr	r2, [pc, #440]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d46:	6013      	str	r3, [r2, #0]
 8003d48:	4b6c      	ldr	r3, [pc, #432]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fc ff6e 	bl	8000c3c <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fc ff6a 	bl	8000c3c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e21f      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d76:	4b61      	ldr	r3, [pc, #388]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0f0      	beq.n	8003d64 <HAL_RCC_OscConfig+0xdc>
 8003d82:	e014      	b.n	8003dae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d84:	f7fc ff5a 	bl	8000c3c <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d8c:	f7fc ff56 	bl	8000c3c <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b64      	cmp	r3, #100	@ 0x64
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e20b      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d9e:	4b57      	ldr	r3, [pc, #348]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1f0      	bne.n	8003d8c <HAL_RCC_OscConfig+0x104>
 8003daa:	e000      	b.n	8003dae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d06f      	beq.n	8003e9a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003dba:	4b50      	ldr	r3, [pc, #320]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d017      	beq.n	8003df6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
        || \
 8003dce:	2b08      	cmp	r3, #8
 8003dd0:	d105      	bne.n	8003dde <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00b      	beq.n	8003df6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dde:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d11c      	bne.n	8003e24 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dea:	4b44      	ldr	r3, [pc, #272]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d116      	bne.n	8003e24 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003df6:	4b41      	ldr	r3, [pc, #260]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_RCC_OscConfig+0x186>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e1d3      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e0e:	4b3b      	ldr	r3, [pc, #236]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4937      	ldr	r1, [pc, #220]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e22:	e03a      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d020      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e2c:	4b34      	ldr	r3, [pc, #208]	@ (8003f00 <HAL_RCC_OscConfig+0x278>)
 8003e2e:	2201      	movs	r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fc ff03 	bl	8000c3c <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fc feff 	bl	8000c3c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1b4      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b28      	ldr	r3, [pc, #160]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4925      	ldr	r1, [pc, #148]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	600b      	str	r3, [r1, #0]
 8003e6c:	e015      	b.n	8003e9a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <HAL_RCC_OscConfig+0x278>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e74:	f7fc fee2 	bl	8000c3c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fc fede 	bl	8000c3c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e193      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d036      	beq.n	8003f14 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_RCC_OscConfig+0x27c>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fc fec2 	bl	8000c3c <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fc febe 	bl	8000c3c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e173      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ece:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <HAL_RCC_OscConfig+0x274>)
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x234>
 8003eda:	e01b      	b.n	8003f14 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <HAL_RCC_OscConfig+0x27c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee2:	f7fc feab 	bl	8000c3c <HAL_GetTick>
 8003ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee8:	e00e      	b.n	8003f08 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eea:	f7fc fea7 	bl	8000c3c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d907      	bls.n	8003f08 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e15c      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
 8003efc:	40023800 	.word	0x40023800
 8003f00:	42470000 	.word	0x42470000
 8003f04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	4b8a      	ldr	r3, [pc, #552]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1ea      	bne.n	8003eea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0304 	and.w	r3, r3, #4
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8097 	beq.w	8004050 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f26:	4b83      	ldr	r3, [pc, #524]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10f      	bne.n	8003f52 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	4b7f      	ldr	r3, [pc, #508]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3a:	4a7e      	ldr	r2, [pc, #504]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f42:	4b7c      	ldr	r3, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f52:	4b79      	ldr	r3, [pc, #484]	@ (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d118      	bne.n	8003f90 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f5e:	4b76      	ldr	r3, [pc, #472]	@ (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a75      	ldr	r2, [pc, #468]	@ (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6a:	f7fc fe67 	bl	8000c3c <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f72:	f7fc fe63 	bl	8000c3c <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e118      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f84:	4b6c      	ldr	r3, [pc, #432]	@ (8004138 <HAL_RCC_OscConfig+0x4b0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d0f0      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x31e>
 8003f98:	4b66      	ldr	r3, [pc, #408]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	4a65      	ldr	r2, [pc, #404]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa4:	e01c      	b.n	8003fe0 <HAL_RCC_OscConfig+0x358>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	2b05      	cmp	r3, #5
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x340>
 8003fae:	4b61      	ldr	r3, [pc, #388]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb2:	4a60      	ldr	r2, [pc, #384]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fb4:	f043 0304 	orr.w	r3, r3, #4
 8003fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fba:	4b5e      	ldr	r3, [pc, #376]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0x358>
 8003fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fcc:	4a59      	ldr	r2, [pc, #356]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fce:	f023 0301 	bic.w	r3, r3, #1
 8003fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd4:	4b57      	ldr	r3, [pc, #348]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd8:	4a56      	ldr	r2, [pc, #344]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8003fda:	f023 0304 	bic.w	r3, r3, #4
 8003fde:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe8:	f7fc fe28 	bl	8000c3c <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	e00a      	b.n	8004006 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ff0:	f7fc fe24 	bl	8000c3c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e0d7      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0ee      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x368>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fc fe12 	bl	8000c3c <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	e00a      	b.n	8004032 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401c:	f7fc fe0e 	bl	8000c3c <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402a:	4293      	cmp	r3, r2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e0c1      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	4b40      	ldr	r3, [pc, #256]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1ee      	bne.n	800401c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800403e:	7dfb      	ldrb	r3, [r7, #23]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d105      	bne.n	8004050 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004044:	4b3b      	ldr	r3, [pc, #236]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	4a3a      	ldr	r2, [pc, #232]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800404a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800404e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 80ad 	beq.w	80041b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405a:	4b36      	ldr	r3, [pc, #216]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b08      	cmp	r3, #8
 8004064:	d060      	beq.n	8004128 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d145      	bne.n	80040fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_RCC_OscConfig+0x4b4>)
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004074:	f7fc fde2 	bl	8000c3c <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fc fdde 	bl	8000c3c <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e093      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d1f0      	bne.n	800407c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69da      	ldr	r2, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	3b01      	subs	r3, #1
 80040b4:	041b      	lsls	r3, r3, #16
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	071b      	lsls	r3, r3, #28
 80040c6:	491b      	ldr	r1, [pc, #108]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	@ (800413c <HAL_RCC_OscConfig+0x4b4>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fc fdb3 	bl	8000c3c <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040da:	f7fc fdaf 	bl	8000c3c <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e064      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x452>
 80040f8:	e05c      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	@ (800413c <HAL_RCC_OscConfig+0x4b4>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fc fd9c 	bl	8000c3c <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fc fd98 	bl	8000c3c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04d      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_RCC_OscConfig+0x4ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x480>
 8004126:	e045      	b.n	80041b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e040      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1f      	ldr	r3, [pc, #124]	@ (80041c0 <HAL_RCC_OscConfig+0x538>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d030      	beq.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d129      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d122      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d119      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d10f      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d101      	bne.n	80041d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e042      	b.n	800425c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d106      	bne.n	80041f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fc fbee 	bl	80009cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004206:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f000 f973 	bl	80044f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	691a      	ldr	r2, [r3, #16]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800421c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695a      	ldr	r2, [r3, #20]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800422c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800423c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	3708      	adds	r7, #8
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	@ 0x28
 8004268:	af02      	add	r7, sp, #8
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b20      	cmp	r3, #32
 8004282:	d175      	bne.n	8004370 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d002      	beq.n	8004290 <HAL_UART_Transmit+0x2c>
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d101      	bne.n	8004294 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e06e      	b.n	8004372 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2221      	movs	r2, #33	@ 0x21
 800429e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042a2:	f7fc fccb 	bl	8000c3c <HAL_GetTick>
 80042a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	88fa      	ldrh	r2, [r7, #6]
 80042ac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	88fa      	ldrh	r2, [r7, #6]
 80042b2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042bc:	d108      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	61bb      	str	r3, [r7, #24]
 80042ce:	e003      	b.n	80042d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d8:	e02e      	b.n	8004338 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2180      	movs	r1, #128	@ 0x80
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f848 	bl	800437a <UART_WaitOnFlagUntilTimeout>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e03a      	b.n	8004372 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10b      	bne.n	800431a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	3302      	adds	r3, #2
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	e007      	b.n	800432a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	781a      	ldrb	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	3301      	adds	r3, #1
 8004328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1cb      	bne.n	80042da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2200      	movs	r2, #0
 800434a:	2140      	movs	r1, #64	@ 0x40
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f814 	bl	800437a <UART_WaitOnFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e006      	b.n	8004372 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800436c:	2300      	movs	r3, #0
 800436e:	e000      	b.n	8004372 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004370:	2302      	movs	r3, #2
  }
}
 8004372:	4618      	mov	r0, r3
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	e03b      	b.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d037      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fc fc52 	bl	8000c3c <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	6a3a      	ldr	r2, [r7, #32]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <UART_WaitOnFlagUntilTimeout+0x30>
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e03a      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d023      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d020      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	2b40      	cmp	r3, #64	@ 0x40
 80043c6:	d01d      	beq.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d116      	bne.n	8004404 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	617b      	str	r3, [r7, #20]
 80043ea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f000 f81d 	bl	800442c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2208      	movs	r2, #8
 80043f6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e00f      	b.n	8004424 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	4013      	ands	r3, r2
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	429a      	cmp	r2, r3
 8004412:	bf0c      	ite	eq
 8004414:	2301      	moveq	r3, #1
 8004416:	2300      	movne	r3, #0
 8004418:	b2db      	uxtb	r3, r3
 800441a:	461a      	mov	r2, r3
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	429a      	cmp	r2, r3
 8004420:	d0b4      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b095      	sub	sp, #84	@ 0x54
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	330c      	adds	r3, #12
 800443a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	e853 3f00 	ldrex	r3, [r3]
 8004442:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800444a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004454:	643a      	str	r2, [r7, #64]	@ 0x40
 8004456:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004458:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800445a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800445c:	e841 2300 	strex	r3, r2, [r1]
 8004460:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1e5      	bne.n	8004434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3314      	adds	r3, #20
 800446e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	61fb      	str	r3, [r7, #28]
   return(result);
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	f023 0301 	bic.w	r3, r3, #1
 800447e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004488:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800448a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800448e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e5      	bne.n	8004468 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d119      	bne.n	80044d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f023 0310 	bic.w	r3, r3, #16
 80044ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044c4:	61ba      	str	r2, [r7, #24]
 80044c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c8:	6979      	ldr	r1, [r7, #20]
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	e841 2300 	strex	r3, r2, [r1]
 80044d0:	613b      	str	r3, [r7, #16]
   return(result);
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d1e5      	bne.n	80044a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044e6:	bf00      	nop
 80044e8:	3754      	adds	r7, #84	@ 0x54
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
	...

080044f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044f8:	b0c0      	sub	sp, #256	@ 0x100
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800450c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004510:	68d9      	ldr	r1, [r3, #12]
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	ea40 0301 	orr.w	r3, r0, r1
 800451c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	431a      	orrs	r2, r3
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	431a      	orrs	r2, r3
 8004534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	4313      	orrs	r3, r2
 800453c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800454c:	f021 010c 	bic.w	r1, r1, #12
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800455a:	430b      	orrs	r3, r1
 800455c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800455e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	6999      	ldr	r1, [r3, #24]
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	ea40 0301 	orr.w	r3, r0, r1
 800457a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b8f      	ldr	r3, [pc, #572]	@ (80047c0 <UART_SetConfig+0x2cc>)
 8004584:	429a      	cmp	r2, r3
 8004586:	d005      	beq.n	8004594 <UART_SetConfig+0xa0>
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b8d      	ldr	r3, [pc, #564]	@ (80047c4 <UART_SetConfig+0x2d0>)
 8004590:	429a      	cmp	r2, r3
 8004592:	d104      	bne.n	800459e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004594:	f7ff f934 	bl	8003800 <HAL_RCC_GetPCLK2Freq>
 8004598:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800459c:	e003      	b.n	80045a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800459e:	f7ff f91b 	bl	80037d8 <HAL_RCC_GetPCLK1Freq>
 80045a2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045aa:	69db      	ldr	r3, [r3, #28]
 80045ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b0:	f040 810c 	bne.w	80047cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045b8:	2200      	movs	r2, #0
 80045ba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045be:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045c6:	4622      	mov	r2, r4
 80045c8:	462b      	mov	r3, r5
 80045ca:	1891      	adds	r1, r2, r2
 80045cc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ce:	415b      	adcs	r3, r3
 80045d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045d6:	4621      	mov	r1, r4
 80045d8:	eb12 0801 	adds.w	r8, r2, r1
 80045dc:	4629      	mov	r1, r5
 80045de:	eb43 0901 	adc.w	r9, r3, r1
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045f6:	4690      	mov	r8, r2
 80045f8:	4699      	mov	r9, r3
 80045fa:	4623      	mov	r3, r4
 80045fc:	eb18 0303 	adds.w	r3, r8, r3
 8004600:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004604:	462b      	mov	r3, r5
 8004606:	eb49 0303 	adc.w	r3, r9, r3
 800460a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800460e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800461a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800461e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004622:	460b      	mov	r3, r1
 8004624:	18db      	adds	r3, r3, r3
 8004626:	653b      	str	r3, [r7, #80]	@ 0x50
 8004628:	4613      	mov	r3, r2
 800462a:	eb42 0303 	adc.w	r3, r2, r3
 800462e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004630:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004634:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004638:	f7fb fde4 	bl	8000204 <__aeabi_uldivmod>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4b61      	ldr	r3, [pc, #388]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004642:	fba3 2302 	umull	r2, r3, r3, r2
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	011c      	lsls	r4, r3, #4
 800464a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800464e:	2200      	movs	r2, #0
 8004650:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004654:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004658:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800465c:	4642      	mov	r2, r8
 800465e:	464b      	mov	r3, r9
 8004660:	1891      	adds	r1, r2, r2
 8004662:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004664:	415b      	adcs	r3, r3
 8004666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004668:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800466c:	4641      	mov	r1, r8
 800466e:	eb12 0a01 	adds.w	sl, r2, r1
 8004672:	4649      	mov	r1, r9
 8004674:	eb43 0b01 	adc.w	fp, r3, r1
 8004678:	f04f 0200 	mov.w	r2, #0
 800467c:	f04f 0300 	mov.w	r3, #0
 8004680:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004684:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004688:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800468c:	4692      	mov	sl, r2
 800468e:	469b      	mov	fp, r3
 8004690:	4643      	mov	r3, r8
 8004692:	eb1a 0303 	adds.w	r3, sl, r3
 8004696:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800469a:	464b      	mov	r3, r9
 800469c:	eb4b 0303 	adc.w	r3, fp, r3
 80046a0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046b0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046b8:	460b      	mov	r3, r1
 80046ba:	18db      	adds	r3, r3, r3
 80046bc:	643b      	str	r3, [r7, #64]	@ 0x40
 80046be:	4613      	mov	r3, r2
 80046c0:	eb42 0303 	adc.w	r3, r2, r3
 80046c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80046c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ce:	f7fb fd99 	bl	8000204 <__aeabi_uldivmod>
 80046d2:	4602      	mov	r2, r0
 80046d4:	460b      	mov	r3, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	4b3b      	ldr	r3, [pc, #236]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80046da:	fba3 2301 	umull	r2, r3, r3, r1
 80046de:	095b      	lsrs	r3, r3, #5
 80046e0:	2264      	movs	r2, #100	@ 0x64
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	1acb      	subs	r3, r1, r3
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046ee:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80046f0:	fba3 2302 	umull	r2, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046fc:	441c      	add	r4, r3
 80046fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004702:	2200      	movs	r2, #0
 8004704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004708:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800470c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	1891      	adds	r1, r2, r2
 8004716:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004718:	415b      	adcs	r3, r3
 800471a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800471c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004720:	4641      	mov	r1, r8
 8004722:	1851      	adds	r1, r2, r1
 8004724:	6339      	str	r1, [r7, #48]	@ 0x30
 8004726:	4649      	mov	r1, r9
 8004728:	414b      	adcs	r3, r1
 800472a:	637b      	str	r3, [r7, #52]	@ 0x34
 800472c:	f04f 0200 	mov.w	r2, #0
 8004730:	f04f 0300 	mov.w	r3, #0
 8004734:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004738:	4659      	mov	r1, fp
 800473a:	00cb      	lsls	r3, r1, #3
 800473c:	4651      	mov	r1, sl
 800473e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004742:	4651      	mov	r1, sl
 8004744:	00ca      	lsls	r2, r1, #3
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	4603      	mov	r3, r0
 800474c:	4642      	mov	r2, r8
 800474e:	189b      	adds	r3, r3, r2
 8004750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004754:	464b      	mov	r3, r9
 8004756:	460a      	mov	r2, r1
 8004758:	eb42 0303 	adc.w	r3, r2, r3
 800475c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800476c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004770:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004774:	460b      	mov	r3, r1
 8004776:	18db      	adds	r3, r3, r3
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800477a:	4613      	mov	r3, r2
 800477c:	eb42 0303 	adc.w	r3, r2, r3
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004786:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800478a:	f7fb fd3b 	bl	8000204 <__aeabi_uldivmod>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <UART_SetConfig+0x2d4>)
 8004794:	fba3 1302 	umull	r1, r3, r3, r2
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	00db      	lsls	r3, r3, #3
 80047a4:	3332      	adds	r3, #50	@ 0x32
 80047a6:	4a08      	ldr	r2, [pc, #32]	@ (80047c8 <UART_SetConfig+0x2d4>)
 80047a8:	fba2 2303 	umull	r2, r3, r2, r3
 80047ac:	095b      	lsrs	r3, r3, #5
 80047ae:	f003 0207 	and.w	r2, r3, #7
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4422      	add	r2, r4
 80047ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047bc:	e106      	b.n	80049cc <UART_SetConfig+0x4d8>
 80047be:	bf00      	nop
 80047c0:	40011000 	.word	0x40011000
 80047c4:	40011400 	.word	0x40011400
 80047c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047de:	4642      	mov	r2, r8
 80047e0:	464b      	mov	r3, r9
 80047e2:	1891      	adds	r1, r2, r2
 80047e4:	6239      	str	r1, [r7, #32]
 80047e6:	415b      	adcs	r3, r3
 80047e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047ee:	4641      	mov	r1, r8
 80047f0:	1854      	adds	r4, r2, r1
 80047f2:	4649      	mov	r1, r9
 80047f4:	eb43 0501 	adc.w	r5, r3, r1
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	00eb      	lsls	r3, r5, #3
 8004802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004806:	00e2      	lsls	r2, r4, #3
 8004808:	4614      	mov	r4, r2
 800480a:	461d      	mov	r5, r3
 800480c:	4643      	mov	r3, r8
 800480e:	18e3      	adds	r3, r4, r3
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004814:	464b      	mov	r3, r9
 8004816:	eb45 0303 	adc.w	r3, r5, r3
 800481a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800482a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	f04f 0300 	mov.w	r3, #0
 8004836:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800483a:	4629      	mov	r1, r5
 800483c:	008b      	lsls	r3, r1, #2
 800483e:	4621      	mov	r1, r4
 8004840:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004844:	4621      	mov	r1, r4
 8004846:	008a      	lsls	r2, r1, #2
 8004848:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800484c:	f7fb fcda 	bl	8000204 <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4b60      	ldr	r3, [pc, #384]	@ (80049d8 <UART_SetConfig+0x4e4>)
 8004856:	fba3 2302 	umull	r2, r3, r3, r2
 800485a:	095b      	lsrs	r3, r3, #5
 800485c:	011c      	lsls	r4, r3, #4
 800485e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004862:	2200      	movs	r2, #0
 8004864:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004868:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800486c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004870:	4642      	mov	r2, r8
 8004872:	464b      	mov	r3, r9
 8004874:	1891      	adds	r1, r2, r2
 8004876:	61b9      	str	r1, [r7, #24]
 8004878:	415b      	adcs	r3, r3
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004880:	4641      	mov	r1, r8
 8004882:	1851      	adds	r1, r2, r1
 8004884:	6139      	str	r1, [r7, #16]
 8004886:	4649      	mov	r1, r9
 8004888:	414b      	adcs	r3, r1
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004898:	4659      	mov	r1, fp
 800489a:	00cb      	lsls	r3, r1, #3
 800489c:	4651      	mov	r1, sl
 800489e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048a2:	4651      	mov	r1, sl
 80048a4:	00ca      	lsls	r2, r1, #3
 80048a6:	4610      	mov	r0, r2
 80048a8:	4619      	mov	r1, r3
 80048aa:	4603      	mov	r3, r0
 80048ac:	4642      	mov	r2, r8
 80048ae:	189b      	adds	r3, r3, r2
 80048b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048b4:	464b      	mov	r3, r9
 80048b6:	460a      	mov	r2, r1
 80048b8:	eb42 0303 	adc.w	r3, r2, r3
 80048bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048d8:	4649      	mov	r1, r9
 80048da:	008b      	lsls	r3, r1, #2
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048e2:	4641      	mov	r1, r8
 80048e4:	008a      	lsls	r2, r1, #2
 80048e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048ea:	f7fb fc8b 	bl	8000204 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	@ 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	3332      	adds	r3, #50	@ 0x32
 8004908:	4a33      	ldr	r2, [pc, #204]	@ (80049d8 <UART_SetConfig+0x4e4>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004914:	441c      	add	r4, r3
 8004916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491a:	2200      	movs	r2, #0
 800491c:	673b      	str	r3, [r7, #112]	@ 0x70
 800491e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004920:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004924:	4642      	mov	r2, r8
 8004926:	464b      	mov	r3, r9
 8004928:	1891      	adds	r1, r2, r2
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	415b      	adcs	r3, r3
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004934:	4641      	mov	r1, r8
 8004936:	1851      	adds	r1, r2, r1
 8004938:	6039      	str	r1, [r7, #0]
 800493a:	4649      	mov	r1, r9
 800493c:	414b      	adcs	r3, r1
 800493e:	607b      	str	r3, [r7, #4]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800494c:	4659      	mov	r1, fp
 800494e:	00cb      	lsls	r3, r1, #3
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004956:	4651      	mov	r1, sl
 8004958:	00ca      	lsls	r2, r1, #3
 800495a:	4610      	mov	r0, r2
 800495c:	4619      	mov	r1, r3
 800495e:	4603      	mov	r3, r0
 8004960:	4642      	mov	r2, r8
 8004962:	189b      	adds	r3, r3, r2
 8004964:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004966:	464b      	mov	r3, r9
 8004968:	460a      	mov	r2, r1
 800496a:	eb42 0303 	adc.w	r3, r2, r3
 800496e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	663b      	str	r3, [r7, #96]	@ 0x60
 800497a:	667a      	str	r2, [r7, #100]	@ 0x64
 800497c:	f04f 0200 	mov.w	r2, #0
 8004980:	f04f 0300 	mov.w	r3, #0
 8004984:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004988:	4649      	mov	r1, r9
 800498a:	008b      	lsls	r3, r1, #2
 800498c:	4641      	mov	r1, r8
 800498e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004992:	4641      	mov	r1, r8
 8004994:	008a      	lsls	r2, r1, #2
 8004996:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800499a:	f7fb fc33 	bl	8000204 <__aeabi_uldivmod>
 800499e:	4602      	mov	r2, r0
 80049a0:	460b      	mov	r3, r1
 80049a2:	4b0d      	ldr	r3, [pc, #52]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80049a4:	fba3 1302 	umull	r1, r3, r3, r2
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	2164      	movs	r1, #100	@ 0x64
 80049ac:	fb01 f303 	mul.w	r3, r1, r3
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	3332      	adds	r3, #50	@ 0x32
 80049b6:	4a08      	ldr	r2, [pc, #32]	@ (80049d8 <UART_SetConfig+0x4e4>)
 80049b8:	fba2 2303 	umull	r2, r3, r2, r3
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4422      	add	r2, r4
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049d2:	46bd      	mov	sp, r7
 80049d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d8:	51eb851f 	.word	0x51eb851f

080049dc <memset>:
 80049dc:	4402      	add	r2, r0
 80049de:	4603      	mov	r3, r0
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d100      	bne.n	80049e6 <memset+0xa>
 80049e4:	4770      	bx	lr
 80049e6:	f803 1b01 	strb.w	r1, [r3], #1
 80049ea:	e7f9      	b.n	80049e0 <memset+0x4>

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	@ (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	@ (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	@ (8004a30 <__libc_init_array+0x44>)
 8004a00:	f000 f818 	bl	8004a34 <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08004a74 	.word	0x08004a74
 8004a28:	08004a74 	.word	0x08004a74
 8004a2c:	08004a74 	.word	0x08004a74
 8004a30:	08004a78 	.word	0x08004a78

08004a34 <_init>:
 8004a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a36:	bf00      	nop
 8004a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3a:	bc08      	pop	{r3}
 8004a3c:	469e      	mov	lr, r3
 8004a3e:	4770      	bx	lr

08004a40 <_fini>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr
